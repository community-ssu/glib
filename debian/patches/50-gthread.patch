diff -Naurp glib-2.18.1/gthread/gthread-posix.c glib/gthread/gthread-posix.c
--- glib-2.18.1/gthread/gthread-posix.c	2009-04-29 10:36:55.000000000 +0300
+++ glib/gthread/gthread-posix.c	2009-04-29 10:37:18.000000000 +0300
@@ -342,9 +342,24 @@ g_thread_create_posix_impl (GThreadFunc 
 #ifdef HAVE_PRIORITIES
 # ifdef G_THREADS_IMPL_POSIX
   {
+    int policy, pprio;
     struct sched_param sched;
-    posix_check_cmd (pthread_attr_getschedparam (&attr, &sched));
-    sched.sched_priority = g_thread_priority_map [priority];
+    /* this would use the default values */
+    /*posix_check_cmd (pthread_attr_getschedpolicy(&attr, &policy));
+    posix_check_cmd (pthread_attr_getschedparam (&attr, &sched));*/
+    /* but we want to inherit...
+     * priority maps are initialized based on inheritance assumption anyway
+     * and that's where the problem comes from... */
+    posix_check_cmd (pthread_getschedparam (pthread_self(), &policy, &sched));
+    pprio = g_thread_priority_map [priority];
+    if (pprio < sched_get_priority_min(policy))
+      pprio = sched_get_priority_min(policy);
+    else if (pprio > sched_get_priority_max(policy))
+      pprio = sched_get_priority_max(policy);
+    sched.sched_priority = pprio;
+    /*g_print("%s@%i: creating thread with policy %i, priority %i\n",
+      __FILE__, __LINE__, policy, pprio);*/
+    posix_check_cmd_prio (pthread_attr_setschedpolicy (&attr, policy));
     posix_check_cmd_prio (pthread_attr_setschedparam (&attr, &sched));
   }
 # else /* G_THREADS_IMPL_DCE */
