diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/enumerations_flags.sgml glib/docs/reference/gobject/tmpl/enumerations_flags.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/enumerations_flags.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/enumerations_flags.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -1,240 +1,303 @@
 <!-- ##### SECTION Title ##### -->
-Enumeration and Flag Types
+Enums and Flags
 
 <!-- ##### SECTION Short_Description ##### -->
-
+Enumeration and flags types
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
+The GLib type system provides fundamental types for enumeration and flags types. (Flags types
+are like enumerations, but allow their values to be combined by bitwise or). A registered 
+enumeration or flags type associates a name and a nickname with each allowed value, and 
+the methods g_enum_get_value_by_name(), g_enum_get_value_by_nick(), g_flags_get_value_by_name()
+and g_flags_get_value_by_nick() can look up values by their name or nickname.
+When an enumeration or flags type is registered with the GLib type system, it can
+be used as value type for object properties, using g_param_spec_enum() or 
+g_param_spec_flags().
+</para>
+<para>
+GObject ships with a utility called <link linkend="glib-mkenums">glib-mkenums</link> that can 
+construct suitable type registration functions from C enumeration definitions.
 </para>
-
 
 <!-- ##### SECTION See_Also ##### -->
 <para>
-
+#GParamSpecEnum, #GParamSpecFlags, g_param_spec_enum(), g_param_spec_flags(), 
+<link linkend="glib-mkenums">glib-mkenums</link>
 </para>
 
-
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### STRUCT GEnumClass ##### -->
 <para>
-
+The class of an enumeration type holds information about its 
+possible values.
 </para>
 
-@g_type_class: 
-@minimum: 
-@maximum: 
-@n_values: 
-@values: 
+@g_type_class: the parent class
+@minimum: the smallest possible value.
+@maximum: the largest possible value.
+@n_values: the number of possible values.
+@values: an array of #GEnumValue structs describing the 
+individual values.
 
 <!-- ##### STRUCT GFlagsClass ##### -->
 <para>
-
+The class of a flags type holds information about its 
+possible values.
 </para>
 
-@g_type_class: 
-@mask: 
-@n_values: 
-@values: 
+@g_type_class: the parent class
+@mask: a mask covering all possible values.
+@n_values: the number of possible values.
+@values: an array of #GFlagsValue structs describing the 
+individual values.
 
 <!-- ##### MACRO G_ENUM_CLASS_TYPE ##### -->
 <para>
-
+Returns the type identifier from a given #GEnumClass structure.
 </para>
 
-@class: 
+@class: a #GEnumClass
 
 
 <!-- ##### MACRO G_ENUM_CLASS_TYPE_NAME ##### -->
 <para>
-
+Returns the static type name from a given #GEnumClass structure.
 </para>
 
-@class: 
+@class: a #GEnumClass
 
 
 <!-- ##### MACRO G_TYPE_IS_ENUM ##### -->
 <para>
-
+Returns whether @type "is a" %G_TYPE_ENUM.
 </para>
 
-@type: 
+@type: a #GType ID.
 
 
 <!-- ##### MACRO G_ENUM_CLASS ##### -->
 <para>
-
+Casts a derived #GEnumClass structure into a #GEnumClass structure.
 </para>
 
-@class: 
+@class: a valid #GEnumClass
 
 
 <!-- ##### MACRO G_IS_ENUM_CLASS ##### -->
 <para>
-
+Checks whether @class "is a" valid #GEnumClass structure of type %G_TYPE_ENUM
+or derived.
 </para>
 
-@class: 
+@class: a #GEnumClass
 
 
 <!-- ##### MACRO G_TYPE_IS_FLAGS ##### -->
 <para>
-
+Returns whether @type "is a" %G_TYPE_FLAGS.
 </para>
 
-@type: 
+@type: a #GType ID.
 
 
 <!-- ##### MACRO G_FLAGS_CLASS ##### -->
 <para>
-
+Casts a derived #GFlagsClass structure into a #GFlagsClass structure.
 </para>
 
-@class: 
+@class: a valid #GFlagsClass
 
 
 <!-- ##### MACRO G_IS_FLAGS_CLASS ##### -->
 <para>
-
+Checks whether @class "is a" valid #GFlagsClass structure of type %G_TYPE_FLAGS
+or derived.
 </para>
 
-@class: 
+@class: a #GFlagsClass
 
 
 <!-- ##### MACRO G_FLAGS_CLASS_TYPE ##### -->
 <para>
-
+Returns the type identifier from a given #GFlagsClass structure.
 </para>
 
-@class: 
+@class: a #GFlagsClass
 
 
 <!-- ##### MACRO G_FLAGS_CLASS_TYPE_NAME ##### -->
 <para>
-
+Returns the static type name from a given #GFlagsClass structure.
 </para>
 
-@class: 
+@class: a #GFlagsClass
 
 
 <!-- ##### STRUCT GEnumValue ##### -->
 <para>
-
+A structure which contains a single enum value, it's name, and it's
+nickname.
 </para>
 
-@value: 
-@value_name: 
-@value_nick: 
+@value: the enum value
+@value_name: the name of the value
+@value_nick: the nickname of the value
 
 <!-- ##### STRUCT GFlagsValue ##### -->
 <para>
-
+A structure which contains a single flags value, it's name, and it's
+nickname.
 </para>
 
-@value: 
-@value_name: 
-@value_nick: 
+@value: the flags value
+@value_name: the name of the value
+@value_nick: the nickname of the value
 
 <!-- ##### FUNCTION g_enum_get_value ##### -->
 <para>
-
+Returns the #GEnumValue for a value.
 </para>
 
-@enum_class: 
-@value: 
-@Returns: 
+@enum_class: a #GEnumClass
+@value: the value to look up
+@Returns: the #GEnumValue for @value, or %NULL if @value is not 
+a member of the enumeration
 
 
 <!-- ##### FUNCTION g_enum_get_value_by_name ##### -->
 <para>
-
+Looks up a #GEnumValue by name.
 </para>
 
-@enum_class: 
-@name: 
-@Returns: 
+@enum_class: a #GEnumClass
+@name: the name to look up
+@Returns: the #GEnumValue with name @name, or %NULL if the enumeration doesn'
+t have a member with that name
 
 
 <!-- ##### FUNCTION g_enum_get_value_by_nick ##### -->
 <para>
-
+Looks up a #GEnumValue by nickname.
 </para>
 
-@enum_class: 
-@nick: 
-@Returns: 
+@enum_class: a #GEnumClass
+@nick: the nickname to look up
+@Returns: the #GEnumValue with nickname @nick, or %NULL if the enumeration doesn'
+t have a member with that nickname
 
 
 <!-- ##### FUNCTION g_flags_get_first_value ##### -->
 <para>
-
+Returns the first #GFlagsValue which is set in @value.
 </para>
 
-@flags_class: 
-@value: 
-@Returns: 
+@flags_class: a #GFlagsClass
+@value: the value
+@Returns: the first #GFlagsValue which is set in @value, or %NULL if none is set
 
 
 <!-- ##### FUNCTION g_flags_get_value_by_name ##### -->
 <para>
-
+Looks up a #GFlagsValue by name.
 </para>
 
-@flags_class: 
-@name: 
-@Returns: 
+@flags_class: a #GFlagsClass
+@name: the name to look up
+@Returns: the #GFlagsValue with name @name, or %NULL if there is no flag with
+that name
 
 
 <!-- ##### FUNCTION g_flags_get_value_by_nick ##### -->
 <para>
-
+Looks up a #GFlagsValue by nickname.
 </para>
 
-@flags_class: 
-@nick: 
-@Returns: 
+@flags_class: a #GFlagsClass
+@nick: the nickname to look up
+@Returns: the #GFlagsValue with nickname @nick, or %NULL if there is no flag
+with that nickname
 
 
 <!-- ##### FUNCTION g_enum_register_static ##### -->
 <para>
-
+Registers a new static enumeration type with the name @name. 
+</para>
+<para>
+It is normally more convenient to let <link linkend="glib-mkenums">glib-mkenums</link> 
+generate a my_enum_get_type() function from a usual C enumeration definition
+than to write one yourself using g_enum_register_static().
 </para>
 
-@name: 
-@const_static_values: 
-@Returns: 
+@name: A nul-terminated string used as the name of the new type.
+@const_static_values: An array of #GEnumValue structs for the possible
+  enumeration values. The array is terminated by a struct with all 
+  members being 0. GObject keeps a reference to the data, so it cannot
+  be stack-allocated.
+@Returns: The new type identifier.
 
 
 <!-- ##### FUNCTION g_flags_register_static ##### -->
 <para>
-
+Registers a new static flags type with the name @name. 
+</para>
+<para>
+It is normally more convenient to let <link linkend="glib-mkenums">glib-mkenums</link> 
+generate a my_flags_get_type() function from a usual C enumeration definition
+than to write one yourself using g_flags_register_static().
 </para>
 
-@name: 
-@const_static_values: 
-@Returns: 
+@name: A nul-terminated string used as the name of the new type.
+@const_static_values: An array of #GFlagsValue structs for the possible
+  flags values. The array is terminated by a struct with all members being 0.
+  GObject keeps a reference to the data, so it cannot be stack-allocated.
+@Returns: The new type identifier.
 
 
 <!-- ##### FUNCTION g_enum_complete_type_info ##### -->
 <para>
-
-</para>
-
-@g_enum_type: 
-@info: 
-@const_values: 
+This function is meant to be called from the complete_type_info() function 
+of a #GTypePlugin implementation, as in the following example:
+<informalexample>
+<programlisting>
+static void
+my_enum_complete_type_info (GTypePlugin     *plugin,
+                            GType            g_type,
+                            GTypeInfo       *info,
+                            GTypeValueTable *value_table)
+{
+  static const GEnumValue values[] = {
+    { MY_ENUM_FOO, "MY_ENUM_FOO", "foo" },
+    { MY_ENUM_BAR, "MY_ENUM_BAR", "bar" },
+    { 0, NULL, NULL }
+  };  
+   
+  g_enum_complete_type_info (type, info, values);  
+}
+</programlisting>
+</informalexample>
+</para>
+
+@g_enum_type: the type identifier of the type being completed
+@info: the #GTypeInfo struct to be filled in
+@const_values: An array of #GEnumValue structs for the possible
+  enumeration values. The array is terminated by a struct with all 
+  members being 0.
 
 
 <!-- ##### FUNCTION g_flags_complete_type_info ##### -->
 <para>
-
+This function is meant to be called from the complete_type_info() function 
+of a #GTypePlugin implementation, see the example for 
+g_enumeration_complete_type_info() above.
 </para>
 
-@g_flags_type: 
-@info: 
-@const_values: 
+@g_flags_type: the type identifier of the type being completed
+@info: the #GTypeInfo struct to be filled in
+@const_values: An array of #GFlagsValue structs for the possible
+  enumeration values. The array is terminated by a struct with all 
+  members being 0.
 
 
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/gboxed.sgml glib/docs/reference/gobject/tmpl/gboxed.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/gboxed.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/gboxed.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -1,118 +1,155 @@
 <!-- ##### SECTION Title ##### -->
-Boxed Types
+GBoxed
 
 <!-- ##### SECTION Short_Description ##### -->
-
+A mechanism to wrap opaque C structures registered by the type system
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
+GBoxed is a generic wrapper mechanism for arbitrary C structures. The only
+thing the type system needs to know about the structures is how to copy and
+free them, beyond that they are treated as opaque chunks of memory.
+</para>
+<para>
+Boxed types are useful for simple value-holder structures like rectangles or
+points. They can also be used for wrapping structures defined in non-GObject
+based libraries.
 </para>
-
 
 <!-- ##### SECTION See_Also ##### -->
 <para>
-
+#GParamSpecBoxed, g_param_spec_boxed()
 </para>
 
-
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### USER_FUNCTION GBoxedCopyFunc ##### -->
 <para>
-
+This function is provided by the user and should produce a copy of the passed
+in boxed structure.
 </para>
 
-@boxed: 
-@Returns: 
+@boxed:   The boxed structure to be copied.
+@Returns: The newly created copy of the boxed structure.
 
 
 <!-- ##### USER_FUNCTION GBoxedFreeFunc ##### -->
 <para>
-
+This function is provided by the user and should free the boxed
+structure passed.
 </para>
 
-@boxed: 
+@boxed: The boxed structure to be freed.
 
 
 <!-- ##### FUNCTION g_boxed_copy ##### -->
 <para>
-
+Provide a copy of a boxed structure @src_boxed which is of type @boxed_type.
 </para>
 
-@boxed_type: 
-@src_boxed: 
-@Returns: 
+@boxed_type: The type of @src_boxed.
+@src_boxed:  The boxed structure to be copied.
+@Returns:    The newly created copy of the boxed structure.
 
 
 <!-- ##### FUNCTION g_boxed_free ##### -->
 <para>
-
+Free the boxed structure @boxed which is of type @boxed_type.
 </para>
 
-@boxed_type: 
-@boxed: 
+@boxed_type: The type of @boxed.
+@boxed:      The boxed structure to be freed.
 
 
 <!-- ##### FUNCTION g_boxed_type_register_static ##### -->
 <para>
-
+This function creates a new %G_TYPE_BOXED derived type id for a new
+boxed type with name @name. Boxed type handling functions have to be
+provided to copy and free opaque boxed structures of this type.
 </para>
 
-@name: 
-@boxed_copy: 
-@boxed_free: 
-@Returns: 
+@name: Name of the new boxed type.
+@boxed_copy: Boxed structure copy function.
+@boxed_free: Boxed structure free function.
+@Returns: New %G_TYPE_BOXED derived type id for @name.
 
 
 <!-- ##### FUNCTION g_pointer_type_register_static ##### -->
 <para>
-
+Creates a new %G_TYPE_POINTER derived type id for a new
+pointer type with name @name. 
 </para>
 
-@name: 
-@Returns: 
+@name: the name of the new pointer type.
+@Returns: a new %G_TYPE_POINTER derived type id for @name.
 
 
 <!-- ##### MACRO G_TYPE_HASH_TABLE ##### -->
 <para>
-
+The #GType for a boxed type holding a #GHashTable reference.
 </para>
 
+@Since: 2.10
 
 
 <!-- ##### MACRO G_TYPE_DATE ##### -->
 <para>
-
+The #GType for #GDate.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_GSTRING ##### -->
 <para>
-
+The #GType for #GString.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_STRV ##### -->
 <para>
-
+The #GType for a boxed type holding a %NULL-terminated array of strings.
+</para>
+<para>
+The code fragments in the following example show the use of a property of
+type #G_TYPE_STRV with g_object_class_install_property(), g_object_set()
+and g_object_get().
 </para>
+<informalexample><programlisting>
+g_object_class_install_property (object_class,
+                                 PROP_AUTHORS,
+                                 g_param_spec_boxed ("authors",
+                                                     _("Authors"),
+                                                     _("List of authors"),
+                                                     G_TYPE_STRV,
+                                                     G_PARAM_READWRITE));
 
 
+gchar *authors[] = { "Owen", "Tim", NULL };
+g_object_set (obj, "authors", authors, NULL);
+
+
+gchar *writers[];
+g_object_get (obj, "authors", &amp;writers, NULL);
+/* do something with writers */
+g_strfreev (writers);
+</programlisting></informalexample>
+
+@Since: 2.4
+
 
 <!-- ##### MACRO G_TYPE_REGEX ##### -->
 <para>
-
+The #GType for a boxed type holding a #GRegex reference.
 </para>
 
+@Since: 2.14
 
 
 <!-- ##### TYPEDEF GStrv ##### -->
 <para>
-
+A C representable type name for #G_TYPE_STRV.
 </para>
 
 
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/gclosure.sgml glib/docs/reference/gobject/tmpl/gclosure.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/gclosure.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/gclosure.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -2,571 +2,824 @@
 Closures
 
 <!-- ##### SECTION Short_Description ##### -->
-
+Functions as first-class objects
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
+A #GClosure represents a callback supplied by the programmer. It will generally
+comprise a function of some kind and a marshaller used to call it. It is the 
+reponsibility of the marshaller to convert the arguments for the invocation 
+from #GValue<!-- -->s into a suitable form, perform the callback on the 
+converted arguments, and transform the return value back into a #GValue.
+</para>
+<para>
+In the case of C programs, a closure usually just holds a pointer to a function
+and maybe a data argument, and the marshaller converts between #GValue<!-- -->
+and native C types. The GObject library provides the #GCClosure type for this
+purpose. Bindings for other languages need marshallers which 
+convert between #GValue<!-- -->s and suitable representations in the runtime
+of the language in order to use functions written in that languages as 
+callbacks.
+</para>
+<para>
+Within GObject, closures play an important role in the implementation of 
+signals. When a signal is registered, the @c_marshaller argument to 
+g_signal_new() specifies the default C marshaller for any closure which is 
+connected to this signal. GObject provides a number of C marshallers  
+for this purpose, see the g_cclosure_marshal_*() functions. Additional
+C marshallers can be generated with the <link linkend="glib-genmarshal"
+>glib-genmarshal</link> utility.
+Closures can be explicitly connected to signals with 
+g_signal_connect_closure(), but it usually more convenient to let GObject 
+create a closure automatically by using one of the g_signal_connect_*() 
+functions which take a callback function/user data pair.
+</para>
+<para>
+Using closures has a number of important advantages over a simple
+callback function/data pointer combination:
+<itemizedlist>
+<listitem><para>
+Closures allow the callee to get the types of the callback parameters, 
+which means that language bindings don't have to write individual glue 
+for each callback type.
+</para></listitem>
+<listitem><para>
+The reference counting of #GClosure makes it easy to handle reentrancy 
+right; if a callback is removed while it is being invoked, the closure 
+and it's parameters won't be freed until the invocation finishes. 
+</para></listitem>
+<listitem><para>
+g_closure_invalidate() and invalidation notifiers allow callbacks to be
+automatically removed when the objects they point to go away.
+</para></listitem>
+</itemizedlist>
 </para>
 
-
 <!-- ##### SECTION See_Also ##### -->
 <para>
 
 </para>
 
-
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### MACRO G_CLOSURE_NEEDS_MARSHAL ##### -->
 <para>
-
+Returns %TRUE if a #GClosureMarshal marshaller has not yet been set on 
+@closure. See g_closure_set_marshal().
 </para>
 
-@closure: 
+@closure: a #GClosure
 
 
 <!-- ##### MACRO G_CLOSURE_N_NOTIFIERS ##### -->
 <para>
-
+Returns the total number of notifiers connected with the closure @cl. 
+The count includes the meta marshaller, the finalize and invalidate notifiers 
+and the marshal guards. Note that each guard counts as two notifiers. 
+See g_closure_set_meta_marshal(), g_closure_add_finalize_notifier(),
+g_closure_add_invalidate_notifier() and g_closure_add_marshal_guards().
 </para>
 
-@cl: 
+@cl: a #GClosure
 
 
 <!-- ##### MACRO G_CCLOSURE_SWAP_DATA ##### -->
 <para>
-
+Returns whether the user data of the #GCClosure should be passed as the
+first parameter to the callback. See g_cclosure_new_swap().
 </para>
 
-@cclosure: 
+@cclosure: a #GCClosure
 
 
 <!-- ##### MACRO G_CALLBACK ##### -->
 <para>
-
+Cast a function pointer to a #GCallback.
 </para>
 
-@f: 
+@f: a function pointer.
 
 
 <!-- ##### USER_FUNCTION GCallback ##### -->
 <para>
-
+The type used for callback functions in structure definitions and function 
+signatures. This doesn't mean that all callback functions must take no 
+parameters and return void. The required signature of a callback function 
+is determined by the context in which is used (e.g. the signal to which it 
+is connected). Use G_CALLBACK() to cast the callback function to a #GCallback. 
 </para>
 
 
 
 <!-- ##### STRUCT GClosure ##### -->
 <para>
-
+A #GClosure represents a callback supplied by the programmer.
 </para>
 
-@in_marshal: 
-@is_invalid: 
+@in_marshal: Indicates whether the closure is currently being invoked with 
+  g_closure_invoke()
+@is_invalid: Indicates whether the closure has been invalidated by 
+  g_closure_invalidate()
 
 <!-- ##### MACRO G_TYPE_CLOSURE ##### -->
 <para>
-
+The #GType for #GClosure.
 </para>
 
 
 
 <!-- ##### STRUCT GCClosure ##### -->
 <para>
-
+A #GCClosure is a specialization of #GClosure for C function callbacks.
 </para>
 
-@closure: 
-@callback: 
+@closure: the #GClosure
+@callback: the callback function
 
 <!-- ##### USER_FUNCTION GClosureMarshal ##### -->
 <para>
-
+The type used for marshaller functions.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: a #GValue to store the return value. May be %NULL if the
+  callback of @closure doesn't return a value.
+@n_param_values: the length of the @param_values array
+@param_values: an array of #GValue<!-- -->s holding the arguments on
+  which to invoke the callback of @closure
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller,
+  see g_closure_set_marshal() and g_closure_set_meta_marshal()
 
 
 <!-- ##### USER_FUNCTION GClosureNotify ##### -->
 <para>
-
+The type used for the various notification callbacks which can be registered
+on closures.
 </para>
 
-@data: 
-@closure: 
+@data: data specified when registering the notification callback
+@closure: the #GClosure on which the notification is emitted
 
 
 <!-- ##### FUNCTION g_cclosure_new ##### -->
 <para>
-
+Creates a new closure which invokes @callback_func with @user_data as 
+the last parameter. 
 </para>
 
-@callback_func: 
-@user_data: 
-@destroy_data: 
-@Returns: 
+@callback_func: the function to invoke
+@user_data: user data to pass to @callback_func
+@destroy_data: destroy notify to be called when @user_data is no longer used
+@Returns: a new #GCClosure
 
 
 <!-- ##### FUNCTION g_cclosure_new_swap ##### -->
 <para>
-
+Creates a new closure which invokes @callback_func with @user_data as 
+the first parameter. 
 </para>
 
-@callback_func: 
-@user_data: 
-@destroy_data: 
-@Returns: 
+@callback_func: the function to invoke
+@user_data: user data to pass to @callback_func
+@destroy_data: destroy notify to be called when @user_data is no longer used
+@Returns: a new #GCClosure
 
 
 <!-- ##### FUNCTION g_cclosure_new_object ##### -->
 <para>
-
+A variant of g_cclosure_new() which uses @object as @user_data and calls 
+g_object_watch_closure() on @object and the created closure. This function 
+is useful when you have a callback closely associated with a #GObject,
+and want the callback to no longer run after the object is is freed.
 </para>
 
-@callback_func: 
-@object: 
-@Returns: 
+@callback_func: the function to invoke
+@object: a #GObject pointer to pass to @callback_func
+@Returns: a new #GCClosure
 
 
 <!-- ##### FUNCTION g_cclosure_new_object_swap ##### -->
 <para>
-
+A variant of g_cclosure_new_swap() which uses @object as @user_data and calls 
+g_object_watch_closure() on @object and the created closure. This function 
+is useful when you have a callback closely associated with a #GObject,
+and want the callback to no longer run after the object is is freed.
 </para>
 
-@callback_func: 
-@object: 
-@Returns: 
+@callback_func: the function to invoke
+@object: a #GObject pointer to pass to @callback_func
+@Returns: a new #GCClosure
 
 
 <!-- ##### FUNCTION g_closure_new_object ##### -->
 <para>
-
+A variant of g_closure_new_simple() which stores @object in the @data
+field of the closure and calls g_object_watch_closure() on @object and the 
+created closure. This function is mainly useful when implementing new types 
+of closures.
 </para>
 
-@sizeof_closure: 
-@object: 
-@Returns: 
+@sizeof_closure: the size of the structure to allocate, must be at least 
+<literal>sizeof (GClosure)</literal>
+@object: a #GObject pointer to store in the @data field of the newly 
+  allocated #GClosure
+@Returns: a newly allocated #GClosure
 
 
 <!-- ##### FUNCTION g_closure_ref ##### -->
 <para>
-
+Increments the reference count on a closure to force it staying
+alive while the caller holds a pointer to it.
 </para>
 
-@closure: 
-@Returns: 
+@closure: #GClosure to increment the reference count on
+@Returns: The @closure passed in, for convenience
 
 
 <!-- ##### FUNCTION g_closure_sink ##### -->
 <para>
-
+Takes over the initial ownership of a closure.
+Each closure is initially created in a <firstterm>floating</firstterm> state, 
+which means that the initial reference count is not owned by any caller. 
+g_closure_sink() checks to see if the object is still floating, and if so, 
+unsets the floating state and decreases the reference count. If the closure 
+is not floating, g_closure_sink() does nothing. The reason for the existance 
+of the floating state is to prevent cumbersome code sequences like: 
+<programlisting>
+closure = g_cclosure_new (cb_func, cb_data); 
+g_source_set_closure (source, closure); 
+g_closure_unref (closure); /* XXX GObject doesn't really need this */
+</programlisting>
+Because g_source_set_closure() (and similar functions) take ownership of the 
+initial reference count, if it is unowned, we instead can write: 
+<programlisting>
+g_source_set_closure (source, g_cclosure_new (cb_func, cb_data));
+</programlisting>
+</para>
+<para>
+Generally, this function is used together with g_closure_ref(). Ane example 
+of storing a closure for later notification looks like:
+<informalexample><programlisting>
+static GClosure *notify_closure = NULL;
+void
+foo_notify_set_closure (GClosure *closure)
+{
+  if (notify_closure)
+    g_closure_unref (notify_closure);
+  notify_closure = closure;
+  if (notify_closure)
+    {
+      g_closure_ref (notify_closure);
+      g_closure_sink (notify_closure);
+    }
+}
+</programlisting></informalexample>
+</para>
+<para>
+Because g_closure_sink() may decrement the reference count of a closure
+(if it hasn't been called on @closure yet) just like g_closure_unref(),
+g_closure_ref() should be called prior to this function.
 </para>
 
-@closure: 
+@closure: #GClosure to decrement the initial reference count on, if it's
+          still being held
 
 
 <!-- ##### FUNCTION g_closure_unref ##### -->
 <para>
-
+Decrements the reference count of a closure after it was previously 
+incremented by the same caller. If no other callers are using the closure,
+then the closure will be destroyed and freed.
 </para>
 
-@closure: 
+@closure: #GClosure to decrement the reference count on
 
 
 <!-- ##### FUNCTION g_closure_invoke ##### -->
 <para>
-
+Invokes the closure, i.e. executes the callback represented by the @closure.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
+@closure: a #GClosure
+@return_value: a #GValue to store the return value. May be %NULL if the
+  callback of @closure doesn't return a value.
+@n_param_values: the length of the @param_values array
+@param_values: an array of #GValue<!-- -->s holding the arguments on
+  which to invoke the callback of @closure
+@invocation_hint: a context-dependent invocation hint
 
 
 <!-- ##### FUNCTION g_closure_invalidate ##### -->
 <para>
-
+Sets a flag on the closure to indicate that it's calling environment has 
+become invalid, and thus causes any future invocations of g_closure_invoke() 
+on this @closure to be ignored. Also, invalidation notifiers installed on 
+the closure will be called at this point. Note that unless you are holding 
+a reference to the closure yourself, the invalidation notifiers may unref 
+the closure and cause it to be destroyed, so if you need to access the 
+closure after calling g_closure_invalidate(), make sure that you've 
+previously called g_closure_ref().
+</para>
+<para>
+Note that g_closure_invalidate() will also be called when the reference count
+of a closure drops to zero (unless it has already been invalidated before).
 </para>
 
-@closure: 
+@closure: GClosure to invalidate
 
 
 <!-- ##### FUNCTION g_closure_add_finalize_notifier ##### -->
 <para>
-
+Registers a finalization notifier which will be called when the reference
+count of @closure goes down to 0. Multiple finalization notifiers on a 
+single closure are invoked in unspecified order. If a single call to 
+g_closure_unref() results in the closure being both invalidated and 
+finalized, then the invalidate notifiers will be run before the finalize 
+notifiers.
 </para>
 
-@closure: 
-@notify_data: 
-@notify_func: 
+@closure: a #GClosure
+@notify_data: data to pass to @notify_func
+@notify_func: the callback function to register
 
 
 <!-- ##### FUNCTION g_closure_add_invalidate_notifier ##### -->
 <para>
-
+Registers an invalidation notifier which will be called when the @closure
+is invalidated with g_closure_invalidate(). Invalidation notifiers are 
+invoked before finalization notifiers, in an unspecified order.
 </para>
 
-@closure: 
-@notify_data: 
-@notify_func: 
+@closure: a #GClosure
+@notify_data: data to pass to @notify_func
+@notify_func: the callback function to register
 
 
 <!-- ##### FUNCTION g_closure_remove_finalize_notifier ##### -->
 <para>
-
+Removes a finalization notifier.
+</para>
+<para>
+Notice that notifiers are automatically removed after they are run.
 </para>
 
-@closure: 
-@notify_data: 
-@notify_func: 
+@closure: a #GClosure
+@notify_data: data which was passed to g_closure_add_finalize_notifier()
+ when registering @notify_func
+@notify_func: the callback function to remove
 
 
 <!-- ##### FUNCTION g_closure_remove_invalidate_notifier ##### -->
 <para>
+Removes an invalidation notifier.
+</para>
 
+<para>
+Notice that notifiers are automatically removed after they are run.
 </para>
 
-@closure: 
-@notify_data: 
-@notify_func: 
+@closure: a #GClosure
+@notify_data: data which was passed to g_closure_add_invalidate_notifier()
+ when registering @notify_func
+@notify_func: the callback function to remove
 
 
 <!-- ##### FUNCTION g_closure_new_simple ##### -->
 <para>
-
-</para>
-
-@sizeof_closure: 
-@data: 
-@Returns: 
+Allocates a struct of the given size and initializes the initial part
+as a #GClosure. This function is mainly useful when implementing new types 
+of closures.
+</para>
+<informalexample>
+<programlisting>
+typedef struct _MyClosure MyClosure;
+struct _MyClosure 
+{
+  GClosure closure;
+  /* extra data goes here */
+};
+    
+
+static void
+my_closure_finalize (gpointer  notify_data, 
+                     GClosure *closure)
+{
+  MyClosure *my_closure = (MyClosure *)closure;
+
+  /* free extra data here */
+}
+
+MyClosure *my_closure_new (gpointer data)
+{
+  GClosure *closure;
+  MyClosure *my_closure;
+  
+  closure = g_closure_new_simple (sizeof (MyClosure), data);
+  my_closure = (MyClosure *) closure;
+
+  / initialize extra data here */
+
+  g_closure_add_finalize_notifier (closure, notify_data,
+                                   my_closure_finalize);
+  return my_closure;
+}
+</programlisting>
+</informalexample>
+
+@sizeof_closure: the size of the structure to allocate, must be at least 
+<literal>sizeof (GClosure)</literal>
+@data: data to store in the @data field of the newly allocated #GClosure
+@Returns: a newly allocated #GClosure
 
 
 <!-- ##### FUNCTION g_closure_set_marshal ##### -->
 <para>
-
+Sets the marshaller of @closure. The <literal>marshal_data</literal>
+of @marshal provides a way for a meta marshaller to provide additional
+information to the marshaller. (See g_closure_set_meta_marshal().) For
+GObject's C predefined marshallers (the g_cclosure_marshal_*()
+functions), what it provides is a callback function to use instead of
+@closure->callback.
 </para>
 
-@closure: 
-@marshal: 
+@closure: a #GClosure
+@marshal: a #GClosureMarshal function
 
 
 <!-- ##### FUNCTION g_closure_add_marshal_guards ##### -->
 <para>
-
+Adds a pair of notifiers which get invoked before and after the closure 
+callback, respectively. This is typically used to protect the extra arguments
+for the duration of the callback. See g_object_watch_closure() for an
+example of marshal guards.
 </para>
 
-@closure: 
-@pre_marshal_data: 
-@pre_marshal_notify: 
-@post_marshal_data: 
-@post_marshal_notify: 
+@closure: a #GClosure
+@pre_marshal_data: data to pass to @pre_marshal_notify
+@pre_marshal_notify: a function to call before the closure callback
+@post_marshal_data: data to pass to @post_marshal_notify
+@post_marshal_notify: a function to call after the closure callback
 
 
 <!-- ##### FUNCTION g_closure_set_meta_marshal ##### -->
 <para>
-
-</para>
-
-@closure: 
-@marshal_data: 
-@meta_marshal: 
+Sets the meta marshaller of @closure. 
+A meta marshaller wraps @closure->marshal and modifies the way it is called 
+in some fashion. The most common use of this facility is for C callbacks. 
+The same marshallers (generated by 
+<link linkend="glib-genmarshal">glib-genmarshal</link>) are used everywhere,
+but the way that we get the callback function differs. In most cases we want 
+to use @closure->callback, but in other cases we want to use some 
+different technique to retrieve the callback function.
+</para>
+<para>
+For example, class closures for signals (see g_signal_type_cclosure_new()) 
+retrieve the callback function from a fixed offset in the class structure. 
+The meta marshaller retrieves the right callback and passes it to the 
+marshaller as the @marshal_data argument.
+</para>
+
+@closure: a #GClosure
+@marshal_data: context-dependent data to pass to @meta_marshal
+@meta_marshal: a #GClosureMarshal function
 
 
 <!-- ##### FUNCTION g_source_set_closure ##### -->
 <para>
-
+Set the callback for a source as a #GClosure.
+</para>
+<para>
+If the source is not one of the standard GLib types, the @closure_callback
+and @closure_marshal fields of the #GSourceFuncs structure must have been
+filled in with pointers to appropriate functions.
 </para>
 
-@source: 
-@closure: 
+@source: the source
+@closure: a #GClosure
 
 
 <!-- ##### MACRO G_TYPE_IO_CHANNEL ##### -->
 <para>
-
+The #GType for #GIOChannel.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_IO_CONDITION ##### -->
 <para>
-
+The #GType for #GIOCondition.
 </para>
 
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__VOID ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 1
+@param_values: a #GValue array holding only the instance
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__BOOLEAN ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, gboolean arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #gboolean parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__CHAR ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, gchar arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #gchar parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__UCHAR ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, guchar arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #guchar parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__INT ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, gint arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #gint parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__UINT ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, guint arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #guint parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__LONG ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, glong arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #glong parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__ULONG ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, gulong arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #gulong parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__ENUM ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, gint arg1, gpointer user_data)</literal> where the #gint parameter denotes an enumeration type..
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the enumeration parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__FLAGS ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, gint arg1, gpointer user_data)</literal> where the #gint parameter denotes a flags type
+denotes a flags type.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the flags parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__FLOAT ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, gfloat arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #gfloat parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__DOUBLE ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, gdouble arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #gdouble parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__STRING ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, const gchar *arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #gchar* parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__PARAM ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, GParamSpec *arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #GParamSpec* parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__BOXED ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, GBoxed *arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #GBoxed* parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__POINTER ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, gpointer arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #gpointer parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__OBJECT ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, GOBject *arg1, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 2
+@param_values: a #GValue array holding the instance and the #GObject* parameter
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_STRING__OBJECT_POINTER ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, GObject *arg1, gpointer arg2, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 3
+@param_values: a #GValue array holding instance, arg1 and arg2
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_VOID__UINT_POINTER ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>void (*callback) (gpointer instance, guint arg1, gpointer arg2, gpointer user_data)</literal>.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: ignored
+@n_param_values: 3
+@param_values: a #GValue array holding instance, arg1 and arg2
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### FUNCTION g_cclosure_marshal_BOOLEAN__FLAGS ##### -->
 <para>
-
+A marshaller for a #GCClosure with a callback of type
+<literal>gboolean (*callback) (gpointer instance, gint arg1, gpointer user_data)</literal> where the #gint parameter
+denotes a flags type.
 </para>
 
-@closure: 
-@return_value: 
-@n_param_values: 
-@param_values: 
-@invocation_hint: 
-@marshal_data: 
+@closure: the #GClosure to which the marshaller belongs
+@return_value: a #GValue which can store the returned #gboolean
+@n_param_values: 2
+@param_values: a #GValue array holding instance and arg1
+@invocation_hint: the invocation hint given as the the last argument
+  to g_closure_invoke()
+@marshal_data: additional data specified when registering the marshaller
 
 
 <!-- ##### MACRO g_cclosure_marshal_BOOL__FLAGS ##### -->
 <para>
-
+Another name for g_cclosure_marshal_BOOLEAN__FLAGS().
 </para>
 
 
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/generic_values.sgml glib/docs/reference/gobject/tmpl/generic_values.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/generic_values.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/generic_values.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -1,211 +1,263 @@
 <!-- ##### SECTION Title ##### -->
-Generic values
+Generic Values
 
 <!-- ##### SECTION Short_Description ##### -->
-
+A polymorphic type that can hold values of any other type
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
+The #GValue structure is basically a variable container that consists
+of a type identifier and a specific value of that type.
+The type identifier within a #GValue structure always determines the
+type of the associated value.
+To create a undefined #GValue structure, simply create a zero-filled
+#GValue structure. To initialize the #GValue, use the g_value_init()
+function. A #GValue cannot be used until it is initialized.
+The basic type operations (such as freeing and copying) are determined
+by the #GTypeValueTable associated with the type ID stored in the #GValue.
+Other #GValue operations (such as converting values between types) are
+provided by this interface.
 </para>
 
-
 <!-- ##### SECTION See_Also ##### -->
 <para>
-
+The fundamental types which all support #GValue operations and thus
+can be used as a type initializer for g_value_init() are defined by
+a separate interface.  See the <link 
+linkend="gobject-Standard-Parameter-and-Value-Types">Standard Values 
+API</link> for details.
 </para>
 
-
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### MACRO G_VALUE_HOLDS ##### -->
 <para>
-
+Returns %TRUE if @value holds (or contains) a value of @type.
+This macro will also check for @value != %NULL and issue a
+warning if the check fails.
 </para>
 
-@value: 
-@type: 
+@value: A #GValue structure.
+@type: A #GType value.
 
 
 <!-- ##### MACRO G_VALUE_TYPE ##### -->
 <para>
-
+Returns the type identifier of @value.
 </para>
 
-@value: 
+@value: A #GValue structure.
 
 
 <!-- ##### MACRO G_VALUE_TYPE_NAME ##### -->
 <para>
-
+Returns the type name of @value.
 </para>
 
-@value: 
+@value: A #GValue structure.
 
 
 <!-- ##### MACRO G_TYPE_IS_VALUE ##### -->
 <para>
-
+Return whether the passed in type ID can be used for g_value_init().
+That is, this macro checks whether this type provides an implementation
+of the #GTypeValueTable functions required for a type to create a #GValue of.
 </para>
 
-@type: 
+@type: 	  A #GType value.
+@Returns: Whether @type is suitable as a #GValue type.
 
 
 <!-- ##### MACRO G_TYPE_IS_VALUE_ABSTRACT ##### -->
 <para>
-
+Returns %TRUE if @type is an abstract value type.  An abstract value type 
+introduces a value table, but can't be used for g_value_init() and is normally
+used as an abstract base type for derived value types.
 </para>
 
-@type: 
+@type: A #GType value.
 
 
 <!-- ##### MACRO G_IS_VALUE ##### -->
 <para>
-
+Returns %TRUE if @value is a valid and initialized #GValue structure.
 </para>
 
-@value: 
+@value: A #GValue structure.
 
 
 <!-- ##### STRUCT GValue ##### -->
 <para>
-
+An opaque structure used to hold different types of values.
+The data within the structure has protected scope: it is accessible only
+to functions within a #GTypeValueTable structure, or implementations of
+the g_value_*() API. That is, code portions which implement new fundamental
+types.
+#GValue users can not make any assumptions about how data is stored
+within the 2 element @data union, and the @g_type member should
+only be accessed through the G_VALUE_TYPE() macro.
 </para>
 
 
 <!-- ##### MACRO G_TYPE_VALUE ##### -->
 <para>
-
+Returns the type ID of the "GValue" type which is a boxed type,
+used to pass around pointers to GValues.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_VALUE_ARRAY ##### -->
 <para>
-
+Returns the type ID of the "GValueArray" type which is a boxed type,
+used to pass around pointers to GValueArrays.
 </para>
 
 
 
 <!-- ##### FUNCTION g_value_init ##### -->
 <para>
-
+Initializes @value with the default value of @type.
 </para>
 
-@value: 
-@g_type: 
-@Returns: 
+@value: A zero-filled (uninitialized) #GValue structure.
+@g_type: Type the #GValue should hold values of.
+@Returns: the #GValue structure that has been passed in
 
 
 <!-- ##### FUNCTION g_value_copy ##### -->
 <para>
-
+Copies the value of @src_value into @dest_value.
 </para>
 
-@src_value: 
-@dest_value: 
+@src_value: An initialized #GValue structure.
+@dest_value: An initialized #GValue structure of the same type as @src_value.
 
 
 <!-- ##### FUNCTION g_value_reset ##### -->
 <para>
-
+Clears the current value in @value and resets it to the default value
+(as if the value had just been initialized).
 </para>
 
-@value: 
-@Returns: 
+@value: An initialized #GValue structure.
+@Returns: the #GValue structure that has been passed in
 
 
 <!-- ##### FUNCTION g_value_unset ##### -->
 <para>
-
+Clears the current value in @value and "unsets" the type,
+this releases all resources associated with this GValue.
+An unset value is the same as an uninitialized (zero-filled)
+#GValue structure.
 </para>
 
-@value: 
+@value: 	An initialized #GValue structure.
 
 
 <!-- ##### FUNCTION g_value_set_instance ##### -->
 <para>
-
+Sets @value from an instantiatable type via the 
+value_table's collect_value() function.
 </para>
 
-@value: 
-@instance: 
+@value: An initialized #GValue structure.
+@instance: the instance
 
 
 <!-- ##### FUNCTION g_value_fits_pointer ##### -->
 <para>
-
+Determines if @value will fit inside the size of a pointer value.
+This is an internal function introduced mainly for C marshallers.
 </para>
 
-@value: 
-@Returns: 
+@value: An initialized #GValue structure.
+@Returns: %TRUE if @value will fit inside a pointer value.
 
 
 <!-- ##### FUNCTION g_value_peek_pointer ##### -->
 <para>
-
+Return the value contents as pointer. This function asserts that
+g_value_fits_pointer() returned %TRUE for the passed in value.
+This is an internal function introduced mainly for C marshallers.
 </para>
 
-@value: 
-@Returns: 
+@value: An initialized #GValue structure.
+@Returns: %TRUE if @value will fit inside a pointer value.
 
 
 <!-- ##### FUNCTION g_value_type_compatible ##### -->
 <para>
-
+Returns whether a #GValue of type @src_type can be copied into
+a #GValue of type @dest_type.
 </para>
 
-@src_type: 
-@dest_type: 
-@Returns: 
+@src_type: source type to be copied.
+@dest_type: destination type for copying.
+@Returns: %TRUE if g_value_copy() is possible with @src_type and @dest_type.
 
 
 <!-- ##### FUNCTION g_value_type_transformable ##### -->
 <para>
-
+Check whether g_value_transform() is able to transform values
+of type @src_type into values of type @dest_type.
 </para>
 
-@src_type: 
-@dest_type: 
-@Returns: 
+@src_type: Source type.
+@dest_type: Target type.
+@Returns: %TRUE if the transformation is possible, %FALSE otherwise.
 
 
 <!-- ##### FUNCTION g_value_transform ##### -->
 <para>
-
+Tries to cast the contents of @src_value into a type appropriate
+to store in @dest_value, e.g. to transform a %G_TYPE_INT value
+into a %G_TYPE_FLOAT value. Performing transformations between
+value types might incur precision lossage. Especially
+transformations into strings might reveal seemingly arbitrary
+results and shouldn't be relied upon for production code (such
+as rcfile value or object property serialization).
 </para>
 
-@src_value: 
-@dest_value: 
-@Returns: 
+@src_value: Source value.
+@dest_value: Target value.
+@Returns: Whether a transformation rule was found and could be applied.
+          Upon failing transformations, @dest_value is left untouched.
 
 
 <!-- ##### USER_FUNCTION GValueTransform ##### -->
 <para>
-
+The type of value transformation functions which can be registered with
+g_value_register_transform_func().
 </para>
 
-@src_value: 
-@dest_value: 
+@src_value:  Source value.
+@dest_value: Target value.
 
 
 <!-- ##### FUNCTION g_value_register_transform_func ##### -->
 <para>
-
+Registers a value transformation function for use in g_value_transform().
+A previously registered transformation function for @src_type and @dest_type
+will be replaced.
 </para>
 
-@src_type: 
-@dest_type: 
-@transform_func: 
+@src_type:  Source type.
+@dest_type: Target type.
+@transform_func: a function which transforms values of type @src_type
+  into value of type @dest_type
 
 
 <!-- ##### FUNCTION g_strdup_value_contents ##### -->
 <para>
-
+Return a newly allocated string, which describes the contents of a #GValue.
+The main purpose of this function is to describe #GValue contents for 
+debugging output, the way in which the contents are described may change 
+between different GLib versions.
 </para>
 
-@value: 
-@Returns: 
+@value:   #GValue which contents are to be described.
+@Returns: Newly allocated string.
 
 
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/.gitignore glib/docs/reference/gobject/tmpl/.gitignore
--- glib-2.18.1/docs/reference/gobject/tmpl/.gitignore	1970-01-01 02:00:00.000000000 +0200
+++ glib/docs/reference/gobject/tmpl/.gitignore	2009-04-28 09:16:30.000000000 +0300
@@ -0,0 +1,13 @@
+enumerations_flags.sgml
+gboxed.sgml
+gclosure.sgml
+generic_values.sgml
+gparamspec.sgml
+gtype.sgml
+gtypemodule.sgml
+gtypeplugin.sgml
+objects.sgml
+param_value_types.sgml
+signals.sgml
+value_arrays.sgml
+value_collection.sgml
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/gparamspec.sgml glib/docs/reference/gobject/tmpl/gparamspec.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/gparamspec.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/gparamspec.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -2,425 +2,535 @@
 GParamSpec
 
 <!-- ##### SECTION Short_Description ##### -->
-
+Metadata for parameter specifications
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
+#GParamSpec is an object structure that encapsulates the metadata
+required to specify parameters, such as e.g. #GObject properties.
+</para>
+<para id="canonical-parameter-name">
+Parameter names need to start with a letter (a-z or A-Z). Subsequent
+characters can be letters, numbers or a '-'.
+All other characters are replaced by a '-' during construction.
+The result of this replacement is called the canonical name of the
+parameter.
 </para>
-
 
 <!-- ##### SECTION See_Also ##### -->
 <para>
-
+g_object_class_install_property(), g_object_set(), g_object_get(),
+g_object_set_property(), g_object_get_property(), g_value_register_transform_func()
 </para>
 
-
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### MACRO G_TYPE_IS_PARAM ##### -->
 <para>
-
+Returns whether @type "is a" %G_TYPE_PARAM.
 </para>
 
-@type: 
+@type: a #GType ID
 
 
 <!-- ##### MACRO G_PARAM_SPEC ##### -->
 <para>
-
+Casts a derived #GParamSpec object (e.g. of type #GParamSpecInt) into
+a #GParamSpec object.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC ##### -->
 <para>
-
+Checks whether @pspec "is a" valid #GParamSpec structure of type %G_TYPE_PARAM
+or derived.
 </para>
 
-@pspec: 
+@pspec: a #GParamSpec
 
 
 <!-- ##### MACRO G_PARAM_SPEC_CLASS ##### -->
 <para>
-
+Casts a derived #GParamSpecClass structure into a #GParamSpecClass structure.
 </para>
 
-@pclass: 
+@pclass: a valid #GParamSpecClass
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_CLASS ##### -->
 <para>
-
+Checks whether @pclass "is a" valid #GParamSpecClass structure of type 
+%G_TYPE_PARAM or derived.
 </para>
 
-@pclass: 
+@pclass: a #GParamSpecClass
 
 
 <!-- ##### MACRO G_PARAM_SPEC_GET_CLASS ##### -->
 <para>
-
+Retrieves the #GParamSpecClass of a #GParamSpec.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec
 
 
 <!-- ##### MACRO G_PARAM_SPEC_TYPE ##### -->
 <para>
-
+Retrieves the #GType of this @pspec.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec
 
 
 <!-- ##### MACRO G_PARAM_SPEC_TYPE_NAME ##### -->
 <para>
-
+Retrieves the #GType name of this @pspec.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec
 
 
 <!-- ##### MACRO G_PARAM_SPEC_VALUE_TYPE ##### -->
 <para>
-
+Retrieves the #GType to initialize a #GValue for this parameter.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec
 
 
 <!-- ##### STRUCT GParamSpec ##### -->
 <para>
-
+All fields of the <structname>GParamSpec</structname> struct are private and
+should not be used directly, except for the following:
 </para>
 
-@g_type_instance: 
-@name: 
-@flags: 
-@value_type: 
-@owner_type: 
+@g_type_instance: private #GTypeInstance portion
+@name:            name of this parameter
+@flags:           #GParamFlags flags for this parameter
+@value_type:      the #GValue type for this parameter
+@owner_type:      #GType type that uses (introduces) this paremeter
 
 <!-- ##### STRUCT GParamSpecClass ##### -->
 <para>
-
-</para>
-
-@g_type_class: 
-@value_type: 
-@finalize: 
-@value_set_default: 
-@value_validate: 
-@values_cmp: 
+The class structure for the <structname>GParamSpec</structname> type.
+Normally, <structname>GParamSpec</structname> classes are filled by
+g_param_type_register_static().
+</para>
+
+@g_type_class: the parent class
+@value_type: the #GValue type for this parameter
+@finalize: The instance finalization function (optional), should chain 
+  up to the finalize method of the parent class.
+@value_set_default: Resets a @value to the default value for this type
+  (recommended, the default is g_value_reset()), see 
+  g_param_value_set_default().
+@value_validate: Ensures that the contents of @value comply with the 
+  specifications set out by this type (optional), see 
+  g_param_value_set_validate().
+@values_cmp: Compares @value1 with @value2 according to this type
+  (recommended, the default is memcmp()), see g_param_values_cmp().
 
 <!-- ##### ENUM GParamFlags ##### -->
 <para>
-
+Through the #GParamFlags flag values, certain aspects of parameters
+can be configured.
 </para>
 
-@G_PARAM_READABLE: 
-@G_PARAM_WRITABLE: 
-@G_PARAM_CONSTRUCT: 
-@G_PARAM_CONSTRUCT_ONLY: 
-@G_PARAM_LAX_VALIDATION: 
-@G_PARAM_STATIC_NAME: 
+@G_PARAM_READABLE:       the parameter is readable
+@G_PARAM_WRITABLE:       the parameter is writable
+@G_PARAM_CONSTRUCT:      the parameter will be set upon object construction
+@G_PARAM_CONSTRUCT_ONLY: the parameter will only be set upon object construction
+@G_PARAM_LAX_VALIDATION: upon parameter conversion (see g_param_value_convert())
+                         strict validation is not required
+@G_PARAM_STATIC_NAME:    the string used as name when constructing the 
+                         parameter is guaranteed to remain valid and
+                         unmodified for the lifetime of the parameter. 
+                         Since 2.8
 @G_PARAM_PRIVATE: 
 @G_PARAM_STATIC_NICK: 
-@G_PARAM_STATIC_BLURB: 
+@G_PARAM_STATIC_BLURB:   the string used as blurb when constructing the 
+                         parameter is guaranteed to remain valid and 
+                         unmodified for the lifetime of the parameter. 
+                         Since 2.8
 
 <!-- ##### MACRO G_PARAM_READWRITE ##### -->
 <para>
-
+#GParamFlags value alias for %G_PARAM_READABLE | %G_PARAM_WRITABLE.
 </para>
 
 
 
 <!-- ##### MACRO G_PARAM_STATIC_STRINGS ##### -->
 <para>
+#GParamFlags value alias for %G_PARAM_STATIC_NAME | %G_PARAM_STATIC_NICK | %G_PARAM_STATIC_BLURB.
 
+Since 2.13.0
 </para>
 
 
 
 <!-- ##### MACRO G_PARAM_MASK ##### -->
 <para>
-
+Mask containing the bits of #GParamSpec.flags which are reserved for GLib.
 </para>
 
 
 
 <!-- ##### MACRO G_PARAM_USER_SHIFT ##### -->
 <para>
-
+Minimum shift count to be used for user defined flags, to be stored in
+#GParamSpec.flags.
 </para>
 
 
 
 <!-- ##### FUNCTION g_param_spec_ref ##### -->
 <para>
-
+Increments the reference count of @pspec.
 </para>
 
-@pspec: 
-@Returns: 
+@pspec:   a valid #GParamSpec
+@Returns: the #GParamSpec that was passed into this function
 
 
 <!-- ##### FUNCTION g_param_spec_unref ##### -->
 <para>
-
+Decrements the reference count of a @pspec.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec
 
 
 <!-- ##### FUNCTION g_param_spec_sink ##### -->
 <para>
-
+The initial reference count of a newly created #GParamSpec is 1, even 
+though no one has explicitly called g_param_spec_ref() on it yet. So the 
+initial reference count is flagged as "floating", until someone calls 
+<literal>g_param_spec_ref (pspec); g_param_spec_sink (pspec);</literal>
+in sequence on it, taking over the initial reference count (thus
+ending up with a @pspec that has a reference count of 1 still, but is
+not flagged "floating" anymore).
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec
 
 
 <!-- ##### FUNCTION g_param_spec_ref_sink ##### -->
 <para>
-
+Convenience function to ref and sink a #GParamSpec.
 </para>
 
-@pspec: 
-@Returns: 
+@pspec: a valid #GParamSpec
+@Returns: the #GParamSpec that was passed into this function
+@Since: 2.10
 
 
 <!-- ##### FUNCTION g_param_value_set_default ##### -->
 <para>
-
+Sets @value to its default value as specified in @pspec.
 </para>
 
-@pspec: 
-@value: 
+@pspec: a valid #GParamSpec
+@value: a #GValue of correct type for @pspec
 
 
 <!-- ##### FUNCTION g_param_value_defaults ##### -->
 <para>
-
+Checks whether @value contains the default value as specified in @pspec.
 </para>
 
-@pspec: 
-@value: 
-@Returns: 
+@pspec:   a valid #GParamSpec
+@value:   a #GValue of correct type for @pspec
+@Returns: whether @value contains the canonical default for this @pspec
 
 
 <!-- ##### FUNCTION g_param_value_validate ##### -->
 <para>
-
+Ensures that the contents of @value comply with the specifications
+set out by @pspec. For example, a #GParamSpecInt might require
+that integers stored in @value may not be smaller than -42 and not be
+greater than +42. If @value contains an integer outside of this range,
+it is modified accordingly, so the resulting value will fit into the
+range -42 .. +42.
 </para>
 
-@pspec: 
-@value: 
-@Returns: 
+@pspec:   a valid #GParamSpec
+@value:   a #GValue of correct type for @pspec
+@Returns: whether modifying @value was necessary to ensure validity
 
 
 <!-- ##### FUNCTION g_param_value_convert ##### -->
 <para>
-
+Transforms @src_value into @dest_value if possible, and then validates 
+@dest_value, in order for it to conform to @pspec.
+If @strict_validation is %TRUE this function will only succeed if
+the transformed @dest_value complied to @pspec without modifications.
+
+See also g_value_type_transformable(), g_value_transform() and
+g_param_value_validate().
 </para>
 
-@pspec: 
-@src_value: 
-@dest_value: 
-@strict_validation: 
-@Returns: 
+@pspec:             a valid #GParamSpec
+@src_value:         souce #GValue
+@dest_value:        destination #GValue of correct type for @pspec
+@strict_validation: %TRUE requires @dest_value to conform to @pspec without modifications
+@Returns:           %TRUE if transformation and validation were successful,
+                    %FALSE otherwise and @dest_value is left untouched.
 
 
 <!-- ##### FUNCTION g_param_values_cmp ##### -->
 <para>
-
+Compares @value1 with @value2 according to @pspec, and return -1, 0 or +1,
+if @value1 is found to be less than, equal to or greater than @value2, 
+respectively.
 </para>
 
-@pspec: 
-@value1: 
-@value2: 
-@Returns: 
+@pspec:   a valid #GParamSpec
+@value1:  a #GValue of correct type for @pspec
+@value2:  a #GValue of correct type for @pspec
+@Returns: -1, 0 or +1, for a less than, equal to or greater than result
 
 
 <!-- ##### FUNCTION g_param_spec_get_name ##### -->
 <para>
-
+Returns the name of a #GParamSpec.
 </para>
 
-@pspec: 
-@Returns: 
+@pspec: a valid #GParamSpec
+@Returns: the name of @pspec.
 
 
 <!-- ##### FUNCTION g_param_spec_get_nick ##### -->
 <para>
-
+Returns the nickname of a #GParamSpec.
 </para>
 
-@pspec: 
-@Returns: 
+@pspec: a valid #GParamSpec
+@Returns: the nickname of @pspec.
 
 
 <!-- ##### FUNCTION g_param_spec_get_blurb ##### -->
 <para>
-
+Returns the short description of a #GParamSpec.
 </para>
 
-@pspec: 
-@Returns: 
+@pspec: a valid #GParamSpec
+@Returns: the short description of @pspec.
 
 
 <!-- ##### FUNCTION g_param_spec_get_qdata ##### -->
 <para>
-
+Gets back user data pointers stored via g_param_spec_set_qdata().
 </para>
 
-@pspec: 
-@quark: 
-@Returns: 
+@pspec: a valid #GParamSpec
+@quark: a #GQuark, naming the user data pointer
+@Returns: the user data pointer set, or %NULL
 
 
 <!-- ##### FUNCTION g_param_spec_set_qdata ##### -->
 <para>
-
+Sets an opaque, named pointer on a #GParamSpec. The name is specified 
+through a #GQuark (retrieved e.g. via g_quark_from_static_string()), and 
+the pointer can be gotten back from the @pspec with g_param_spec_get_qdata().
+Setting a previously set user data pointer, overrides (frees)
+the old pointer set, using %NULL as pointer essentially
+removes the data stored.
 </para>
 
-@pspec: 
-@quark: 
-@data: 
+@pspec: the #GParamSpec to set store a user data pointer
+@quark: a #GQuark, naming the user data pointer
+@data: an opaque user data pointer
 
 
 <!-- ##### FUNCTION g_param_spec_set_qdata_full ##### -->
 <para>
-
+This function works like g_param_spec_set_qdata(), but in addition, 
+a <literal>void (*destroy) (gpointer)</literal> function may be 
+specified which is called with @data as argument when the @pspec is 
+finalized, or the data is being overwritten by a call to 
+g_param_spec_set_qdata() with the same @quark.
 </para>
 
-@pspec: 
-@quark: 
-@data: 
-@destroy: 
+@pspec:   the #GParamSpec to set store a user data pointer
+@quark:   a #GQuark, naming the user data pointer
+@data:    an opaque user data pointer
+@destroy: function to invoke with @data as argument, when @data needs to
+          be freed
 
 
 <!-- ##### FUNCTION g_param_spec_steal_qdata ##### -->
 <para>
-
+Gets back user data pointers stored via g_param_spec_set_qdata() and 
+removes the @data from @pspec without invoking it's destroy() function 
+(if any was set).
+Usually, calling this function is only required to update
+user data pointers with a destroy notifier.
 </para>
 
-@pspec: 
-@quark: 
-@Returns: 
+@pspec: the #GParamSpec to get a stored user data pointer from
+@quark: a #GQuark, naming the user data pointer
+@Returns: the user data pointer set, or %NULL
 
 
 <!-- ##### FUNCTION g_param_spec_get_redirect_target ##### -->
 <para>
-
+If the paramspec redirects operations to another paramspec,
+returns that paramspec. Redirect is used typically for
+providing a new implementation of a property in a derived
+type while preserving all the properties from the parent
+type. Redirection is established by creating a property
+of type #GParamSpecOverride. See g_object_class_override_property()
+for an example of the use of this capability.
 </para>
 
-@pspec: 
-@Returns: 
+@pspec: a #GParamSpec
+@Returns: paramspec to which requests on this paramspec should
+  be redirected, or %NULL if none.
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_param_spec_internal ##### -->
 <para>
-
+Creates a new #GParamSpec instance.
+</para>
+<para>
+A property name consists of segments consisting of ASCII letters and
+digits, separated by either the '-' or '_' character. The first
+character of a property name must be a letter. Names which violate these
+rules lead to undefined behaviour. 
+</para>
+<para>
+When creating and looking up a #GParamSpec, either separator can be used, 
+but they cannot be mixed. Using '-' is considerably more efficient and in 
+fact required when using property names as detail strings for signals.
 </para>
 
-@param_type: 
-@name: 
-@nick: 
-@blurb: 
-@flags: 
-@Returns: 
+@param_type: the #GType for the property; must be derived from #G_TYPE_PARAM
+@name: the canonical name of the property
+@nick: the nickname of the property
+@blurb: a short description of the property
+@flags: a combination of #GParamFlags
+@Returns: a newly allocated #GParamSpec instance
 
 
 <!-- ##### STRUCT GParamSpecTypeInfo ##### -->
 <para>
-
-</para>
-
-@instance_size: 
-@n_preallocs: 
-@instance_init: 
-@value_type: 
-@finalize: 
-@value_set_default: 
-@value_validate: 
-@values_cmp: 
+This structure is used to provide the type system with the information
+required to initialize and destruct (finalize) a parameter's class and
+instances thereof.
+The initialized structure is passed to the g_param_type_register_static() 
+The type system will perform a deep copy of this structure, so it's memory 
+does not need to be persistent across invocation of 
+g_param_type_register_static().
+</para>
+
+@instance_size: Size of the instance (object) structure.
+@n_preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the <link linkend="glib-Memory-Slices">slice allocator</link> now.
+@instance_init: Location of the instance initialization function (optional).
+@value_type: The #GType of values conforming to this #GParamSpec
+@finalize: The instance finalization function (optional).
+@value_set_default: Resets a @value to the default value for @pspec 
+  (recommended, the default is g_value_reset()), see 
+  g_param_value_set_default().
+@value_validate: Ensures that the contents of @value comply with the 
+  specifications set out by @pspec (optional), see 
+  g_param_value_set_validate().
+@values_cmp: Compares @value1 with @value2 according to @pspec 
+  (recommended, the default is memcmp()), see g_param_values_cmp().
 
 <!-- ##### FUNCTION g_param_type_register_static ##### -->
 <para>
-
+Registers @name as the name of a new static type derived from
+#G_TYPE_PARAM. The type system uses the information contained in the
+#GParamSpecTypeInfo structure pointed to by @info to manage the #GParamSpec 
+type and its instances. 
 </para>
 
-@name: 
-@pspec_info: 
-@Returns: 
+@name: 0-terminated string used as the name of the new #GParamSpec type.
+@pspec_info: The #GParamSpecTypeInfo for this #GParamSpec type.
+@Returns: The new type identifier.
 
 
 <!-- ##### STRUCT GParamSpecPool ##### -->
 <para>
-
+A #GParamSpecPool maintains a collection of #GParamSpec<!-- -->s which can be
+quickly accessed by owner and name. The implementation of the #GObject property
+system uses such a pool to store the #GParamSpecs of the properties all object
+types. 
 </para>
 
 
 <!-- ##### FUNCTION g_param_spec_pool_new ##### -->
 <para>
-
+Creates a new #GParamSpecPool.
+</para>
+<para>
+If @type_prefixing is %TRUE, lookups in the newly created pool will
+allow to specify the owner as a colon-separated prefix of the property name, 
+like "GtkContainer:border-width". This feature is deprecated, so you should 
+always set @type_prefixing to %FALSE.
 </para>
 
-@type_prefixing: 
-@Returns: 
+@type_prefixing: Whether the pool will support type-prefixed property names.
+@Returns: a newly allocated #GParamSpecPool.
 
 
 <!-- ##### FUNCTION g_param_spec_pool_insert ##### -->
 <para>
-
+Inserts a #GParamSpec in the pool.
 </para>
 
-@pool: 
-@pspec: 
-@owner_type: 
+@pool: a #GParamSpecPool.
+@pspec: the #GParamSpec to insert
+@owner_type: a #GType identifying the owner of @pspec
 
 
 <!-- ##### FUNCTION g_param_spec_pool_remove ##### -->
 <para>
-
+Removes a #GParamSpec from the pool.
 </para>
 
-@pool: 
-@pspec: 
+@pool: a #GParamSpecPool
+@pspec: the #GParamSpec to remove
 
 
 <!-- ##### FUNCTION g_param_spec_pool_lookup ##### -->
 <para>
-
+Looks up a #GParamSpec in the pool.
 </para>
 
-@pool: 
-@param_name: 
-@owner_type: 
-@walk_ancestors: 
-@Returns: 
+@pool: a #GParamSpecPool
+@param_name: the name to look for
+@owner_type: the owner to look for
+@walk_ancestors: If %TRUE, also try to find a #GParamSpec with @param_name 
+  owned by an ancestor of @owner_type.
+@Returns: The found #GParamSpec, or %NULL if no matching #GParamSpec was found.
 
 
 <!-- ##### FUNCTION g_param_spec_pool_list ##### -->
 <para>
-
+Gets an array of all #GParamSpec<!-- -->s owned by @owner_type in the pool. 
 </para>
 
-@pool: 
-@owner_type: 
-@n_pspecs_p: 
-@Returns: 
+@pool: a #GParamSpecPool
+@owner_type: the owner to look for
+@n_pspecs_p: return location for the length of the returned array
+@Returns: a newly allocated array containing pointers to all 
+  #GParamSpec<!-- -->s owned by @owner_type in the pool
 
 
 <!-- ##### FUNCTION g_param_spec_pool_list_owned ##### -->
 <para>
-
+Gets an #GList of all #GParamSpec<!-- -->s owned by @owner_type in the pool. 
 </para>
 
-@pool: 
-@owner_type: 
-@Returns: 
+@pool: a #GParamSpecPool
+@owner_type: the owner to look for
+@Returns: a #GList of all #GParamSpec<!-- -->s owned by @owner_type in 
+  the pool#GParamSpec<!-- -->s.
 
 
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/gtypemodule.sgml glib/docs/reference/gobject/tmpl/gtypemodule.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/gtypemodule.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/gtypemodule.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -2,130 +2,285 @@
 GTypeModule
 
 <!-- ##### SECTION Short_Description ##### -->
-
+Type loading modules
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
+#GTypeModule provides a simple implementation of the #GTypePlugin
+interface. The model of #GTypeModule is a dynamically loaded module
+which implements some number of types and interface
+implementations. When the module is loaded, it registers its types
+and interfaces using g_type_module_register_type() and
+g_type_module_add_interface().  As long as any instances of these
+types and interface implementations are in use, the module is kept
+loaded. When the types and interfaces are gone, the module may be
+unloaded. If the types and interfaces become used again, the module
+will be reloaded. Note that the last unref can not happen in module
+code, since that would lead to the caller's code being unloaded before
+g_object_unref() returns to it.
+</para>
+<para>
+Keeping track of whether the module should be loaded or not is done by
+using a use count - it starts at zero, and whenever it is greater than
+zero, the module is loaded. The use count is maintained internally by
+the type system, but also can be explicitly controlled by
+g_type_module_use() and g_type_module_unuse(). Typically, when loading
+a module for the first type, g_type_module_use() will be used to load
+it so that it can initialize its types. At some later point, when the
+module no longer needs to be loaded except for the type
+implementations it contains, g_type_module_unuse() is called.
+</para>
+<para>
+#GTypeModule does not actually provide any implementation of module
+loading and unloading. To create a particular module type you must
+derive from #GTypeModule and implement the load and unload functions
+in #GTypeModuleClass.
 </para>
 
-
 <!-- ##### SECTION See_Also ##### -->
 <para>
+<variablelist>
 
-</para>
+<varlistentry>
+<term>#GTypePlugin</term>
+<listitem><para>The abstract type loader interface.</para></listitem>
+</varlistentry>
+
+<varlistentry>
+<term>#GModule</term>
+<listitem><para>Portable mechanism for dynamically loaded modules.</para></listitem>
+</varlistentry>
 
+</variablelist>
+</para>
 
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### STRUCT GTypeModule ##### -->
 <para>
-
+The members of the <structname>GTypeModule</structname> structure should not 
+be accessed directly, except for the @name field.
 </para>
 
-@name: 
+@name: the name of the module
 
 <!-- ##### STRUCT GTypeModuleClass ##### -->
 <para>
-
+In order to implement dynamic loading of types based on #GTypeModule, 
+the @load and @unload functions in #GTypeModuleClass must be implemented.
 </para>
 
-@parent_class: 
-@load: 
-@unload: 
+@parent_class: the parent class
+@load: loads the module and registers one or more types using
+  g_type_module_register_type().
+@unload: unloads the module
 
 <!-- ##### FUNCTION g_type_module_use ##### -->
 <para>
-
+Increases the use count of a #GTypeModule by one. If the
+use count was zero before, the plugin will be loaded.
 </para>
 
-@module: 
-@Returns: 
+@module: a #GTypeModule
+@Returns: %FALSE if the plugin needed to be loaded and
+          loading the plugin failed.
 
 
 <!-- ##### FUNCTION g_type_module_unuse ##### -->
 <para>
-
+Decreases the use count of a #GTypeModule by one. If the
+result is zero, the module will be unloaded. (However, the
+#GTypeModule will not be freed, and types associated with the
+#GTypeModule are not unregistered. Once a #GTypeModule is 
+initialized, it must exist forever.)
 </para>
 
-@module: 
+@module: a #GTypeModule
 
 
 <!-- ##### FUNCTION g_type_module_set_name ##### -->
 <para>
-
+Sets the name for a #GTypeModule 
 </para>
 
-@module: 
-@name: 
+@module: a #GTypeModule.
+@name: a human-readable name to use in error messages.
 
 
 <!-- ##### FUNCTION g_type_module_register_type ##### -->
 <para>
-
+Looks up or registers a type that is implemented with a particular
+type plugin. If a type with name @type_name was previously registered,
+the #GType identifier for the type is returned, otherwise the type
+is newly registered, and the resulting #GType identifier returned.
+</para>
+<para>
+When reregistering a type (typically because a module is unloaded
+then reloaded, and reinitialized), @module and @parent_type must
+be the same as they were previously.
+</para>
+<para>
+As long as any instances of the type exist, the type plugin will
+not be unloaded.
 </para>
 
-@module: 
-@parent_type: 
-@type_name: 
-@type_info: 
-@flags: 
-@Returns: 
+@module:  a #GTypeModule
+@parent_type:    the type for the parent class
+@type_name:      name for the type
+@type_info:      type information structure
+@flags:          flags field providing details about the type
+@Returns: the new or existing type ID
 
 
 <!-- ##### FUNCTION g_type_module_add_interface ##### -->
 <para>
-
+Registers an additional interface for a type, whose interface
+lives in the given type plugin. If the interface was already registered
+for the type in this plugin, nothing will be done. 
+</para>
+<para>
+As long as any instances of the type exist, the type plugin will
+not be unloaded.
 </para>
 
-@module: 
-@instance_type: 
-@interface_type: 
-@interface_info: 
+@module: a #GTypeModule
+@instance_type: type to which to add the interface.
+@interface_type: interface type to add
+@interface_info: type information structure
 
 
 <!-- ##### FUNCTION g_type_module_register_enum ##### -->
 <para>
-
-</para>
-
-@module: 
-@name: 
-@const_static_values: 
-@Returns: 
+Looks up or registers an enumeration that is implemented with a particular
+type plugin. If a type with name @type_name was previously registered,
+the #GType identifier for the type is returned, otherwise the type
+is newly registered, and the resulting #GType identifier returned.
+</para>
+<para>
+As long as any instances of the type exist, the type plugin will
+not be unloaded.
+</para>
+
+@module:              a #GTypeModule
+@name:                name for the type
+@const_static_values: an array of #GEnumValue structs for the possible
+  enumeration values. The array is terminated by a struct with all 
+  members being 0.
+@Returns: the new or existing type ID
+@Since: 2.6
 
 
 <!-- ##### FUNCTION g_type_module_register_flags ##### -->
 <para>
-
-</para>
-
-@module: 
-@name: 
-@const_static_values: 
-@Returns: 
+Looks up or registers a flags type that is implemented with a particular
+type plugin. If a type with name @type_name was previously registered,
+the #GType identifier for the type is returned, otherwise the type
+is newly registered, and the resulting #GType identifier returned.
+</para>
+<para>
+As long as any instances of the type exist, the type plugin will
+not be unloaded.
+</para>
+
+@module:              a #GTypeModule
+@name:                name for the type
+@const_static_values: an array of #GFlagsValue structs for the possible
+  flags values. The array is terminated by a struct with all 
+  members being 0.
+@Returns: the new or existing type ID
+@Since: 2.6
 
 
 <!-- ##### MACRO G_DEFINE_DYNAMIC_TYPE ##### -->
 <para>
-
+A convenience macro for dynamic type implementations, which declares a
+class initialization function, an instance initialization function (see 
+#GTypeInfo for information about these) and a static variable named 
+@t_n<!-- -->_parent_class pointing to the parent class. Furthermore, 
+it defines a <function>*_get_type()</function> and a static 
+<function>*_register_type()</function> function for use in your
+<function>module_init()</function>.
+See G_DEFINE_DYNAMIC_TYPE_EXTENDED() for an example.
 </para>
 
-@TN: 
-@t_n: 
-@T_P: 
+@TN: The name of the new type, in Camel case.
+@t_n: The name of the new type, in lowercase, with words
+  separated by '_'.
+@T_P: The #GType of the parent type.
+@Since: 2.14
 
 
 <!-- ##### MACRO G_DEFINE_DYNAMIC_TYPE_EXTENDED ##### -->
 <para>
-
+A more general version of G_DEFINE_DYNAMIC_TYPE() which
+allows to specify #GTypeFlags and custom code.
 </para>
-
-@TypeName: 
-@type_name: 
-@TYPE_PARENT: 
-@flags: 
-@CODE: 
+<informalexample><programlisting>
+G_DEFINE_DYNAMIC_TYPE_EXTENDED (GtkGadget,
+                                gtk_gadget,
+                                GTK_TYPE_THING,
+                                0,
+                                G_IMPLEMENT_INTERFACE (TYPE_GIZMO,
+                                                       gtk_gadget_gizmo_init));
+</programlisting>
+expands to
+<programlisting>
+static void     gtk_gadget_init              (GtkGadget      *self);
+static void     gtk_gadget_class_init        (GtkGadgetClass *klass);
+static void     gtk_gadget_class_finalize    (GtkGadgetClass *klass);
+<!-- -->
+static gpointer gtk_gadget_parent_class = NULL;
+static GType    gtk_gadget_type_id = 0;
+<!-- -->
+static void     gtk_gadget_class_intern_init (gpointer klass)
+{
+  gtk_gadget_parent_class = g_type_class_peek_parent (klass); 
+  gtk_gadget_class_init ((GtkGadgetClass*) klass); 
+}
+<!-- -->
+GType
+gtk_gadget_get_type (void)
+{
+  return gtk_gadget_type_id;
+}
+<!-- -->
+static void
+gtk_gadget_register_type (GTypeModule *type_module)
+{
+  const GTypeInfo g_define_type_info = {
+    sizeof (GtkGadgetClass),
+    (GBaseInitFunc) NULL,
+    (GBaseFinalizeFunc) NULL,
+    (GClassInitFunc) gtk_gadget_class_intern_init,
+    (GClassFinalizeFunc) gtk_gadget_class_finalize,
+    NULL,   /* class_data */
+    sizeof (GtkGadget),
+    0,      /* n_preallocs */
+    (GInstanceInitFunc) gtk_gadget_init, 
+    NULL    /* value_table */
+  };
+  gtk_gadget_type_id = g_type_module_register_type (type_module,
+                                                    GTK_TYPE_THING,
+                                                    GtkGadget,
+                                                    &amp;g_define_type_info,
+                                                    (GTypeFlags) flags);
+  {
+    const GInterfaceInfo g_implement_interface_info = {
+      (GInterfaceInitFunc) gtk_gadget_gizmo_init
+    };
+    g_type_add_interface_static (g_define_type_id, TYPE_GIZMO, &amp;g_implement_interface_info);
+  }
+}
+</programlisting>
+</informalexample>
+
+@TypeName: The name of the new type, in Camel case.
+@type_name: The name of the new type, in lowercase, with words
+  separated by '_'.
+@TYPE_PARENT: The #GType of the parent type.
+@flags: #GTypeFlags to pass to g_type_module_register_type()
+@CODE: Custom code that gets inserted in the *_get_type() function.
+@Since: 2.14
 
 
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/gtypeplugin.sgml glib/docs/reference/gobject/tmpl/gtypeplugin.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/gtypeplugin.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/gtypeplugin.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -2,112 +2,186 @@
 GTypePlugin
 
 <!-- ##### SECTION Short_Description ##### -->
-
+An interface for dynamically loadable types
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
+The GObject type system supports dynamic loading of types. The #GTypePlugin 
+interface is used to handle the lifecycle of dynamically loaded types. 
+It goes as follows:
+</para>
+<para>
+<orderedlist>
+<listitem><para>
+  The type is initially introduced (usually upon loading the module
+  the first time, or by your main application that knows what modules
+  introduces what types), like this:
+<literal>new_type_id = g_type_register_dynamic (parent_type_id,
+                                                "TypeName",
+                                                new_type_plugin,
+                                                type_flags);
+</literal>
+  where <literal>new_type_plugin</literal> is an implementation of the
+  #GTypePlugin interface.
+</para></listitem>
+<listitem><para>  
+   The type's implementation is referenced, e.g. through
+   g_type_class_ref() or through g_type_create_instance() (this is 
+   being called by g_object_new()) or through one of the above done on 
+   a type derived from <literal>new_type_id</literal>.
+</para></listitem>
+<listitem><para>  
+   This causes the type system to load the type's implementation by calling
+   g_type_plugin_use() and g_type_plugin_complete_type_info() on 
+   <literal>new_type_plugin</literal>.
+</para></listitem>
+<listitem><para>  
+   At some point the type's implementation isn't required anymore, e.g. after
+   g_type_class_unref() or g_type_free_instance() (called when the reference
+   count of an instance drops to zero).
+</para></listitem>
+<listitem><para>  
+   This causes the type system to throw away the information retrieved from
+   g_type_plugin_complete_type_info() and then it calls
+   g_type_plugin_unuse() on <literal>new_type_plugin</literal>.
+</para></listitem>
+<listitem><para>  
+   Things may repeat from the second step.
+</para></listitem>
+</orderedlist>
+</para>
+<para>
+So basically, you need to implement a #GTypePlugin type that carries a
+use_count, once use_count goes from zero to one, you need to load the 
+implementation to successfully handle the upcoming 
+g_type_plugin_complete_type_info() call. Later, maybe after succeeding 
+use/unuse calls, once use_count drops to zero, you can unload the 
+implementation again. The type system makes sure to call g_type_plugin_use() 
+and g_type_plugin_complete_type_info() again when the type is needed again.
+</para>
+<para>
+#GTypeModule is an implementation of #GTypePlugin that already implements 
+most of this except for the actual module loading and unloading. It even 
+handles multiple registered types per module.
 </para>
 
-
 <!-- ##### SECTION See_Also ##### -->
 <para>
-
+#GTypeModule and g_type_register_dynamic().
 </para>
 
-
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### STRUCT GTypePlugin ##### -->
 <para>
-
+The <structname>GTypePlugin</structname> typedef is used as a placeholder 
+for objects that implement the <structname>GTypePlugin</structname> 
+interface.
 </para>
 
 
 <!-- ##### STRUCT GTypePluginClass ##### -->
 <para>
-
+The #GTypePlugin interface is used by the type system in order to handle
+the lifecycle of dynamically loaded types.
 </para>
 
-@use_plugin: 
-@unuse_plugin: 
-@complete_type_info: 
-@complete_interface_info: 
+@use_plugin: Increases the use count of the plugin.
+@unuse_plugin: Decreases the use count of the plugin.
+@complete_type_info: Fills in the #GTypeInfo and 
+  #GTypeValueTable structs for the type. The structs are initialized
+  with <literal>memset(s, 0, sizeof (s))</literal> before calling 
+  this function.
+@complete_interface_info: Fills in missing parts of the #GInterfaceInfo 
+  for the interface. The structs is initialized with 
+  <literal>memset(s, 0, sizeof (s))</literal> before calling
+  this function.
 
 <!-- ##### USER_FUNCTION GTypePluginUse ##### -->
 <para>
-
+The type of the @use_plugin function of #GTypePluginClass, which gets called
+to increase the use count of @plugin.
 </para>
 
-@plugin: 
+@plugin: the #GTypePlugin whose use count should be increased
 
 
 <!-- ##### USER_FUNCTION GTypePluginUnuse ##### -->
 <para>
-
+The type of the @unuse_plugin function of #GTypePluginClass.
 </para>
 
-@plugin: 
+@plugin: the #GTypePlugin whose use count should be decreased
 
 
 <!-- ##### USER_FUNCTION GTypePluginCompleteTypeInfo ##### -->
 <para>
-
+The type of the @complete_type_info function of #GTypePluginClass.
 </para>
 
-@plugin: 
-@g_type: 
-@info: 
-@value_table: 
+@plugin: the #GTypePlugin
+@g_type: the #GType whose info is completed
+@info: the #GTypeInfo struct to fill in
+@value_table: the #GTypeValueTable to fill in
 
 
 <!-- ##### USER_FUNCTION GTypePluginCompleteInterfaceInfo ##### -->
 <para>
-
+The type of the @complete_interface_info function of #GTypePluginClass.
 </para>
 
-@plugin: 
-@instance_type: 
-@interface_type: 
-@info: 
+@plugin: the #GTypePlugin
+@instance_type: the #GType of an instantiable type to which the interface
+  is added
+@interface_type: the #GType of the interface whose info is completed
+@info: the #GInterfaceInfo to fill in
 
 
 <!-- ##### FUNCTION g_type_plugin_use ##### -->
 <para>
-
+Calls the @use_plugin function from the #GTypePluginClass of @plugin.
+There should be no need to use this function outside of the GObject 
+type system itself.
 </para>
 
-@plugin: 
+@plugin: a #GTypePlugin
 
 
 <!-- ##### FUNCTION g_type_plugin_unuse ##### -->
 <para>
-
+Calls the @unuse_plugin function from the #GTypePluginClass of @plugin.
+There should be no need to use this function outside of the GObject 
+type system itself.
 </para>
 
-@plugin: 
+@plugin: a #GTypePlugin
 
 
 <!-- ##### FUNCTION g_type_plugin_complete_type_info ##### -->
 <para>
-
+Calls the @complete_type_info function from the #GTypePluginClass of @plugin.
+There should be no need to use this function outside of the GObject 
+type system itself.
 </para>
 
-@plugin: 
-@g_type: 
-@info: 
-@value_table: 
+@plugin: a #GTypePlugin
+@g_type: the #GType whose info is completed
+@info: the #GTypeInfo struct to fill in
+@value_table: the #GTypeValueTable to fill in
 
 
 <!-- ##### FUNCTION g_type_plugin_complete_interface_info ##### -->
 <para>
-
+Calls the @complete_interface_info function from the #GTypePluginClass 
+of @plugin. There should be no need to use this function outside of the 
+GObject type system itself.
 </para>
 
-@plugin: 
-@instance_type: 
-@interface_type: 
-@info: 
+@plugin: the #GTypePlugin
+@instance_type: the #GType of an instantiable type to which the interface
+  is added
+@interface_type: the #GType of the interface whose info is completed
+@info: the #GInterfaceInfo to fill in
 
 
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/gtype.sgml glib/docs/reference/gobject/tmpl/gtype.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/gtype.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/gtype.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -1,1112 +1,1844 @@
 <!-- ##### SECTION Title ##### -->
-Type Information
+GType
 
 <!-- ##### SECTION Short_Description ##### -->
-
+The GLib Runtime type identification and management system
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
+The GType API is the foundation of the GObject system.  It provides the
+facilities for registering and managing all fundamental data types,
+user-defined object and interface types.  Before using any GType
+or GObject functions, g_type_init() must be called to initialize the
+type system.
+</para>
+<para>
+For type creation and registration purposes, all types fall into one of
+two categories: static or dynamic.  Static types are never loaded or
+unloaded at run-time as dynamic types may be.  Static types are created
+with g_type_register_static() that gets type specific information passed
+in via a #GTypeInfo structure.
+Dynamic types are created with g_type_register_dynamic() which takes a
+#GTypePlugin structure instead. The remaining type information (the
+#GTypeInfo structure) is retrieved during runtime through #GTypePlugin
+and the g_type_plugin_*() API.
+These registration functions are usually called only once from a 
+function whose only purpose is to return the type identifier for a 
+specific class.  Once the type (or class or interface) is registered,
+it may be instantiated, inherited, or implemented depending on exactly
+what sort of type it is.
+There is also a third registration function for registering fundamental
+types called g_type_register_fundamental() which requires both a #GTypeInfo
+structure and a #GTypeFundamentalInfo structure but it is seldom used
+since most fundamental types are predefined rather than user-defined.
+</para>
+<para>
+A final word about type names.
+Such an identifier needs to be at least three characters long. There is no
+upper length limit. The first character needs to be a letter (a-z or A-Z)
+or an underscore '_'. Subsequent characters can be letters, numbers or
+any of '-_+'.
 </para>
 
-
 <!-- ##### SECTION See_Also ##### -->
 <para>
 
 </para>
 
-
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### TYPEDEF GType ##### -->
 <para>
-
+A numerical value which represents the unique identifier of a registered
+type.
 </para>
 
 
 <!-- ##### MACRO G_TYPE_FUNDAMENTAL ##### -->
 <para>
-
+Returns the fundamental type which is the ancestor of @type.
+Fundamental types are types that serve as ultimate bases for the derived types, 
+thus they are the roots of distinct inheritance hierarchies.
 </para>
 
-@type: 
+@type: A #GType value.
 
 
 <!-- ##### MACRO G_TYPE_FUNDAMENTAL_MAX ##### -->
 <para>
-
+An integer constant that represents the number of identifiers reserved
+for types that are assigned at compile-time.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_MAKE_FUNDAMENTAL ##### -->
 <para>
-
+Returns the type ID for the fundamental type number @x.
+Use g_type_fundamental_next() instead of this macro to create new fundamental 
+types.
 </para>
 
-@x: 
+@x: the fundamental type number.
 
 
 <!-- ##### MACRO G_TYPE_IS_ABSTRACT ##### -->
 <para>
-
+Returns %TRUE if @type is an abstract type.  An abstract type can not be
+instantiated and is normally used as an abstract base class for
+derived classes.
 </para>
 
-@type: 
+@type: A #GType value.
 
 
 <!-- ##### MACRO G_TYPE_IS_DERIVED ##### -->
 <para>
-
+Returns %TRUE if @type is derived (or in object-oriented terminology:
+inherited) from another type (this holds true for all non-fundamental
+types).
 </para>
 
-@type: 
+@type: A #GType value.
 
 
 <!-- ##### MACRO G_TYPE_IS_FUNDAMENTAL ##### -->
 <para>
-
+Returns %TRUE if @type is a fundamental type.
 </para>
 
-@type: 
+@type: A #GType value.
 
 
 <!-- ##### MACRO G_TYPE_IS_VALUE_TYPE ##### -->
 <para>
-
+Returns %TRUE if @type is a value type and can be used with
+g_value_init(). 
 </para>
 
-@type: 
+@type: A #GType value.
 
 
 <!-- ##### MACRO G_TYPE_HAS_VALUE_TABLE ##### -->
 <para>
-
+Returns %TRUE if @type has a #GTypeValueTable.
 </para>
 
-@type: 
+@type: A #GType value.
 
 
 <!-- ##### MACRO G_TYPE_IS_CLASSED ##### -->
 <para>
-
+Returns %TRUE if @type is a classed type.
 </para>
 
-@type: 
+@type: A #GType value.
 
 
 <!-- ##### MACRO G_TYPE_IS_INSTANTIATABLE ##### -->
 <para>
-
+Returns %TRUE if @type can be instantiated.  Instantiation is the
+process of creating an instance (object) of this type.
 </para>
 
-@type: 
+@type: A #GType value.
 
 
 <!-- ##### MACRO G_TYPE_IS_DERIVABLE ##### -->
 <para>
-
+Returns %TRUE if @type is a derivable type.  A derivable type can
+be used as the base class of a flat (single-level) class hierarchy.
 </para>
 
-@type: 
+@type: A #GType value.
 
 
 <!-- ##### MACRO G_TYPE_IS_DEEP_DERIVABLE ##### -->
 <para>
-
+Returns %TRUE if @type is a deep derivable type.  A deep derivable type
+can be used as the base class of a deep (multi-level) class hierarchy.
 </para>
 
-@type: 
+@type: A #GType value.
 
 
 <!-- ##### MACRO G_TYPE_IS_INTERFACE ##### -->
 <para>
-
+Returns %TRUE if @type is an interface type.
+An interface type provides a pure API, the implementation
+of which is provided by another type (which is then said to conform
+to the interface).  GLib interfaces are somewhat analogous to Java
+interfaces and C++ classes containing only pure virtual functions, 
+with the difference that GType interfaces are not derivable (but see
+g_type_interface_add_prerequisite() for an alternative).
 </para>
 
-@type: 
+@type: A #GType value.
 
 
 <!-- ##### STRUCT GTypeInterface ##### -->
 <para>
-
+An opaque structure used as the base of all interface types.
 </para>
 
 
 <!-- ##### STRUCT GTypeInstance ##### -->
 <para>
-
+An opaque structure used as the base of all type instances.
 </para>
 
 
 <!-- ##### STRUCT GTypeClass ##### -->
 <para>
-
+An opaque structure used as the base of all classes.
 </para>
 
 
 <!-- ##### STRUCT GTypeInfo ##### -->
 <para>
-
-</para>
-
-@class_size: 
-@base_init: 
-@base_finalize: 
-@class_init: 
-@class_finalize: 
-@class_data: 
-@instance_size: 
-@n_preallocs: 
-@instance_init: 
-@value_table: 
+This structure is used to provide the type system with the information
+required to initialize and destruct (finalize) a type's class and
+its instances.
+The initialized structure is passed to the g_type_register_static() function
+(or is copied into the provided #GTypeInfo structure in the
+g_type_plugin_complete_type_info()). The type system will perform a deep
+copy of this structure, so its memory does not need to be persistent
+across invocation of g_type_register_static().
+</para>
+
+@class_size: 	 Size of the class structure (required for interface, classed and instantiatable types).
+@base_init: 	 Location of the base initialization function (optional).
+@base_finalize:  Location of the base finalization function (optional).
+@class_init: 	 Location of the class initialization function for
+  classed and types. Location of the default vtable inititalization
+  function for interface types. (optional) This function is used both
+  to fill in virtual functions in the class or default vtable, and
+  to do type-specific setup such as registering signals and object
+  properties.
+@class_finalize: Location of the class finalization function for
+  classed and types. Location fo the default vtable finalization
+  function for interface types. (optional)
+@class_data: 	 User-supplied data passed to the class init/finalize functions.
+@instance_size:  Size of the instance (object) structure (required for instantiatable types only).
+@n_preallocs: 	 Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the <link linkend="glib-Memory-Slices">slice allocator</link> now.
+@instance_init:  Location of the instance initialization function (optional, for instantiatable types only).
+@value_table: 	 A #GTypeValueTable function table for generic handling of GValues of this type (usually only
+		 useful for fundamental types).
 
 <!-- ##### STRUCT GTypeFundamentalInfo ##### -->
 <para>
-
+A structure that provides information to the type system which is
+used specifically for managing fundamental types.  
 </para>
 
-@type_flags: 
+@type_flags: #GTypeFundamentalFlags describing the characteristics of the fundamental type
 
 <!-- ##### STRUCT GInterfaceInfo ##### -->
 <para>
-
+A structure that provides information to the type system which is
+used specifically for managing interface types.
 </para>
 
-@interface_init: 
-@interface_finalize: 
-@interface_data: 
+@interface_init: location of the interface initialization function
+@interface_finalize: location of the interface finalization function
+@interface_data: user-supplied data passed to the interface init/finalize functions
 
 <!-- ##### STRUCT GTypeValueTable ##### -->
 <para>
-
+The #GTypeValueTable provides the functions required by the #GValue implementation,
+to serve as a container for values of a type.
 </para>
 
-@value_init: 
-@value_free: 
-@value_copy: 
-@value_peek_pointer: 
-@collect_format: 
-@collect_value: 
-@lcopy_format: 
-@lcopy_value: 
+@value_init: 		Default initialize @values contents by poking values
+			directly into the value-&gt;data array. The data array of
+			the #GValue passed into this function was zero-filled
+			with <function>memset()</function>, so no care has to
+                        be taken to free any
+			old contents. E.g. for the implementation of a string
+			value that may never be %NULL, the implementation might
+			look like:
+<programlisting>
+{
+  value-&gt;data[0].v_pointer = g_strdup ("");
+}
+</programlisting>
+@value_free: 		Free any old contents that might be left in the
+			data array of the passed in @value. No resources may
+			remain allocated through the #GValue contents after
+			this function returns. E.g. for our above string type:
+<programlisting>
+{
+  /* only free strings without a specific flag for static storage */
+  if (!(value-&gt;data[1].v_uint &amp; G_VALUE_NOCOPY_CONTENTS))
+    g_free (value-&gt;data[0].v_pointer);
+}
+</programlisting>
+@value_copy: 		@dest_value is a #GValue with zero-filled data section
+			and @src_value is a properly setup #GValue of same or
+			derived type.
+			The purpose of this function is to copy the contents of
+			@src_value into @dest_value in a way, that even after
+			@src_value has been freed, the contents of @dest_value
+			remain valid. String type example:
+<programlisting>
+{
+  dest_value-&gt;data[0].v_pointer = g_strdup (src_value-&gt;data[0].v_pointer);
+}
+</programlisting>
+@value_peek_pointer: 	If the value contents fit into a pointer, such as objects
+			or strings, return this pointer, so the caller can peek at
+			the current contents. To extend on our above string example:
+<programlisting>
+{
+  return value-&gt;data[0].v_pointer;
+}
+</programlisting>
+@collect_format: 	A string format describing how to collect the contents of
+			this value bit-by-bit. Each character in the format represents
+			an argument to be collected, and the characters themselves indicate
+			the type of the argument. Currently supported arguments are:
+<variablelist>
+  <varlistentry><term></term><listitem><para>
+        'i' - Integers. passed as collect_values[].v_int.
+  </para></listitem></varlistentry>
+  <varlistentry><term></term><listitem><para>
+        'l' - Longs. passed as collect_values[].v_long.
+  </para></listitem></varlistentry>
+  <varlistentry><term></term><listitem><para>
+        'd' - Doubles. passed as collect_values[].v_double.
+  </para></listitem></varlistentry>
+  <varlistentry><term></term><listitem><para>
+        'p' - Pointers. passed as collect_values[].v_pointer.
+  </para></listitem></varlistentry>
+</variablelist>
+			It should be noted that for variable argument list construction,
+			ANSI C promotes every type smaller than an integer to an int, and
+			floats to doubles. So for collection of short int or char, 'i'
+			needs to be used, and for collection of floats 'd'.
+@collect_value: 	The collect_value() function is responsible for converting the
+			values collected from a variable argument list into contents
+			suitable for storage in a GValue. This function should setup
+			@value similar to value_init(); e.g. for a string value that
+			does not allow %NULL pointers, it needs to either spew an error,
+			or do an implicit conversion by storing an empty string.
+			The @value passed in to this function has a zero-filled data
+			array, so just like for value_init() it is guaranteed to not
+			contain any old contents that might need freeing.
+			@n_collect_values is exactly the string length of @collect_format,
+			and @collect_values is an array of unions #GTypeCValue with
+			length @n_collect_values, containing the collected values
+			according to @collect_format.
+			@collect_flags is an argument provided as a hint by the caller.
+			It may contain the flag #G_VALUE_NOCOPY_CONTENTS indicating,
+			that the collected value contents may be considered "static"
+			for the duration of the @value lifetime.
+			Thus an extra copy of the contents stored in @collect_values is
+			not required for assignment to @value.
+			For our above string example, we continue with:
+<programlisting>
+{
+  if (!collect_values[0].v_pointer)
+    value->data[0].v_pointer = g_strdup ("");
+  else if (collect_flags &amp; G_VALUE_NOCOPY_CONTENTS)
+    {
+      value-&gt;data[0].v_pointer = collect_values[0].v_pointer;
+      /* keep a flag for the value_free() implementation to not free this string */
+      value-&gt;data[1].v_uint = G_VALUE_NOCOPY_CONTENTS;
+    }
+  else
+    value-&gt;data[0].v_pointer = g_strdup (collect_values[0].v_pointer);
+
+  return NULL;
+}
+</programlisting>
+			It should be noted, that it is generally a bad idea to follow the
+			#G_VALUE_NOCOPY_CONTENTS hint for reference counted types. Due to
+			reentrancy requirements and reference count assertions performed
+			by the #GSignal code, reference counts should always be incremented
+			for reference counted contents stored in the value-&gt;data array.
+			To deviate from our string example for a moment, and taking a look
+			at an exemplary implementation for collect_value() of #GObject:
+<programlisting>
+{
+  if (collect_values[0].v_pointer)
+    {
+      GObject *object = G_OBJECT (collect_values[0].v_pointer);
+
+      /* never honour G_VALUE_NOCOPY_CONTENTS for ref-counted types */
+      value-&gt;data[0].v_pointer = g_object_ref (object);
+      return NULL;
+    }
+  else
+    return g_strdup_printf ("Object passed as invalid NULL pointer");
+}
+</programlisting>
+			The reference count for valid objects is always incremented,
+			regardless of @collect_flags. For invalid objects, the example
+			returns a newly allocated string without altering @value.
+			Upon success, collect_value() needs to return %NULL. If, however,
+			an error condition occurred, collect_value() may spew an
+			error by returning a newly allocated non-%NULL string, giving
+			a suitable description of the error condition.
+			The calling code makes no assumptions about the @value
+			contents being valid upon error returns, @value
+			is simply thrown away without further freeing. As such, it is
+			a good idea to not allocate #GValue contents, prior to returning
+			an error, however, collect_values() is not obliged to return
+			a correctly setup @value for error returns, simply because
+			any non-%NULL return is considered a fatal condition so further
+			program behaviour is undefined.
+@lcopy_format: 		Format description of the arguments to collect for @lcopy_value,
+			analogous to @collect_format. Usually, @lcopy_format string consists
+			only of 'p's to provide lcopy_value() with pointers to storage locations.
+@lcopy_value: 		This function is responsible for storing the @value contents into
+			arguments passed through a variable argument list which got
+			collected into @collect_values according to @lcopy_format.
+			@n_collect_values equals the string length of @lcopy_format,
+			and @collect_flags may contain #G_VALUE_NOCOPY_CONTENTS.
+			In contrast to collect_value(), lcopy_value() is obliged to
+			always properly support #G_VALUE_NOCOPY_CONTENTS.
+			Similar to collect_value() the function may prematurely abort
+			by returning a newly allocated string describing an error condition.
+			To complete the string example:
+<programlisting>
+{
+  gchar **string_p = collect_values[0].v_pointer;
+
+  if (!string_p)
+    return g_strdup_printf ("string location passed as NULL");
+
+  if (collect_flags &amp; G_VALUE_NOCOPY_CONTENTS)
+    *string_p = value-&gt;data[0].v_pointer;
+  else
+    *string_p = g_strdup (value-&gt;data[0].v_pointer);
+
+}
+</programlisting>
+			And an illustrative version of lcopy_value() for
+			reference-counted types:
+<programlisting>
+{
+  GObject **object_p = collect_values[0].v_pointer;
+
+  if (!object_p)
+    return g_strdup_printf ("object location passed as NULL");
+  if (!value-&gt;data[0].v_pointer)
+    *object_p = NULL;
+  else if (collect_flags &amp; G_VALUE_NOCOPY_CONTENTS) /* always honour */
+    *object_p = value-&gt;data[0].v_pointer;
+  else
+    *object_p = g_object_ref (value-&gt;data[0].v_pointer);
+  return NULL;
+}
+</programlisting>
 
 <!-- ##### MACRO G_TYPE_FROM_INSTANCE ##### -->
 <para>
-
+Returns the type identifier from a given @instance structure. 
+<para>
+</para>
+This macro should only be used in type implementations.
 </para>
 
-@instance: 
+@instance: Location of a valid #GTypeInstance structure.
 
 
 <!-- ##### MACRO G_TYPE_FROM_CLASS ##### -->
 <para>
-
+Returns the type identifier from a given @class structure.
+<para>
+</para>
+This macro should only be used in type implementations.
 </para>
 
-@g_class: 
+@g_class: Location of a valid #GTypeClass structure.
 
 
 <!-- ##### MACRO G_TYPE_FROM_INTERFACE ##### -->
 <para>
-
+Returns the type identifier from a given @interface structure.
+<para>
+</para>
+This macro should only be used in type implementations.
 </para>
 
-@g_iface: 
+@g_iface: Location of a valid #GTypeInterface structure.
 
 
 <!-- ##### MACRO G_TYPE_INSTANCE_GET_CLASS ##### -->
 <para>
-
+Returns the class structure of a given @instance, casted
+to a specified ancestor type @g_type of the instance.
+</para>
+<warning><para>Note
+that while calling a GInstanceInitFunc(), the class pointer gets
+modified, so it might not always return the expected pointer.
+</para></warning>
+<para>
+This macro should only be used in type implementations.
 </para>
 
-@instance: 
-@g_type: 
-@c_type: 
+@instance: 	Location of the #GTypeInstance structure.
+@g_type: 	The anchestor type of the class to be returned.
+@c_type: 	The corresponding C type of @g_type.
 
 
 <!-- ##### MACRO G_TYPE_INSTANCE_GET_INTERFACE ##### -->
 <para>
-
+Returns the interface structure for interface @g_type of a given @instance.
+<para>
+</para>
+This macro should only be used in type implementations.
 </para>
 
-@instance: 
-@g_type: 
-@c_type: 
+@instance: Location of the #GTypeInstance structure.
+@g_type: The interface type to be returned.
+@c_type: The corresponding C type of @g_type.
 
 
 <!-- ##### MACRO G_TYPE_INSTANCE_GET_PRIVATE ##### -->
 <para>
-
+Gets the private structure for a particular type.
+The private structure must have been registered in the
+class_init function with g_type_class_add_private().
+</para>
+<para>
+This macro should only be used in type implementations.
 </para>
 
-@instance: 
-@g_type: 
-@c_type: 
+@instance: the instance of a type deriving from @private_type.
+@g_type: the type identifying which private data to retrieve.
+@c_type: The C type for the private structure.
+@Since: 2.4
 
 
 <!-- ##### MACRO G_TYPE_CHECK_INSTANCE ##### -->
 <para>
-
+Returns %TRUE if @instance is a valid #GTypeInstance structure,
+otherwise emits a warning and returns %FALSE.
+<para>
+</para>
+This macro should only be used in type implementations.
 </para>
 
-@instance: 
+@instance: Location of a #GTypeInstance structure.
 
 
 <!-- ##### MACRO G_TYPE_CHECK_INSTANCE_CAST ##### -->
 <para>
-
+Checks that @instance is an instance of the type identified by @g_type
+and emits a warning if this is not the case. Returns @instance casted 
+to a pointer to @c_type.
+</para>
+<para>
+This macro should only be used in type implementations.
 </para>
 
-@instance: 
-@g_type: 
-@c_type: 
+@instance: Location of a #GTypeInstance structure.
+@g_type: The type to be returned.
+@c_type: The corresponding C type of @g_type.
 
 
 <!-- ##### MACRO G_TYPE_CHECK_INSTANCE_TYPE ##### -->
 <para>
-
+Returns %TRUE if @instance is an instance of the type identified by @g_type.
+Otherwise emits a warning and returns %FALSE.
+</para>
+<para>
+This macro should only be used in type implementations.
 </para>
 
-@instance: 
-@g_type: 
+@instance: Location of a #GTypeInstance structure.
+@g_type: The type to be checked
 
 
 <!-- ##### MACRO G_TYPE_CHECK_CLASS_CAST ##### -->
 <para>
-
+Checks that @g_class is a class structure of the type identified by @g_type
+and emits a warning if this is not the case. Returns @g_class casted 
+to a pointer to @c_type.
+</para>
+<para>
+This macro should only be used in type implementations.
 </para>
 
-@g_class: 
-@g_type: 
-@c_type: 
+@g_class: Location of a #GTypeClass structure.
+@g_type: The type to be returned.
+@c_type: The corresponding C type of class structure of @g_type.
 
 
 <!-- ##### MACRO G_TYPE_CHECK_CLASS_TYPE ##### -->
 <para>
-
+Returns %TRUE if @g_class is a class structure of the type identified by 
+@g_type. Otherwise emits a warning and returns %FALSE.
+</para>
+<para>
+This macro should only be used in type implementations.
 </para>
 
-@g_class: 
-@g_type: 
+@g_class: Location of a #GTypeClass structure.
+@g_type: The type to be checked.
 
 
 <!-- ##### MACRO G_TYPE_CHECK_VALUE ##### -->
 <para>
-
+Returns %TRUE if @value has been initialized to hold values
+of a value type.
+</para>
+<para>
+This macro should only be used in type implementations.
 </para>
 
-@value: 
+@value: a #GValue
 
 
 <!-- ##### MACRO G_TYPE_CHECK_VALUE_TYPE ##### -->
 <para>
-
+Returns %TRUE if @value has been initialized to hold values
+of type @g_type. 
+</para>
+<para>
+This macro should only be used in type implementations.
 </para>
 
-@value: 
-@g_type: 
+@value: a #GValue
+@g_type: The type to be checked.
 
 
 <!-- ##### MACRO G_TYPE_FLAG_RESERVED_ID_BIT ##### -->
 <para>
-
+A bit in the type number that's supposed to be left untouched.
 </para>
 
 
 
 <!-- ##### FUNCTION g_type_init ##### -->
 <para>
-
+Prior to any use of the type system, g_type_init() has to be called to initialize
+the type system and assorted other code portions (such as the various fundamental
+type implementations or the signal system).
 </para>
 
 
 
 <!-- ##### ENUM GTypeDebugFlags ##### -->
 <para>
+The <type>GTypeDebugFlags</type> enumeration values can be passed to
+g_type_init_with_debug_flags() to trigger debugging messages during runtime.
+Note that the messages can also be triggered by setting the
+<envar>GOBJECT_DEBUG</envar> environment variable to a ':'-separated list of 
+"objects" and "signals".
 
 </para>
 
-@G_TYPE_DEBUG_NONE: 
-@G_TYPE_DEBUG_OBJECTS: 
-@G_TYPE_DEBUG_SIGNALS: 
-@G_TYPE_DEBUG_MASK: 
+@G_TYPE_DEBUG_NONE: Print no messages.
+@G_TYPE_DEBUG_OBJECTS: Print messages about object bookkeeping.
+@G_TYPE_DEBUG_SIGNALS: Print messages about signal emissions.
+@G_TYPE_DEBUG_MASK: Mask covering all debug flags.
 
 <!-- ##### FUNCTION g_type_init_with_debug_flags ##### -->
 <para>
-
+Similar to g_type_init(), but additionally sets debug flags.
 </para>
 
-@debug_flags: 
+@debug_flags: Bitwise combination of #GTypeDebugFlags values for debugging purposes.
 
 
 <!-- ##### FUNCTION g_type_name ##### -->
 <para>
-
+    Returns the unique name that is assigned to a type ID.
+    Note that this function (like all other GType API) cannot cope with invalid
+    type IDs. %G_TYPE_INVALID may be passed to this function, as may be any other
+    validly registered type ID, but randomized type IDs should not be passed in and
+    will most likely lead to a crash.
 </para>
 
-@type: 
-@Returns: 
+@type: 		Type to return name for.
+@Returns: 	Static type name or %NULL.
 
 
 <!-- ##### FUNCTION g_type_qname ##### -->
 <para>
-
+Return the corresponding quark of the type IDs name.
 </para>
 
-@type: 
-@Returns: 
+@type:    Type to return quark of type name for.
+@Returns: The type names quark or 0.
 
 
 <!-- ##### FUNCTION g_type_from_name ##### -->
 <para>
-
+Lookup the type ID from a given type name, returning 0 if no type has been registered under this name
+(this is the preferred method to find out by name whether a specific type has been registered yet).
 </para>
 
-@name: 
-@Returns: 
+@name:    Type name to lookup.
+@Returns: Corresponding type ID or 0.
 
 
 <!-- ##### FUNCTION g_type_parent ##### -->
 <para>
-
+Return the direct parent type of the passed in type.
+If the passed in type has no parent, i.e. is a fundamental type, 0 is returned.
 </para>
 
-@type: 
-@Returns: 
+@type:    The derived type.
+@Returns: The parent type.
 
 
 <!-- ##### FUNCTION g_type_depth ##### -->
 <para>
-
+Returns the length of the ancestry of the passed in type. This includes the
+type itself, so that e.g. a fundamental type has depth 1.
 </para>
 
-@type: 
-@Returns: 
+@type:    A #GType value.
+@Returns: The depth of @type.
 
 
 <!-- ##### FUNCTION g_type_next_base ##### -->
 <para>
-
+Given a @leaf_type and a @root_type which is contained in its anchestry, return
+the type that @root_type is the immediate parent of.
+In other words, this function determines the type that is derived directly from
+@root_type which is also a base class of @leaf_type.  Given a root type and a
+leaf type, this function can be used to determine the types and order in which
+the leaf type is descended from the root type.
 </para>
 
-@leaf_type: 
-@root_type: 
-@Returns: 
+@leaf_type: 	Descendant of @root_type and the type to be returned.
+@root_type: 	Immediate parent of the returned type.
+@Returns: 	Immediate child of @root_type and anchestor of @leaf_type.
 
 
 <!-- ##### FUNCTION g_type_is_a ##### -->
 <para>
-
+If @is_a_type is a derivable type, check whether @type is a descendant of @is_a_type.
+If @is_a_type is an interface, check whether @type conforms to it.
 </para>
 
-@type: 
-@is_a_type: 
-@Returns: 
+@type:      Type to check anchestry for.
+@is_a_type: Possible anchestor of @type or interface @type could conform to.
+@Returns:   %TRUE if @type is_a @is_a_type holds true.
 
 
 <!-- ##### FUNCTION g_type_class_ref ##### -->
 <para>
-
+Increments the reference count of the class structure belonging to
+@type. This function will demand-create the class if it doesn't
+exist already.
 </para>
 
-@type: 
-@Returns: 
+@type: 	  Type ID of a classed type.
+@Returns: The #GTypeClass structure for the given type ID.
 
 
 <!-- ##### FUNCTION g_type_class_peek ##### -->
 <para>
-
+This function is essentially the same as g_type_class_ref(), except that
+the classes reference count isn't incremented. As a consequence, this function
+may return %NULL if the class of the type passed in does not currently
+exist (hasn't been referenced before).
 </para>
 
-@type: 
-@Returns: 
+@type: 		Type ID of a classed type.
+@Returns: 	The #GTypeClass structure for the given type ID or %NULL
+		if the class does not currently exist.
 
 
 <!-- ##### FUNCTION g_type_class_peek_static ##### -->
 <para>
-
+A more efficient version of g_type_class_peek() which works only for
+static types.
 </para>
 
-@type: 
-@Returns: 
+@type: Type ID of a classed type.
+@Returns: The #GTypeClass structure for the given type ID or %NULL
+   if the class does not currently exist or is dynamically loaded.
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_type_class_unref ##### -->
 <para>
-
+Decrements the reference count of the class structure being passed in.
+Once the last reference count of a class has been released, classes
+may be finalized by the type system, so further dereferencing of a
+class pointer after g_type_class_unref() are invalid.
 </para>
 
-@g_class: 
+@g_class: 	The #GTypeClass structure to unreference.
 
 
 <!-- ##### FUNCTION g_type_class_peek_parent ##### -->
 <para>
+This is a convenience function often needed in class initializers.
+It returns the class structure of the immediate parent type of the class passed in.
+Since derived classes hold
+a reference count on their parent classes as long as they are instantiated,
+the returned class will always exist. This function is essentially
+equivalent to:
+
+<programlisting>
+g_type_class_peek (g_type_parent (G_TYPE_FROM_CLASS (g_class)));
+</programlisting>
 
 </para>
 
-@g_class: 
-@Returns: 
+@g_class: The #GTypeClass structure to retrieve the parent class for.
+@Returns: The parent class of @g_class.
 
 
 <!-- ##### FUNCTION g_type_class_add_private ##### -->
 <para>
-
-</para>
-
-@g_class: 
-@private_size: 
+Registers a private structure for a instantiatable type;
+when an object is allocated, the private structures for
+the type and and all of its parent types are allocated
+sequentially in the same memory block as the public
+structures. This function should be called in the
+type's class_init() function. The private structure can
+be retrieved using the G_TYPE_INSTANCE_GET_PRIVATE() macro.
+The following example shows attaching a private structure
+<structname>MyObjectPrivate</structname> to an object
+<structname>MyObject</structname> defined in the standard GObject
+fashion.
+</para>
+<programlisting>
+typedef struct _MyObjectPrivate MyObjectPrivate;
+
+struct _MyObjectPrivate {
+  int some_field;
+};
+
+&num;define MY_OBJECT_GET_PRIVATE(o)  \
+   (G_TYPE_INSTANCE_GET_PRIVATE ((o), MY_TYPE_OBJECT, MyObjectPrivate))
+
+static void
+my_object_class_init (MyObjectClass *klass)
+{
+  g_type_class_add_private (klass, sizeof (MyObjectPrivate));
+}
+
+static int
+my_object_get_some_field (MyObject *my_object)
+{
+  MyObjectPrivate *priv = MY_OBJECT_GET_PRIVATE (my_object);
+
+  return priv->some_field;
+}
+</programlisting>
+
+@g_class: class structure for an instantiatable type
+@private_size: size of private structure.
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_type_interface_peek ##### -->
 <para>
-
+Returns the #GTypeInterface structure of an interface to which the passed in 
+class conforms.
 </para>
 
-@instance_class: 
-@iface_type: 
-@Returns: 
+@instance_class: A #GTypeClass structure.
+@iface_type:     An interface ID which this class conforms to.
+@Returns:        The GTypeInterface structure of iface_type if implemented 
+                 by @instance_class, %NULL otherwise
 
 
 <!-- ##### FUNCTION g_type_interface_peek_parent ##### -->
 <para>
-
+Returns the corresponding #GTypeInterface structure of the parent type
+of the instance type to which @g_iface belongs. This is useful when 
+deriving the implementation of an interface from the parent type and 
+then possibly overriding some methods. 
 </para>
 
-@g_iface: 
-@Returns: 
+@g_iface: A #GTypeInterface structure.
+@Returns: The corresponding #GTypeInterface structure of the parent type
+   of the instance type to which @g_iface belongs, or %NULL if the parent type
+   doesn't conform to the interface.
 
 
 <!-- ##### FUNCTION g_type_default_interface_ref ##### -->
 <para>
-
+Increments the reference count for the interface type @g_type,
+and returns the default interface vtable for the type.
 </para>
-
-@g_type: 
-@Returns: 
+<para>  
+If the type is not currently in use, then the default vtable
+for the type will be created and initalized by calling
+the base interface init and default vtable init functions for
+the type (the @<structfield>base_init</structfield>
+and <structfield>class_init</structfield> members of #GTypeInfo).
+Calling g_type_default_interface_ref() is useful when you
+want to make sure that signals and properties for an interface
+have been installed.
+</para>
+
+@g_type: an interface type
+@Returns: the default vtable for the interface; call 
+ g_type_default_interface_unref() when you are done using
+ the interface.
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_type_default_interface_peek ##### -->
 <para>
-
+If the interface type @g_type is currently in use, returns
+its default interface vtable.    
 </para>
 
-@g_type: 
-@Returns: 
+@g_type: an interface type
+@Returns: the default vtable for the interface, or %NULL
+ if the type is not currently in use.
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_type_default_interface_unref ##### -->
 <para>
-
+Decrements the reference count for the type corresponding to the
+interface default vtable @g_iface. If the type is dynamic, then
+when no one is using the interface and all references have
+been released, the finalize function for the interface's default
+vtable (the <structfield>class_finalize</structfield> member of
+#GTypeInfo) will be called.
 </para>
 
-@g_iface: 
+@g_iface: the default vtable structure for a interface, as
+  returned by g_type_default_interface_ref()
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_type_children ##### -->
 <para>
-
+Return a newly allocated and 0-terminated array of type IDs, listing the
+child types of @type. The return value has to be g_free()ed after use.
 </para>
 
-@type: 
-@n_children: 
-@Returns: 
+@type:       The parent type.
+@n_children: Optional #guint pointer to contain the number of child types.
+@Returns:    Newly allocated and 0-terminated array of child types.
 
 
 <!-- ##### FUNCTION g_type_interfaces ##### -->
 <para>
-
+Return a newly allocated and 0-terminated array of type IDs, listing the
+interface types that @type conforms to. The return value has to be
+g_free()ed after use.
 </para>
 
-@type: 
-@n_interfaces: 
-@Returns: 
+@type:         The type to list interface types for.
+@n_interfaces: Optional #guint pointer to contain the number of interface types.
+@Returns:      Newly allocated and 0-terminated array of interface types.
 
 
 <!-- ##### FUNCTION g_type_interface_prerequisites ##### -->
 <para>
-
+Returns the prerequisites of an interfaces type.
 </para>
 
-@interface_type: 
-@n_prerequisites: 
-@Returns: 
+@interface_type: an interface type
+@n_prerequisites: location to return the number of prerequisites, or %NULL
+@Returns: a newly-allocated zero-terminated array of #GType containing 
+   the prerequisites of @interface_type
+@Since: 2.2
 
 
 <!-- ##### FUNCTION g_type_set_qdata ##### -->
 <para>
-
+Attaches arbitrary data to a type.
 </para>
 
-@type: 
-@quark: 
-@data: 
+@type: a #GType
+@quark: a #GQuark id to identify the data
+@data: the data
 
 
 <!-- ##### FUNCTION g_type_get_qdata ##### -->
 <para>
-
+Obtains data which has previously been attached to @type
+with g_type_set_qdata().
 </para>
 
-@type: 
-@quark: 
-@Returns: 
+@type: a #GType
+@quark: a #GQuark id to identify the data
+@Returns: the data, or %NULL if no data was found
 
 
 <!-- ##### FUNCTION g_type_query ##### -->
 <para>
-
+Queries the type system for information about a specific type. 
+This function will fill in a user-provided structure to hold type-specific 
+information. If an invalid #GType is passed in, the @type member of the 
+#GTypeQuery is 0. All members filled into the #GTypeQuery structure should
+be considered constant and have to be left untouched.
 </para>
 
-@type: 
-@query: 
+@type: the #GType value of a static, classed type.
+@query: A user provided structure that is filled in with constant values 
+        upon success.
 
 
 <!-- ##### STRUCT GTypeQuery ##### -->
 <para>
-
+A structure holding information for a specific type. It is
+filled in by the g_type_query() function.
 </para>
 
-@type: 
-@type_name: 
-@class_size: 
-@instance_size: 
+@type: the #GType value of the type.
+@type_name: the name of the type.
+@class_size: the size of the class structure.
+@instance_size: the size of the instance structure.
 
 <!-- ##### USER_FUNCTION GBaseInitFunc ##### -->
 <para>
-
+A callback function used by the type system to do base initialization
+of the class structures of derived types. It is called as part of the
+initialization process of all derived classes and should reallocate
+or reset all dynamic class members copied over from the parent class.
+For example, class members (such as strings) that are not sufficiently
+handled by a plain memory copy of the parent class into the derived class
+have to be altered. See GClassInitFunc() for a discussion of the class
+intialization process.
 </para>
 
-@g_class: 
+@g_class: The #GTypeClass structure to initialize.
 
 
 <!-- ##### USER_FUNCTION GBaseFinalizeFunc ##### -->
 <para>
-
+A callback function used by the type system to finalize those portions
+of a derived types class structure that were setup from the corresponding
+GBaseInitFunc() function. Class finalization basically works the inverse
+way in which class intialization is performed.
+See GClassInitFunc() for a discussion of the class intialization process.
 </para>
 
-@g_class: 
+@g_class: The #GTypeClass structure to finalize.
 
 
 <!-- ##### USER_FUNCTION GClassInitFunc ##### -->
 <para>
-
+A callback function used by the type system to initialize the class
+of a specific type. This function should initialize all static class
+members.
+The initialization process of a class involves:
+<variablelist>
+  <varlistentry><term></term><listitem><para>
+	1 - Copying common members from the parent class over to the
+	derived class structure.
+  </para></listitem></varlistentry>
+  <varlistentry><term></term><listitem><para>
+	2 -  Zero initialization of the remaining members not copied
+	over from the parent class.
+  </para></listitem></varlistentry>
+  <varlistentry><term></term><listitem><para>
+	3 - Invocation of the GBaseInitFunc() initializers of all parent
+	types and the class' type.
+  </para></listitem></varlistentry>
+  <varlistentry><term></term><listitem><para>
+	4 - Invocation of the class' GClassInitFunc() initializer.
+  </para></listitem></varlistentry>
+</variablelist>
+Since derived classes are partially initialized through a memory copy
+of the parent class, the general rule is that GBaseInitFunc() and
+GBaseFinalizeFunc() should take care of necessary reinitialization
+and release of those class members that were introduced by the type
+that specified these GBaseInitFunc()/GBaseFinalizeFunc().
+GClassInitFunc() should only care about initializing static
+class members, while dynamic class members (such as allocated strings
+or reference counted resources) are better handled by a GBaseInitFunc()
+for this type, so proper initialization of the dynamic class members
+is performed for class initialization of derived types as well.
+An example may help to correspond the intend of the different class
+initializers:
+
+<programlisting>
+typedef struct {
+  GObjectClass parent_class;
+  gint         static_integer;
+  gchar       *dynamic_string;
+} TypeAClass;
+static void
+type_a_base_class_init (TypeAClass *class)
+{
+  class->dynamic_string = g_strdup ("some string");
+}
+static void
+type_a_base_class_finalize (TypeAClass *class)
+{
+  g_free (class->dynamic_string);
+}
+static void
+type_a_class_init (TypeAClass *class)
+{
+  class->static_integer = 42;
+}
+
+typedef struct {
+  TypeAClass   parent_class;
+  gfloat       static_float;
+  GString     *dynamic_gstring;
+} TypeBClass;
+static void
+type_b_base_class_init (TypeBClass *class)
+{
+  class->dynamic_gstring = g_string_new ("some other string");
+}
+static void
+type_b_base_class_finalize (TypeBClass *class)
+{
+  g_string_free (class->dynamic_gstring);
+}
+static void
+type_b_class_init (TypeBClass *class)
+{
+  class->static_float = 3.14159265358979323846;
+}
+</programlisting>
+Initialization of TypeBClass will first cause initialization of
+TypeAClass (derived classes reference their parent classes, see
+g_type_class_ref() on this).
+Initialization of TypeAClass roughly involves zero-initializing its fields,
+then calling its GBaseInitFunc() type_a_base_class_init() to allocate
+its dynamic members (dynamic_string), and finally calling its GClassInitFunc()
+type_a_class_init() to initialize its static members (static_integer).
+The first step in the initialization process of TypeBClass is then
+a plain memory copy of the contents of TypeAClass into TypeBClass and 
+zero-initialization of the remaining fields in TypeBClass.
+The dynamic members of TypeAClass within TypeBClass now need
+reinitialization which is performed by calling type_a_base_class_init()
+with an argument of TypeBClass.
+After that, the GBaseInitFunc() of TypeBClass, type_b_base_class_init()
+is called to allocate the dynamic members of TypeBClass (dynamic_gstring),
+and finally the GClassInitFunc() of TypeBClass, type_b_class_init(),
+is called to complete the initialization process with the static members
+(static_float).
+Corresponding finalization counter parts to the GBaseInitFunc() functions
+have to be provided to release allocated resources at class finalization
+time.
 </para>
 
-@g_class: 
-@class_data: 
+@g_class: 	The #GTypeClass structure to initialize.
+@class_data: 	The @class_data member supplied via the #GTypeInfo structure.
 
 
 <!-- ##### USER_FUNCTION GClassFinalizeFunc ##### -->
 <para>
-
+A callback function used by the type system to finalize a class.
+This function is rarely needed, as dynamically allocated class resources
+should be handled by GBaseInitFunc() and GBaseFinalizeFunc().
+Also, specification of a GClassFinalizeFunc() in the #GTypeInfo
+structure of a static type is invalid, because classes of static types
+will never be finalized (they are artificially kept alive when their
+reference count drops to zero).
 </para>
 
-@g_class: 
-@class_data: 
+@g_class: 	The #GTypeClass structure to finalize.
+@class_data: 	The @class_data member supplied via the #GTypeInfo structure.
 
 
 <!-- ##### USER_FUNCTION GInstanceInitFunc ##### -->
 <para>
-
+A callback function used by the type system to initialize a new
+instance of a type. This function initializes all instance members and
+allocates any resources required by it.
+Initialization of a derived instance involves calling all its parent
+types instance initializers, so the class member of the instance
+is altered during its initialization to always point to the class that
+belongs to the type the current initializer was introduced for.
 </para>
 
-@instance: 
-@g_class: 
+@instance: 	The instance to initialize.
+@g_class: 	The class of the type the instance is created for.
 
 
 <!-- ##### USER_FUNCTION GInterfaceInitFunc ##### -->
 <para>
-
+A callback function used by the type system to initialize a new
+interface.  This function should initialize all internal data and
+allocate any resources required by the interface.
 </para>
 
-@g_iface: 
-@iface_data: 
+@g_iface: 	The interface structure to initialize.
+@iface_data: 	The @class_data supplied via the #GTypeInfo structure.
 
 
 <!-- ##### USER_FUNCTION GInterfaceFinalizeFunc ##### -->
 <para>
-
+A callback function used by the type system to finalize an interface.
+This function should destroy any internal data and release any resources
+allocated by the corresponding GInterfaceInitFunc() function.
 </para>
 
-@g_iface: 
-@iface_data: 
+@g_iface: 	The interface structure to finalize.
+@iface_data: 	The @class_data supplied via the #GTypeInfo structure.
 
 
 <!-- ##### USER_FUNCTION GTypeClassCacheFunc ##### -->
 <para>
-
-</para>
-
-@cache_data: 
-@g_class: 
-@Returns: 
+A callback function which is called when the reference count of a class 
+drops to zero. It may use g_type_class_ref() to prevent the class from
+being freed. You should not call g_type_class_unref() from a 
+#GTypeClassCacheFunc function to prevent infinite recursion, use 
+g_type_class_unref_uncached() instead.
+</para>
+<para>
+The functions have to check the class id passed in to figure 
+whether they actually want to cache the class of this type, since all
+classes are routed through the same #GTypeClassCacheFunc chain.
+</para>
+
+@cache_data: data that was given to the g_type_add_class_cache_func() call
+@g_class: The #GTypeClass structure which is unreferenced
+@Returns: %TRUE to stop further #GTypeClassCacheFunc<!-- -->s from being 
+called, %FALSE to continue.
 
 
 <!-- ##### ENUM GTypeFlags ##### -->
 <para>
-
+Bit masks used to check or determine characteristics of a type.
 </para>
 
-@G_TYPE_FLAG_ABSTRACT: 
-@G_TYPE_FLAG_VALUE_ABSTRACT: 
+@G_TYPE_FLAG_ABSTRACT: 	Indicates an abstract type. No instances can be
+			created for an abstract type.
+@G_TYPE_FLAG_VALUE_ABSTRACT: Indicates an abstract value type, i.e. a type
+                        that introduces a value table, but can't be used for
+                        g_value_init().
 
 <!-- ##### ENUM GTypeFundamentalFlags ##### -->
 <para>
-
+Bit masks used to check or determine specific characteristics of a
+fundamental type.
 </para>
 
-@G_TYPE_FLAG_CLASSED: 
-@G_TYPE_FLAG_INSTANTIATABLE: 
-@G_TYPE_FLAG_DERIVABLE: 
-@G_TYPE_FLAG_DEEP_DERIVABLE: 
+@G_TYPE_FLAG_CLASSED: 		Indicates a classed type.
+@G_TYPE_FLAG_INSTANTIATABLE: 	Indicates an instantiable type (implies classed).
+@G_TYPE_FLAG_DERIVABLE: 	Indicates a flat derivable type.
+@G_TYPE_FLAG_DEEP_DERIVABLE: 	Indicates a deep derivable type (implies derivable).
 
 <!-- ##### FUNCTION g_type_register_static ##### -->
 <para>
-
+Registers @type_name as the name of a new static type derived from
+@parent_type.  The type system uses the information contained in the
+#GTypeInfo structure pointed to by @info to manage the type and its
+instances (if not abstract).  The value of @flags determines the nature
+(e.g. abstract or not) of the type.
 </para>
 
-@parent_type: 
-@type_name: 
-@info: 
-@flags: 
-@Returns: 
+@parent_type: 	Type from which this type will be derived.
+@type_name: 	0-terminated string used as the name of the new type.
+@info: 		The #GTypeInfo structure for this type.
+@flags: 		Bitwise combination of #GTypeFlags values.
+@Returns: 	The new type identifier.
 
 
 <!-- ##### FUNCTION g_type_register_static_simple ##### -->
 <para>
-
+Registers @type_name as the name of a new static type derived from
+@parent_type.  The value of @flags determines the nature (e.g. 
+abstract or not) of the type. It works by filling a #GTypeInfo 
+struct and calling g_type_register_static().
 </para>
 
-@parent_type: 
-@type_name: 
-@class_size: 
-@class_init: 
-@instance_size: 
-@instance_init: 
-@flags: 
-@Returns: 
+@parent_type: 	Type from which this type will be derived.
+@type_name: 	0-terminated string used as the name of the new type.
+@class_size:    Size of the class structure (see #GTypeInfo)
+@class_init: 	Location of the class initialization function (see #GTypeInfo)
+@instance_size: Size of the instance structure (see #GTypeInfo)
+@instance_init: Location of the instance initialization function (see #GTypeInfo)
+@flags: 	Bitwise combination of #GTypeFlags values.
+@Returns: 	The new type identifier.
+@Since:         2.12
 
 
 <!-- ##### FUNCTION g_type_register_dynamic ##### -->
 <para>
-
+Registers @type_name as the name of a new dynamic type derived from
+@parent_type.  The type system uses the information contained in the
+#GTypePlugin structure pointed to by @plugin to manage the type and its
+instances (if not abstract).  The value of @flags determines the nature
+(e.g. abstract or not) of the type.
 </para>
 
-@parent_type: 
-@type_name: 
-@plugin: 
-@flags: 
-@Returns: 
+@parent_type: 	Type from which this type will be derived.
+@type_name: 	0-terminated string used as the name of the new type.
+@plugin: 	The #GTypePlugin structure to retrieve the #GTypeInfo from.
+@flags: 		Bitwise combination of #GTypeFlags values.
+@Returns: 	The new type identifier or #G_TYPE_INVALID if registration failed.
 
 
 <!-- ##### FUNCTION g_type_register_fundamental ##### -->
 <para>
-
+Registers @type_id as the predefined identifier and @type_name as the
+name of a fundamental type.  The type system uses the information
+contained in the #GTypeInfo structure pointed to by @info and the 
+#GTypeFundamentalInfo structure pointed to by @finfo to manage the
+type and its instances.  The value of @flags determines additional
+characteristics of the fundamental type.
 </para>
 
-@type_id: 
-@type_name: 
-@info: 
-@finfo: 
-@flags: 
-@Returns: 
+@type_id: 	A predefined #GTypeFundamentals value.
+@type_name: 	0-terminated string used as the name of the new type.
+@info: 		The #GTypeInfo structure for this type.
+@finfo: 		The #GTypeFundamentalInfo structure for this type.
+@flags: 		Bitwise combination of #GTypeFlags values.
+@Returns: 	The predefined type identifier.
 
 
 <!-- ##### FUNCTION g_type_add_interface_static ##### -->
 <para>
-
+Adds the static @interface_type to @instantiable_type.  The information
+contained in the #GTypeInterfaceInfo structure pointed to by @info
+is used to manage the relationship.
 </para>
 
-@instance_type: 
-@interface_type: 
-@info: 
+@instance_type: 	 #GType value of an instantiable type.
+@interface_type: #GType value of an interface type.
+@info: 		 The #GInterfaceInfo structure for this
+		 (@instance_type, @interface_type) combination.
 
 
 <!-- ##### FUNCTION g_type_add_interface_dynamic ##### -->
 <para>
-
+Adds the dynamic @interface_type to @instantiable_type. The information
+contained in the #GTypePlugin structure pointed to by @plugin
+is used to manage the relationship.
 </para>
 
-@instance_type: 
-@interface_type: 
-@plugin: 
+@instance_type: the #GType value of an instantiable type.
+@interface_type: the #GType value of an interface type.
+@plugin: the #GTypePlugin structure to retrieve the #GInterfaceInfo from.
 
 
 <!-- ##### FUNCTION g_type_interface_add_prerequisite ##### -->
 <para>
-
+Adds @prerequisite_type to the list of prerequisites of @interface_type.
+This means that any type implementing @interface_type must also implement
+@prerequisite_type. Prerequisites can be thought of as an alternative to
+interface derivation (which GType doesn't support). An interface can have
+at most one instantiatable prerequisite type.
 </para>
 
-@interface_type: 
-@prerequisite_type: 
+@interface_type: #GType value of an interface type.
+@prerequisite_type: #GType value of an interface or instantiatable type.
 
 
 <!-- ##### FUNCTION g_type_get_plugin ##### -->
 <para>
-
+Returns the #GTypePlugin structure for @type or
+%NULL if @type does not have a #GTypePlugin structure.
 </para>
 
-@type: 
-@Returns: 
+@type: 		The #GType to retrieve the plugin for.
+@Returns: 	The corresponding plugin if @type is a dynamic type,
+		%NULL otherwise.
 
 
 <!-- ##### FUNCTION g_type_interface_get_plugin ##### -->
 <para>
-
+Returns the #GTypePlugin structure for the dynamic interface 
+@interface_type which has been added to @instance_type, or 
+%NULL if @interface_type has not been added to @instance_type or does 
+not have a #GTypePlugin structure. See g_type_add_interface_dynamic().
 </para>
 
-@instance_type: 
-@interface_type: 
-@Returns: 
+@instance_type: the #GType value of an instantiatable type.
+@interface_type: the #GType value of an interface type.
+@Returns: the #GTypePlugin for the dynamic interface @interface_type
+   of @instance_type.
 
 
 <!-- ##### FUNCTION g_type_fundamental_next ##### -->
 <para>
+Returns the next free fundamental type id which can be used to
+register a new fundamental type with g_type_register_fundamental().
+The returned type ID represents the highest currently registered
+fundamental type identifier.
 
 </para>
 
-@Returns: 
+@Returns: The nextmost fundamental type ID to be registered,
+          or 0 if the type system ran out of fundamental type IDs.
 
 
 <!-- ##### FUNCTION g_type_fundamental ##### -->
 <para>
-
+Internal function, used to extract the fundamental type ID portion.
+use G_TYPE_FUNDAMENTAL() instead.
 </para>
 
-@type_id: 
-@Returns: 
+@type_id: valid type ID
+@Returns: fundamental type ID
 
 
 <!-- ##### FUNCTION g_type_create_instance ##### -->
 <para>
-
-</para>
-
-@type: 
-@Returns: 
+Creates and initializes an instance of @type if @type is valid and can
+be instantiated. The type system only performs basic allocation and
+structure setups for instances: actual instance creation should happen
+through functions supplied by the type's fundamental type implementation.
+So use of g_type_create_instance() is reserved for implementators of
+fundamental types only. E.g. instances of the #GObject hierarchy
+should be created via g_object_new() and <emphasis>never</emphasis>
+directly through g_type_create_instance() which doesn't handle
+things like singleton objects or object construction.
+Note: Do <emphasis>not</emphasis> use this function, unless you're
+implementing a fundamental type. Also language bindings should <emphasis>not</emphasis>
+use this function but g_object_new() instead.
+</para>
+
+@type: 	  An instantiatable type to create an instance for.
+@Returns: An allocated and initialized instance, subject to further
+	  treatment by the fundamental type implementation.
 
 
 <!-- ##### FUNCTION g_type_free_instance ##### -->
 <para>
-
+Frees an instance of a type, returning it to the instance pool for the type,
+if there is one.
+</para>
+<para>
+Like g_type_create_instance(), this function is reserved for implementors of 
+fundamental types.
 </para>
 
-@instance: 
+@instance: an instance of a type.
 
 
 <!-- ##### FUNCTION g_type_add_class_cache_func ##### -->
 <para>
-
+Adds a #GTypeClassCacheFunc to be called before the reference count of a class 
+goes from one to zero. This can be used to prevent premature class destruction.
+All installed #GTypeClassCacheFunc functions will be chained until one of them 
+returns %TRUE. The functions have to check the class id passed in to figure 
+whether they actually want to cache the class of this type, since all classes
+are routed through the same #GTypeClassCacheFunc chain.
 </para>
 
-@cache_data: 
-@cache_func: 
+@cache_data: data to be passed to @cache_func
+@cache_func: a #GTypeClassCacheFunc
 
 
 <!-- ##### FUNCTION g_type_remove_class_cache_func ##### -->
 <para>
-
+Removes a previously installed #GTypeClassCacheFunc. The cache maintained 
+by @cache_func has to be empty when calling g_type_remove_class_cache_func() 
+to avoid leaks.
 </para>
 
-@cache_data: 
-@cache_func: 
+@cache_data: data that was given when adding @cache_func
+@cache_func: a #GTypeClassCacheFunc
 
 
 <!-- ##### FUNCTION g_type_class_unref_uncached ##### -->
 <para>
-
+A variant of g_type_class_unref() for use in #GTypeClassCacheFunc
+implementations. It unreferences a class without consulting the chain
+of #GTypeClassCacheFunc<!-- -->s, avoiding the recursion which would occur
+otherwise.
 </para>
 
-@g_class: 
+@g_class: The #GTypeClass structure to unreference.
 
 
 <!-- ##### FUNCTION g_type_add_interface_check ##### -->
 <para>
-
-</para>
-
-@check_data: 
-@check_func: 
+Adds a function to be called after an interface vtable is
+initialized for any class (i.e. after the @interface_init
+member of #GInterfaceInfo has been called).
+</para>
+<para>
+This function is useful when you want to check an invariant
+that depends on the interfaces of a class. For instance,
+the implementation of #GObject uses this facility to check
+that an object implements all of the properties that are
+defined on its interfaces.    
+</para>
+
+@check_data: data to pass to @check_func
+@check_func: function to be called after each interface
+   is initialized.
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_type_remove_interface_check ##### -->
 <para>
-
+Removes an interface check function added with
+g_type_add_interface_check().
 </para>
 
-@check_data: 
-@check_func: 
+@check_data: callback data passed to g_type_add_interface_check()
+@check_func: callback function passed to g_type_add_interface_check()
+@Since: 2.4
 
 
 <!-- ##### USER_FUNCTION GTypeInterfaceCheckFunc ##### -->
 <para>
-
+A callback called after an interface vtable is initialized.
+See g_type_add_interface_check().
 </para>
 
-@check_data: 
-@g_iface: 
+@check_data: data passed to g_type_add_interface_check().
+@g_iface: the interface that has been initialized
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_type_value_table_peek ##### -->
 <para>
-
+Returns the location of the #GTypeValueTable associated with @type.
+<emphasis>Note that this function should only be used from source code
+that implements or has internal knowledge of the implementation of
+@type.</emphasis>
 </para>
 
-@type: 
-@Returns: 
+@type:    A #GType value.
+@Returns: Location of the #GTypeValueTable associated with @type or
+          %NULL if there is no #GTypeValueTable associated with @type.
 
 
 <!-- ##### MACRO G_DEFINE_TYPE ##### -->
 <para>
-
+A convenience macro for type implementations, which declares a 
+class initialization function, an instance initialization function (see #GTypeInfo for information about 
+these) and a static variable named @t_n<!-- -->_parent_class pointing to the parent class. Furthermore, it defines 
+a *_get_type() function. See G_DEFINE_TYPE_EXTENDED() for an example.
 </para>
 
-@TN: 
-@t_n: 
-@T_P: 
+@TN: The name of the new type, in Camel case.
+@t_n: The name of the new type, in lowercase, with words 
+  separated by '_'.
+@T_P: The #GType of the parent type.
+@Since: 2.4
 
 
 <!-- ##### MACRO G_DEFINE_TYPE_WITH_CODE ##### -->
 <para>
-
+A convenience macro for type implementations.  
+Similar to G_DEFINE_TYPE(), but allows to insert custom code into the 
+*_get_type() function, e.g. interface implementations via G_IMPLEMENT_INTERFACE().
+See G_DEFINE_TYPE_EXTENDED() for an example.
 </para>
 
-@TN: 
-@t_n: 
-@T_P: 
-@_C_: 
+@TN: The name of the new type, in Camel case.
+@t_n: The name of the new type in lowercase, with words separated by '_'.
+@T_P: The #GType of the parent type.
+@_C_: Custom code that gets inserted in the *_get_type() function.
+@Since: 2.4
 
 
 <!-- ##### MACRO G_DEFINE_ABSTRACT_TYPE ##### -->
 <para>
-
+A convenience macro for type implementations. 
+Similar to G_DEFINE_TYPE(), but defines an abstract type. 
+See G_DEFINE_TYPE_EXTENDED() for an example.
 </para>
 
-@TN: 
-@t_n: 
-@T_P: 
+@TN: The name of the new type, in Camel case.
+@t_n: The name of the new type, in lowercase, with words 
+  separated by '_'.
+@T_P: The #GType of the parent type.
+@Since: 2.4
 
 
 <!-- ##### MACRO G_DEFINE_ABSTRACT_TYPE_WITH_CODE ##### -->
 <para>
-
+A convenience macro for type implementations.
+Similar to G_DEFINE_TYPE_WITH_CODE(), but defines an abstract type and allows to 
+insert custom code into the *_get_type() function, e.g. interface implementations 
+via G_IMPLEMENT_INTERFACE(). See G_DEFINE_TYPE_EXTENDED() for an example.
 </para>
 
-@TN: 
-@t_n: 
-@T_P: 
-@_C_: 
+@TN: The name of the new type, in Camel case.
+@t_n: The name of the new type, in lowercase, with words 
+  separated by '_'.
+@T_P: The #GType of the parent type.
+@_C_: Custom code that gets inserted in the @type_name_get_type() function.
+@Since: 2.4
 
 
 <!-- ##### MACRO G_IMPLEMENT_INTERFACE ##### -->
 <para>
-
+A convenience macro to ease interface addition in the @_C_ section
+of G_DEFINE_TYPE_WITH_CODE() or G_DEFINE_ABSTRACT_TYPE_WITH_CODE(). 
+See G_DEFINE_TYPE_EXTENDED() for an example.
+</para>
+<para>
+Note that this macro can only be used together with the G_DEFINE_TYPE_*
+macros, since it depends on variable names from those macros.
 </para>
 
-@TYPE_IFACE: 
-@iface_init: 
+@TYPE_IFACE: The #GType of the interface to add
+@iface_init: The interface init function
+@Since: 2.4
 
 
 <!-- ##### MACRO G_DEFINE_TYPE_EXTENDED ##### -->
 <para>
-
+The most general convenience macro for type implementations, on which 
+G_DEFINE_TYPE(), etc are based. 
 </para>
-
-@TN: 
-@t_n: 
-@T_P: 
-@_f_: 
-@_C_: 
+<informalexample><programlisting>
+G_DEFINE_TYPE_EXTENDED (GtkGadget, 
+                        gtk_gadget, 
+                        GTK_TYPE_WIDGET,
+                        0, 
+                        G_IMPLEMENT_INTERFACE (TYPE_GIZMO, 
+                                               gtk_gadget_gizmo_init));
+</programlisting>
+expands to
+<programlisting>
+static void     gtk_gadget_init       (GtkGadget      *self);
+static void     gtk_gadget_class_init (GtkGadgetClass *klass);
+static gpointer gtk_gadget_parent_class = NULL;
+static void     gtk_gadget_class_intern_init (gpointer klass)
+{
+  gtk_gadget_parent_class = g_type_class_peek_parent (klass);
+  gtk_gadget_class_init ((GtkGadgetClass*) klass);
+}
+<!-- -->
+GType
+gtk_gadget_get_type (void)
+{
+  static GType g_define_type_id = 0; 
+  if (G_UNLIKELY (g_define_type_id == 0)) 
+    { 
+      static const GTypeInfo g_define_type_info = { 
+        sizeof (GtkGadgetClass), 
+        (GBaseInitFunc) NULL, 
+        (GBaseFinalizeFunc) NULL, 
+        (GClassInitFunc) gtk_gadget_class_intern_init, 
+        (GClassFinalizeFunc) NULL, 
+        NULL,   /* class_data */ 
+        sizeof (GtkGadget), 
+        0,      /* n_preallocs */ 
+        (GInstanceInitFunc) gtk_gadget_init, 
+      }; 
+      g_define_type_id = g_type_register_static (GTK_TYPE_WIDGET, "GtkGadget", &amp;g_define_type_info, 0); 
+      {
+        static const GInterfaceInfo g_implement_interface_info = {
+          (GInterfaceInitFunc) gtk_gadget_gizmo_init
+        };
+        g_type_add_interface_static (g_define_type_id, TYPE_GIZMO, &amp;g_implement_interface_info);
+      } 
+    } 
+  return g_define_type_id; 
+}
+</programlisting>
+The only pieces which have to be manually provided are the definitions of the 
+instance and class structure and the definitions of the instance and class 
+init functions.
+</informalexample>
+
+@TN: The name of the new type, in Camel case.
+@t_n: The name of the new type, in lowercase, with words 
+  separated by '_'.
+@T_P: The #GType of the parent type.
+@_f_: #GTypeFlags to pass to g_type_register_static()
+@_C_: Custom code that gets inserted in the *_get_type() function.
+@Since: 2.4
 
 
 <!-- ##### MACRO G_TYPE_INVALID ##### -->
 <para>
-
+An invalid #GType used as error return value in some functions which return
+a #GType. 
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_NONE ##### -->
 <para>
-
+A fundamental type which is used as a replacement for the C
+<literal>void</literal> return type.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_INTERFACE ##### -->
 <para>
-
+The fundamental type from which all interfaces are derived.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_CHAR ##### -->
-<para>
-
-</para>
+  <para>
+    The fundamental type corresponding to #gchar.
+    The type designated by G_TYPE_CHAR is unconditionally an 8-bit signed integer.
+    This may or may not be the same type a the C type "gchar".
+  </para>
 
 
 
 <!-- ##### MACRO G_TYPE_UCHAR ##### -->
 <para>
-
+The fundamental type corresponding to #guchar.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_BOOLEAN ##### -->
 <para>
-
+The fundamental type corresponding to #gboolean.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_INT ##### -->
 <para>
-
+The fundamental type corresponding to #gint.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_UINT ##### -->
 <para>
-
+The fundamental type corresponding to #guint.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_LONG ##### -->
 <para>
-
+The fundamental type corresponding to #glong.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_ULONG ##### -->
 <para>
-
+The fundamental type corresponding to #gulong.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_INT64 ##### -->
 <para>
-
+The fundamental type corresponding to #gint64.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_UINT64 ##### -->
 <para>
-
+The fundamental type corresponding to #guint64.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_ENUM ##### -->
 <para>
-
+The fundamental type from which all enumeration types are derived.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_FLAGS ##### -->
 <para>
-
+The fundamental type from which all flags types are derived.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_FLOAT ##### -->
 <para>
-
+The fundamental type corresponding to #gfloat.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_DOUBLE ##### -->
 <para>
-
+The fundamental type corresponding to #gdouble.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_STRING ##### -->
 <para>
-
+The fundamental type corresponding to nul-terminated C strings.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_POINTER ##### -->
 <para>
-
+The fundamental type corresponding to #gpointer.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_BOXED ##### -->
 <para>
-
+The fundamental type from which all boxed types are derived.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_PARAM ##### -->
 <para>
-
+The fundamental type from which all #GParamSpec types are derived.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_OBJECT ##### -->
 <para>
-
+The fundamental type for #GObject.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_GTYPE ##### -->
 <para>
-
+The type for #GType.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_RESERVED_GLIB_FIRST ##### -->
 <para>
-
+First fundamental type number to create a new fundamental type id with
+G_TYPE_MAKE_FUNDAMENTAL() reserved for GLib.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_RESERVED_GLIB_LAST ##### -->
 <para>
-
+Last fundamental type number reserved for GLib.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_RESERVED_BSE_FIRST ##### -->
 <para>
-
+First fundamental type number to create a new fundamental type id with
+G_TYPE_MAKE_FUNDAMENTAL() reserved for BSE.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_RESERVED_BSE_LAST ##### -->
 <para>
-
+Last fundamental type number reserved for BSE.
 </para>
 
 
 
 <!-- ##### MACRO G_TYPE_RESERVED_USER_FIRST ##### -->
 <para>
-
+First available fundamental type number to create new fundamental 
+type id with G_TYPE_MAKE_FUNDAMENTAL().
 </para>
 
+<!--
+Local variables:
+mode: sgml
+sgml-parent-document: ("../gobject-docs.sgml" "book" "refsect2" "")
+End:
+-->
+
 
 
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/objects.sgml glib/docs/reference/gobject/tmpl/objects.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/objects.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/objects.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -1,632 +1,1111 @@
 <!-- ##### SECTION Title ##### -->
-The Base Object Type
+GObject
 
 <!-- ##### SECTION Short_Description ##### -->
-
+The base object type
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
-</para>
-
+GObject is the fundamental type providing the common attributes and methods 
+for all object types in GTK+, Pango and other libraries based on GObject. 
+The GObject class provides methods for object construction and destruction, 
+property access methods, and signal support. 
+Signals are described in detail in <xref linkend="gobject-Signals"/>.
+</para>
+<para id="floating-ref">
+#GInitiallyUnowned is derived from #GObject. The only difference between
+the two is that the initial reference of a #GInitiallyUnowned is flagged 
+as a <firstterm>floating</firstterm> reference.
+This means that it is not specifically claimed to be "owned" by
+any code portion. The main motivation for providing floating references is
+C convenience. In particular, it allows code to be written as:
+<example><programlisting>
+  container = create_container();
+  container_add_child (container, create_child());
+</programlisting></example>
+If <function>container_add_child()</function> will g_object_ref_sink() the
+passed in child, no reference of the newly created child is leaked.
+Without floating references, <function>container_add_child()</function>
+can only g_object_ref() the new child, so to implement this code without
+reference leaks, it would have to be written as:
+<example><programlisting>
+  Child *child;
+  container = create_container();
+  child = create_child();
+  container_add_child (container, child);
+  g_object_unref (child);
+</programlisting></example>
+The floating reference can be converted into 
+an ordinary reference by calling g_object_ref_sink().
+For already sunken objects (objects that don't have a floating reference
+anymore), g_object_ref_sink() is equivalent to g_object_ref() and returns
+a new reference.
+Since floating references are useful almost exclusively for C convenience,
+language bindings that provide automated reference and memory ownership
+maintenance (such as smart pointers or garbage collection) therefore don't
+need to expose floating references in their API.
+</para>
+<para>
+Some object implementations may need to save an objects floating state
+across certain code portions (an example is #GtkMenu), to achive this, the
+following sequence can be used:
+</para>
+
+<example><programlisting>
+  /* save floating state */
+  gboolean was_floating = g_object_is_floating (object);
+  g_object_ref_sink (object);
+  /* protected code portion */
+  ...;
+  /* restore floating state */
+  if (was_floating)
+    g_object_force_floating (object);
+  g_obejct_unref (object); /* release previously acquired reference */
+</programlisting></example>
 
 <!-- ##### SECTION See_Also ##### -->
 <para>
-
+#GParamSpecObject, g_param_spec_object()
 </para>
 
-
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### STRUCT GObject ##### -->
 <para>
-
+All the fields in the <structname>GObject</structname> structure are private 
+to the #GObject implementation and should never be accessed directly.
 </para>
 
 
 <!-- ##### SIGNAL GObject::notify ##### -->
 <para>
-
+The notify signal is emitted on an object when one of its properties 
+has been changed. Note that getting this signal doesn't guarantee that the
+value of the property has actually changed, it may also be emitted when
+the setter for the property is called to reinstate the previous value.
+</para>
+<para>
+This signal is typically used to obtain change notification for a 
+single property, by specifying the property name as a detail in the
+g_signal_connect() call, like this:
+<informalexample><programlisting>
+g_signal_connect (text_view->buffer, "notify::paste-target-list",
+                  G_CALLBACK (gtk_text_view_target_list_notify),
+                  text_view)
+</programlisting></informalexample>
+It is important to note that you must use 
+<link linkend="canonical-parameter-name">canonical</link> parameter names as
+detail strings for the notify signal.
 </para>
 
+@pspec: the #GParamSpec of the property which changed
 @gobject: the object which received the signal.
-@arg1: 
 
 <!-- ##### STRUCT GObjectClass ##### -->
 <para>
-
+The class structure for the <structname>GObject</structname> type.
 </para>
-
-@g_type_class: 
-@constructor: 
-@set_property: 
-@get_property: 
-@dispose: 
-@finalize: 
-@dispatch_properties_changed: 
-@notify: 
-@constructed: 
+<example>
+<title>Implementing singletons using a constructor</title>
+<programlisting>
+static MySingleton *the_singleton = NULL;
+
+static GObject*
+my_singleton_constructor (GType                  type,
+                          guint                  n_construct_params,
+                          GObjectConstructParam *construct_params)
+{
+  GObject *object;
+  
+  if (!the_singleton)
+    {
+      object = G_OBJECT_CLASS (parent_class)->constructor (type,
+                                                           n_construct_params,
+                                                           construct_params);
+      the_singleton = MY_SINGLETON (object);
+    }
+  else
+    object = g_object_ref (G_OBJECT (the_singleton));
+
+  return object;
+}
+</programlisting></example>
+
+@g_type_class: the parent class
+@constructor:  the @constructor function is called by g_object_new () to 
+  complete the object initialization after all the construction properties are
+  set. The first thing a @constructor implementation must do is chain up to the
+  @constructor of the parent class. Overriding @constructor should be rarely 
+  needed, e.g. to handle construct properties, or to implement singletons.
+@set_property: the generic setter for all properties of this type. Should be
+  overridden for every type with properties. Implementations of @set_property
+  don't need to emit property change notification explicitly, this is handled
+  by the type system.
+@get_property: the generic getter for all properties of this type. Should be
+  overridden for every type with properties.
+@dispose: the @dispose function is supposed to drop all references to other 
+  objects, but keep the instance otherwise intact, so that client method 
+  invocations still work. It may be run multiple times (due to reference 
+  loops). Before returning, @dispose should chain up to the @dispose method 
+  of the parent class.
+@finalize: instance finalization function, should finish the finalization of 
+  the instance begun in @dispose and chain up to the @finalize method of the 
+  parent class.
+@dispatch_properties_changed: emits property change notification for a bunch
+  of properties. Overriding @dispatch_properties_changed should be rarely 
+  needed.
+@notify: the class closure for the notify signal
+@constructed: the @constructed function is called by g_object_new() as the
+  final step of the object creation process.  At the point of the call, all
+  construction properties have been set on the object.  The purpose of this
+  call is to allow for object initialisation steps that can only be performed
+  after construction properties have been set.  @constructed implementors
+  should chain up to the @constructed call of their parent class to allow it
+  to complete its initialisation.
 
 <!-- ##### STRUCT GObjectConstructParam ##### -->
 <para>
-
+The <structname>GObjectConstructParam</structname> struct is an auxiliary 
+structure used to hand #GParamSpec/#GValue pairs to the @constructor of
+a #GObjectClass.
 </para>
 
-@pspec: 
-@value: 
+@pspec: the #GParamSpec of the construct parameter
+@value: the value to set the parameter to
 
 <!-- ##### USER_FUNCTION GObjectGetPropertyFunc ##### -->
 <para>
-
+The type of the @get_property function of #GObjectClass. 
 </para>
 
-@object: 
-@property_id: 
-@value: 
-@pspec: 
+@object: a #GObject
+@property_id: the numeric id under which the property was registered with
+   g_object_class_install_property().
+@value: a #GValue to return the property value in
+@pspec: the #GParamSpec describing the property
 
 
 <!-- ##### USER_FUNCTION GObjectSetPropertyFunc ##### -->
 <para>
-
+The type of the @set_property function of #GObjectClass. 
 </para>
 
-@object: 
-@property_id: 
-@value: 
-@pspec: 
+@object: a #GObject
+@property_id: the numeric id under which the property was registered with
+   g_object_class_install_property().
+@value: the new value for the property
+@pspec: the #GParamSpec describing the property
 
 
 <!-- ##### USER_FUNCTION GObjectFinalizeFunc ##### -->
 <para>
-
+The type of the @finalize function of #GObjectClass.
 </para>
 
-@object: 
+@object: the #GObject being finalized
 
 
 <!-- ##### MACRO G_TYPE_IS_OBJECT ##### -->
 <para>
-
+Returns a boolean value of %FALSE or %TRUE indicating whether
+the passed in type id is a %G_TYPE_OBJECT or derived from it.
 </para>
 
-@type: 
+@type: Type id to check for is a %G_TYPE_OBJECT relationship.
+@Returns: %FALSE or %TRUE, indicating whether @type is a %G_TYPE_OBJECT.
 
 
 <!-- ##### MACRO G_OBJECT ##### -->
 <para>
-
+Casts a #GObject or derived pointer into a (GObject*) pointer.
+Depending on the current debugging level, this function may invoke
+certain runtime checks to identify invalid casts.
 </para>
 
-@object: 
+@object: Object which is subject to casting.
 
 
 <!-- ##### MACRO G_IS_OBJECT ##### -->
 <para>
-
+Checks whether a valid #GTypeInstance pointer is of type %G_TYPE_OBJECT.
 </para>
 
-@object: 
+@object: Instance to check for being a %G_TYPE_OBJECT.
 
 
 <!-- ##### MACRO G_OBJECT_CLASS ##### -->
 <para>
-
+Casts a derived #GObjectClass structure into a #GObjectClass structure.
 </para>
 
-@class: 
+@class: a valid #GObjectClass
 
 
 <!-- ##### MACRO G_IS_OBJECT_CLASS ##### -->
 <para>
-
+Checks whether @class "is a" valid #GObjectClass structure of type
+%G_TYPE_OBJECT or derived.
 </para>
 
-@class: 
+@class: a #GObjectClass
 
 
 <!-- ##### MACRO G_OBJECT_GET_CLASS ##### -->
 <para>
-
+Returns the class structure associated to a #GObject instance.
 </para>
 
-@object: 
+@object: a #GObject instance.
 
 
 <!-- ##### MACRO G_OBJECT_TYPE ##### -->
 <para>
-
+Return the type id of an object.
 </para>
 
-@object: 
+@object: Object to return the type id for.
+@Returns: Type id of @object.
 
 
 <!-- ##### MACRO G_OBJECT_TYPE_NAME ##### -->
 <para>
-
+Returns the name of an object's type.
 </para>
 
-@object: 
+@object: Object to return the type name for.
+@Returns: Type name of @object. The string is owned by the type system and 
+should not be freed.
 
 
 <!-- ##### MACRO G_OBJECT_CLASS_TYPE ##### -->
 <para>
-
+Return the type id of a class structure.
 </para>
 
-@class: 
+@class: a valid #GObjectClass
+@Returns: Type id of @class.
 
 
 <!-- ##### MACRO G_OBJECT_CLASS_NAME ##### -->
 <para>
-
+Return the name of a class structure's type.
 </para>
 
-@class: 
+@class: a valid #GObjectClass
+@Returns: Type name of @class. The string is owned by the type system and 
+should not be freed.
 
 
 <!-- ##### FUNCTION g_object_class_install_property ##### -->
 <para>
-
+Installs a new property. This is usually done in the class initializer.
 </para>
 
-@oclass: 
-@property_id: 
-@pspec: 
+@oclass: a #GObjectClass
+@property_id: the id for the new property
+@pspec: the #GParamSpec for the new property
 
 
 <!-- ##### FUNCTION g_object_class_find_property ##### -->
 <para>
-
+Looks up the #GParamSpec for a property of a class.
 </para>
 
-@oclass: 
-@property_name: 
-@Returns: 
+@oclass: a #GObjectClass
+@property_name: the name of the property to look up
+@Returns: the #GParamSpec for the property, or %NULL if the class doesn't have
+a property of that name
 
 
 <!-- ##### FUNCTION g_object_class_list_properties ##### -->
 <para>
-
+Returns an array of #GParamSpec* for all properties of a class.
 </para>
 
-@oclass: 
-@n_properties: 
-@Returns: 
+@oclass: a #GObjectClass
+@n_properties: return location for the length of the returned array
+@Returns: an array of #GParamSpec* which should be freed after use
 
 
 <!-- ##### FUNCTION g_object_class_override_property ##### -->
 <para>
-
-</para>
-
-@oclass: 
-@property_id: 
-@name: 
+Registers @property_id as referring to a property with the
+name @name in a parent class or in an interface implemented
+by @oclass. This allows this class to <firstterm>override</firstterm>
+a property implementation in a parent class or to provide
+the implementation of a property from an interface.
+</para>
+<note>
+<para>
+Internally, overriding is implemented by creating a property of type
+#GParamSpecOverride; generally operations that query the properties of
+the object class, such as g_object_class_find_property() or
+g_object_class_list_properties() will return the overridden
+property. However, in one case, the @construct_properties argument of
+the @constructor virtual function, the #GParamSpecOverride is passed
+instead, so that the @param_id field of the #GParamSpec will be
+correct.  For virtually all uses, this makes no difference. If you
+need to get the overridden property, you can call
+g_param_spec_get_redirect_target().
+</para>
+</note>
+
+@oclass: a #GObjectClass
+@property_id: the new property ID
+@name: the name of a property registered in a parent class or
+       in an interface of this class.
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_object_interface_install_property ##### -->
 <para>
-
-</para>
-
-@g_iface: 
-@pspec: 
+Add a property to an interface; this is only useful for interfaces
+that are added to GObject-derived types. Adding a property to an
+interface forces all objects classes with that interface to have a
+compatible property. The compatible property could be a newly
+created #GParamSpec, but normally
+g_object_class_override_property() will be used so that the object
+class only needs to provide an implementation and inherits the
+property description, default value, bounds, and so forth from the
+interface property.
+</para>
+<para>
+This function is meant to be called from the interface's default
+vtable initialization function (the @class_init member of
+#GTypeInfo.) It must not be called after after @class_init has
+been called for any object types implementing this interface.
+</para>
+
+@g_iface: any interface vtable for the interface, or the default
+ vtable for the interface.
+@pspec: the #GParamSpec for the new property
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_object_interface_find_property ##### -->
 <para>
-
+Find the #GParamSpec with the given name for an
+interface. Generally, the interface vtable passed in as @g_iface
+will be the default vtable from g_type_default_interface_ref(), or,
+if you know the interface has already been loaded,
+g_type_default_interface_peek().
 </para>
 
-@g_iface: 
-@property_name: 
-@Returns: 
+@g_iface: any interface vtable for the interface, or the default
+  vtable for the interface
+@property_name: name of a property to lookup.
+@Returns: the #GParamSpec for the property of the
+  interface with the name @property_name, or %NULL
+  if no such property exists.
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_object_interface_list_properties ##### -->
 <para>
-
+Lists the properties of an interface.Generally, the interface
+vtable passed in as @g_iface will be the default vtable from
+g_type_default_interface_ref(), or, if you know the interface has
+already been loaded, g_type_default_interface_peek().
 </para>
 
-@g_iface: 
-@n_properties_p: 
-@Returns: 
+@g_iface: any interface vtable for the interface, or the default
+ vtable for the interface
+@n_properties_p: location to store number of properties returned.
+@Returns: a pointer to an array of pointers to #GParamSpec structures.
+  The paramspecs are owned by GLib, but the array should
+  be freed with g_free() when you are done with it.
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_object_new ##### -->
 <para>
-
+Creates a new instance of a #GObject subtype and sets its properties.
+</para>
+<para>
+Construction parameters (see #G_PARAM_CONSTRUCT, #G_PARAM_CONSTRUCT_ONLY) 
+which are not explicitly specified are set to their default values.
 </para>
 
-@object_type: 
-@first_property_name: 
-@Varargs: 
-@Returns: 
+@object_type: the type id of the #GObject subtype to instantiate
+@first_property_name: the name of the first property
+@Varargs: the value of the first property, followed optionally by more
+     name/value pairs, followed by %NULL
+@Returns: a new instance of @object_type
 
 
 <!-- ##### FUNCTION g_object_newv ##### -->
 <para>
-
+Creates a new instance of a #GObject subtype and sets its properties.
+</para>
+<para>
+Construction parameters (see #G_PARAM_CONSTRUCT, #G_PARAM_CONSTRUCT_ONLY) 
+which are not explicitly specified are set to their default values.
 </para>
 
-@object_type: 
-@n_parameters: 
-@parameters: 
-@Returns: 
+@object_type: the type id of the #GObject subtype to instantiate
+@n_parameters: the length of the @parameters array
+@parameters: an array of #GParameter
+@Returns: a new instance of @object_type
 
 
 <!-- ##### STRUCT GParameter ##### -->
 <para>
-
+The <structname>GParameter</structname> struct is an auxiliary structure used
+to hand parameter name/value pairs to g_object_newv().
 </para>
 
-@name: 
-@value: 
+@name: the parameter name
+@value: the parameter value
 
 <!-- ##### FUNCTION g_object_ref ##### -->
 <para>
-
+Increases the reference count of @object.
 </para>
 
-@object: 
-@Returns: 
+@object: a #GObject
+@Returns: the same @object
 
 
 <!-- ##### FUNCTION g_object_unref ##### -->
 <para>
-
+Decreases the reference count of @object.
+When its reference count drops to 0, the object is finalized 
+(i.e. its memory is freed).
 </para>
 
-@object: 
+@object: a #GObject
 
 
 <!-- ##### FUNCTION g_object_ref_sink ##### -->
 <para>
-
+Increase the reference count of @object, and possibly remove the 
+<link linkend="floating-ref">floating</link> reference, if @object
+has a floating reference.
+</para>
+<para>
+In other words, if the object is floating, then this call "assumes 
+ownership" of the floating reference, converting it to a normal reference 
+by clearing the floating flag while leaving the reference count unchanged. 
+If the object is not floating, then this call adds a new normal reference 
+increasing the reference count by one.
 </para>
 
-@object: 
-@Returns: 
+@object: a #GObject
+@Returns: @object
+@Since: 2.10
 
 
 <!-- ##### TYPEDEF GInitiallyUnowned ##### -->
 <para>
-
+All the fields in the <structname>GInitiallyUnowned</structname> structure 
+are private to the #GInitiallyUnowned implementation and should never be 
+accessed directly.
 </para>
 
 
 <!-- ##### TYPEDEF GInitiallyUnownedClass ##### -->
 <para>
-
+The class structure for the <structname>GInitiallyUnowned</structname> type.
 </para>
 
 
 <!-- ##### MACRO G_TYPE_INITIALLY_UNOWNED ##### -->
 <para>
-
+The type for #GInitiallyUnowned.
 </para>
 
 
 
 <!-- ##### FUNCTION g_object_is_floating ##### -->
 <para>
-
+Checks wether @object has a <link linkend="floating-ref">floating</link>
+reference.
 </para>
 
-@object: 
-@Returns: 
+@object: a #GObject
+@Returns: %TRUE if @object has a floating reference
+@Since: 2.10
 
 
 <!-- ##### FUNCTION g_object_force_floating ##### -->
 <para>
-
+This function is intended for #GObject implementations to re-enforce a
+<link linkend="floating-ref">floating</link> object reference.
+Doing this is seldomly required, all
+#GInitiallyUnowned<!-- -->s are created with a floating reference which 
+usually just needs to be sunken by calling g_object_ref_sink().
 </para>
 
-@object: 
+@object: a #GObject
+@Since: 2.10
 
 
 <!-- ##### USER_FUNCTION GWeakNotify ##### -->
 <para>
-
+A #GWeakNotify function can be added to an object as a callback that gets
+triggered when the object is finalized. Since the object is already being
+finalized when the #GWeakNotify is called, there's not much you could do 
+with the object, apart from e.g. using its adress as hash-index or the like. 
 </para>
 
-@data: 
-@where_the_object_was: 
+@data: data that was provided when the weak reference was established
+@where_the_object_was: the object being finalized
 
 
 <!-- ##### FUNCTION g_object_weak_ref ##### -->
 <para>
-
+Adds a weak reference callback to an object. Weak references are used for
+notification when an object is finalized. They are called "weak references" 
+because they allow you to safely hold a pointer to an object without calling 
+g_object_ref() (g_object_ref() adds a strong reference, that is, forces the 
+object to stay alive).
 </para>
 
-@object: 
-@notify: 
-@data: 
+@object: #GObject to reference weakly
+@notify: callback to invoke before the object is freed
+@data: extra data to pass to notify
 
 
 <!-- ##### FUNCTION g_object_weak_unref ##### -->
 <para>
-
+Removes a weak reference callback to an object.
 </para>
 
-@object: 
-@notify: 
-@data: 
+@object: #GObject to remove a weak reference from
+@notify: callback to search for
+@data: data to search for
 
 
 <!-- ##### FUNCTION g_object_add_weak_pointer ##### -->
 <para>
-
+Adds a weak reference from weak_pointer to @object to indicate that
+the pointer located at @weak_pointer_location is only valid during the 
+lifetime of @object. When the @object is finalized, @weak_pointer will 
+be set to %NULL.
 </para>
 
-@object: 
-@weak_pointer_location: 
+@object: The object that should be weak referenced.
+@weak_pointer_location: The memory address of a pointer.
 
 
 <!-- ##### FUNCTION g_object_remove_weak_pointer ##### -->
 <para>
-
+Removes a weak reference from @object that was previously added
+using g_object_add_weak_pointer(). The @weak_pointer_location has
+to match the one used with g_object_add_weak_pointer().
 </para>
 
-@object: 
-@weak_pointer_location: 
+@object: The object that is weak referenced.
+@weak_pointer_location: The memory address of a pointer.
 
 
 <!-- ##### USER_FUNCTION GToggleNotify ##### -->
 <para>
-
+A callback function used for notification when the state
+of a toggle reference changes. See g_object_add_toggle_ref().
 </para>
 
-@data: 
-@object: 
-@is_last_ref: 
+@data: Callback data passed to g_object_add_toggle_ref()
+@object: The object on which g_object_add_toggle_ref() was called.
+@is_last_ref: %TRUE if the toggle reference is now the
+  last reference to the object. %FALSE if the toggle
+  reference was the last reference and there are now other
+  references.
 
 
 <!-- ##### FUNCTION g_object_add_toggle_ref ##### -->
 <para>
-
-</para>
-
-@object: 
-@notify: 
-@data: 
+Increases the reference count of the object by one and sets a
+callback to be called when all other references to the object are
+dropped, or when this is already the last reference to the object
+and another reference is established.
+</para>
+<para>
+This functionality is intended for binding @object to a proxy
+object managed by another memory manager. This is done with two
+paired references: the strong reference added by
+g_object_add_toggle_ref() and a reverse reference to the proxy
+object which is either a strong reference or weak reference.
+</para>
+<para>
+The setup is that when there are no other references to @object,
+only a weak reference is held in the reverse direction from @object
+to the proxy object, but when there are other references held to
+@object, a strong reference is held. The @notify callback is called
+when the reference from @object to the proxy object should be
+<firstterm>toggled</firstterm> from strong to weak (@is_last_ref
+true) or weak to strong (@is_last_ref false).
+</para>
+<para>
+Since a (normal) reference must be held to the object before
+calling g_object_toggle_ref(), the initial state of the reverse
+link is always strong.
+</para>
+<para>
+Multiple toggle references may be added to the same gobject,
+however if there are multiple toggle references to an object, none
+of them will ever be notified until all but one are removed.  For
+this reason, you should only ever use a toggle reference if there
+is important state in the proxy object.
+</para>
+
+@object: a #GObject
+@notify: a function to call when this reference is the
+  last reference to the object, or is no longer
+  the last reference.
+@data: data to pass to @notify
+@Since: 2.8
 
 
 <!-- ##### FUNCTION g_object_remove_toggle_ref ##### -->
 <para>
-
+Removes a reference added with g_object_add_toggle_ref(). The
+reference count of the object is decreased by one.
 </para>
 
-@object: 
-@notify: 
-@data: 
+@object: a #GObject
+@notify: a function to call when this reference is the
+  last reference to the object, or is no longer
+  the last reference.
+@data: data to pass to @notify
+@Since: 2.8
 
 
 <!-- ##### FUNCTION g_object_connect ##### -->
 <para>
-
+A convenience function to connect multiple signals at once.
 </para>
-
-@object: 
-@signal_spec: 
-@Varargs: 
-@Returns: 
+<para>
+The signal specs expected by this function have the form
+"modifier::signal_name", where modifier can be one of the following:
+<variablelist>
+<varlistentry>
+<term>signal</term>
+<listitem><para>
+equivalent to <literal>g_signal_connect_data (...)</literal>
+</para></listitem>
+</varlistentry>
+<varlistentry>
+<term>object_signal</term>
+<term>object-signal</term>
+<listitem><para>
+equivalent to <literal>g_signal_connect_object (...)</literal>
+</para></listitem>
+</varlistentry>
+<varlistentry>
+<term>swapped_signal</term>
+<term>swapped-signal</term>
+<listitem><para>
+equivalent to <literal>g_signal_connect_data (..., G_CONNECT_SWAPPED)</literal>
+</para></listitem>
+</varlistentry>
+<varlistentry>
+<term>swapped_object_signal</term>
+<term>swapped-object-signal</term>
+<listitem><para>
+equivalent to <literal>g_signal_connect_object (..., G_CONNECT_SWAPPED)</literal>
+</para></listitem>
+</varlistentry>
+<varlistentry>
+<term>signal_after</term>
+<term>signal-after</term>
+<listitem><para>
+equivalent to <literal>g_signal_connect_data (..., G_CONNECT_AFTER)</literal>
+</para></listitem>
+</varlistentry>
+<varlistentry>
+<term>object_signal_after</term>
+<term>object-signal-after</term>
+<listitem><para>
+equivalent to <literal>g_signal_connect_object (..., G_CONNECT_AFTER)</literal>
+</para></listitem>
+</varlistentry>
+<varlistentry>
+<term>swapped_signal_after</term>
+<term>swapped-signal-after</term>
+<listitem><para>
+equivalent to <literal>g_signal_connect_data (..., G_CONNECT_SWAPPED | G_CONNECT_AFTER)</literal>
+</para></listitem>
+</varlistentry>
+<varlistentry>
+<term>swapped_object_signal_after</term>
+<term>swapped-object-signal-after</term>
+<listitem><para>
+equivalent to <literal>g_signal_connect_object (..., G_CONNECT_SWAPPED | G_CONNECT_AFTER)</literal>
+</para></listitem>
+</varlistentry>
+</variablelist>
+</para>
+<informalexample>
+<programlisting>
+  menu->toplevel = g_object_connect (g_object_new (GTK_TYPE_WINDOW,
+						   "type", GTK_WINDOW_POPUP,
+						   "child", menu,
+						   NULL),
+				     "signal::event", gtk_menu_window_event, menu,
+				     "signal::size_request", gtk_menu_window_size_request, menu,
+				     "signal::destroy", gtk_widget_destroyed, &amp;menu-&gt;toplevel,
+				     NULL);
+</programlisting>
+</informalexample>
+
+@object: a #GObject
+@signal_spec: the spec for the first signal
+@Varargs: #GCallback for the first signal, followed by data for the first signal, 
+          followed optionally by more signal spec/callback/data triples, 
+          followed by %NULL
+@Returns: @object
 
 
 <!-- ##### FUNCTION g_object_disconnect ##### -->
 <para>
-
+A convenience function to disconnect multiple signals at once.
+</para>
+<para>
+The signal specs expected by this function have the form "any_signal", which
+means to disconnect any signal with matching callback and data, or 
+"any_signal::signal_name", which only disconnects the signal named "signal_name". 
 </para>
 
-@object: 
-@signal_spec: 
-@Varargs: 
+@object: a #GObject
+@signal_spec: the spec for the first signal
+@Varargs: #GCallback for the first signal, followed by data for the first signal, 
+          followed optionally by more signal spec/callback/data triples, 
+          followed by %NULL
 
 
 <!-- ##### FUNCTION g_object_set ##### -->
 <para>
-
+Sets properties on an object.
 </para>
 
-@object: 
-@first_property_name: 
-@Varargs: 
+@object: a #GObject
+@first_property_name: name of the first property to set
+@Varargs: value for the first property, followed optionally by more
+          name/value pairs, followed by %NULL
 
 
 <!-- ##### FUNCTION g_object_get ##### -->
 <para>
-
+Gets properties of an object.
 </para>
-
-@object: 
-@first_property_name: 
-@Varargs: 
+<para>
+In general, a copy is made of the property contents and the caller is
+responsible for freeing the memory in the appropriate manner for the type, 
+for instance by calling g_free() or g_object_unref().
+</para>
+<example>
+<title>Using g_object_get(<!-- -->)</title>
+<para>
+An example of using g_object_get() to get the contents
+of three properties - one of type #G_TYPE_INT,
+one of type #G_TYPE_STRING, and one of type #G_TYPE_OBJECT:
+</para>
+<programlisting>
+ gint intval;
+ gchar *strval;
+ GObject *objval; 
+ 
+ g_object_get (my_object,
+               "intproperty", &amp;intval,
+               "strproperty", &amp;strval,
+               "objproperty", &amp;objval,
+               NULL);
+
+ /* Do something with intval, strval, objval */
+ 
+ g_free (strval);
+ g_object_unref (objval);
+</programlisting>
+</example>
+
+@object: a #GObject
+@first_property_name: name of the first property to get
+@Varargs: return location for the first property, followed optionally by more
+          name/return location pairs, followed by %NULL
 
 
 <!-- ##### FUNCTION g_object_notify ##### -->
 <para>
-
+Emits a "notify" signal for the property @property_name on @object. 
 </para>
 
-@object: 
-@property_name: 
+@object: a #GObject
+@property_name: the name of a property installed on the class of @object.
 
 
 <!-- ##### FUNCTION g_object_freeze_notify ##### -->
 <para>
-
+Stops emission of "notify" signals on @object. The signals are
+queued until g_object_thaw_notify() is called on @object. 
+</para>
+<para>
+This is necessary for accessors that modify multiple properties to prevent
+premature notification while the object is still being modified.
 </para>
 
-@object: 
+@object: a #GObject
 
 
 <!-- ##### FUNCTION g_object_thaw_notify ##### -->
 <para>
-
+Reverts the effect of a previous call to g_object_freeze_notify().
+This causes all queued "notify" signals on @object to be emitted.
 </para>
 
-@object: 
+@object: a #GObject
 
 
 <!-- ##### FUNCTION g_object_get_data ##### -->
 <para>
-
+Gets a named field from the objects table of associations (see g_object_set_data()).
 </para>
 
-@object: 
-@key: 
-@Returns: 
+@object: #GObject containing the associations
+@key: name of the key for that association
+@Returns: the data if found, or %NULL if no such data exists.
 
 
 <!-- ##### FUNCTION g_object_set_data ##### -->
 <para>
-
+Each object carries around a table of associations from
+strings to pointers.  This function lets you set an association.
+</para>
+<para>
+If the object already had an association with that name,
+the old association will be destroyed.
 </para>
 
-@object: 
-@key: 
-@data: 
+@object: #GObject containing the associations.
+@key: name of the key
+@data: data to associate with that key
 
 
 <!-- ##### FUNCTION g_object_set_data_full ##### -->
 <para>
-
+Like g_object_set_data() except it adds notification
+for when the association is destroyed, either by setting it 
+to a different value or when the object is destroyed.
+</para>
+<para>
+Note that the @destroy callback is not called if @data is %NULL.
 </para>
 
-@object: 
-@key: 
-@data: 
-@destroy: 
+@object: #GObject containing the associations
+@key: name of the key
+@data: data to associate with that key
+@destroy: function to call when the association is destroyed
 
 
 <!-- ##### FUNCTION g_object_steal_data ##### -->
 <para>
-
+Remove a specified datum from the object's data associations,
+without invoking the association's destroy handler.
 </para>
 
-@object: 
-@key: 
-@Returns: 
+@object: #GObject containing the associations
+@key: name of the key
+@Returns: the data if found, or %NULL if no such data exists.
 
 
 <!-- ##### FUNCTION g_object_get_qdata ##### -->
 <para>
-
+This function gets back user data pointers stored via
+g_object_set_qdata().
 </para>
 
-@object: 
-@quark: 
-@Returns: 
+@object:  The GObject to get a stored user data pointer from
+@quark:   A #GQuark, naming the user data pointer
+@Returns: The user data pointer set, or %NULL
 
 
 <!-- ##### FUNCTION g_object_set_qdata ##### -->
 <para>
-
+This sets an opaque, named pointer on an object.
+The name is specified through a #GQuark (retrived e.g. via
+g_quark_from_static_string()), and the pointer
+can be gotten back from the @object with g_object_get_qdata()
+until the @object is finalized.
+Setting a previously set user data pointer, overrides (frees)
+the old pointer set, using #NULL as pointer essentially
+removes the data stored.
 </para>
 
-@object: 
-@quark: 
-@data: 
+@object: The GObject to set store a user data pointer
+@quark:  A #GQuark, naming the user data pointer
+@data:   An opaque user data pointer
 
 
 <!-- ##### FUNCTION g_object_set_qdata_full ##### -->
 <para>
-
+This function works like g_object_set_qdata(), but in addition,
+a void (*destroy) (gpointer) function may be specified which is
+called with @data as argument when the @object is finalized, or
+the data is being overwritten by a call to g_object_set_qdata()
+with the same @quark.
 </para>
 
-@object: 
-@quark: 
-@data: 
-@destroy: 
+@object:  The GObject to set store a user data pointer
+@quark:   A #GQuark, naming the user data pointer
+@data:    An opaque user data pointer
+@destroy: Function to invoke with @data as argument, when @data needs to be freed
 
 
 <!-- ##### FUNCTION g_object_steal_qdata ##### -->
 <para>
-
-</para>
-
-@object: 
-@quark: 
-@Returns: 
+This function gets back user data pointers stored via
+g_object_set_qdata() and removes the @data from object
+without invoking it's destroy() function (if any was
+set).
+Usually, calling this function is only required to update
+user data pointers with a destroy notifier, for example:
+<programlisting>
+void
+object_add_to_user_list (GObject     *object,
+                         const gchar *new_string)
+{
+  /* the quark, naming the object data */
+  GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
+  /* retrive the old string list */
+  GList *list = g_object_steal_qdata (object, quark_string_list);
+  
+  /* prepend new string */
+  list = g_list_prepend (list, g_strdup (new_string));
+  /* this changed 'list', so we need to set it again */
+  g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
+}
+static void
+free_string_list (gpointer data)
+{
+  GList *node, *list = data;
+  
+  for (node = list; node; node = node->next)
+    g_free (node->data);
+  g_list_free (list);
+}
+</programlisting>
+Using g_object_get_qdata() in the above example, instead of g_object_steal_qdata()
+would have left the destroy function set, and thus the partial string list would
+have been freed upon g_object_set_qdata_full().
+</para>
+
+@object:  The GObject to get a stored user data pointer from
+@quark:   A #GQuark, naming the user data pointer
+@Returns: The user data pointer set, or %NULL
 
 
 <!-- ##### FUNCTION g_object_set_property ##### -->
 <para>
-
+Sets a property on an object.
 </para>
 
-@object: 
-@property_name: 
-@value: 
+@object: a #GObject
+@property_name: the name of the property to set
+@value: the value
 
 
 <!-- ##### FUNCTION g_object_get_property ##### -->
 <para>
-
+Gets a property of an object.
+</para>
+<para>
+In general, a copy is made of the property contents and the caller is
+responsible for freeing the memory by calling g_value_unset().
+</para>
+<para>
+Note that g_object_get_property() is really intended for language
+bindings, g_object_get() is much more convenient for C programming.
 </para>
 
-@object: 
-@property_name: 
-@value: 
+@object: a #GObject
+@property_name: the name of the property to get
+@value: return location for the property value
 
 
 <!-- ##### FUNCTION g_object_new_valist ##### -->
 <para>
-
+Creates a new instance of a #GObject subtype and sets its properties.
+</para>
+<para>
+Construction parameters (see #G_PARAM_CONSTRUCT, #G_PARAM_CONSTRUCT_ONLY) 
+which are not explicitly specified are set to their default values.
 </para>
 
-@object_type: 
-@first_property_name: 
-@var_args: 
-@Returns: 
+@object_type: the type id of the #GObject subtype to instantiate
+@first_property_name: the name of the first property
+@var_args: the value of the first property, followed optionally by more
+     name/value pairs, followed by %NULL
+@Returns: a new instance of @object_type
 
 
 <!-- ##### FUNCTION g_object_set_valist ##### -->
 <para>
-
+Sets properties on an object.
 </para>
 
-@object: 
-@first_property_name: 
-@var_args: 
+@object: a #GObject
+@first_property_name: name of the first property to set
+@var_args: value for the first property, followed optionally by more
+           name/value pairs, followed by %NULL
 
 
 <!-- ##### FUNCTION g_object_get_valist ##### -->
 <para>
-
+Gets properties of an object. 
+</para>
+<para>
+In general, a copy is made of the property contents and the caller is
+responsible for freeing the memory in the appropriate manner for the type, 
+for instance by calling g_free() or g_object_unref().
+</para>
+<para>
+See g_object_get().
 </para>
 
-@object: 
-@first_property_name: 
-@var_args: 
+@object: a #GObject
+@first_property_name: name of the first property to get
+@var_args: return location for the first property, followed optionally by more
+           name/return location pairs, followed by %NULL
 
 
 <!-- ##### FUNCTION g_object_watch_closure ##### -->
 <para>
-
+This function essentially limits the life time of the @closure
+to the life time of the object. That is, when the object is finalized,
+the @closure is invalidated by calling g_closure_invalidate() on it,
+in order to prevent invocations of the closure with a finalized 
+(nonexisting) object. Also, g_object_ref() and g_object_unref() are added
+as marshal guards to the @closure, to ensure that an extra reference
+count is held on @object during invocation of the @closure.
+Usually, this function will be called on closures that use this @object
+as closure data.
 </para>
 
-@object: 
-@closure: 
+@object:  GObject restricting lifetime of @closure
+@closure: GClosure to watch
 
 
 <!-- ##### FUNCTION g_object_run_dispose ##### -->
 <para>
-
+Releases all references to other objects. This can be used to break 
+reference cycles.
 </para>
+<note><para>
+This functions should only be called from object system implementations.
+</para></note>
 
-@object: 
+@object: a #GObject
 
 
 <!-- ##### MACRO G_OBJECT_WARN_INVALID_PROPERTY_ID ##### -->
 <para>
-
+This macro should be used to emit a standard warning about unexpected 
+properties in set_property() and get_property() implementations.
 </para>
 
-@object: 
-@property_id: 
-@pspec: 
+@object: the #GObject on which set_property() or get_property() was called
+@property_id: the numeric id of the property
+@pspec: the #GParamSpec of the property
 
 
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/param_value_types.sgml glib/docs/reference/gobject/tmpl/param_value_types.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/param_value_types.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/param_value_types.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -1,1657 +1,1806 @@
 <!-- ##### SECTION Title ##### -->
-Standard Parameter and Value Types
+Parameters and Values
 
 <!-- ##### SECTION Short_Description ##### -->
-
+Standard Parameter and Value Types
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
+#GValue provides an abstract container structure which can be copied,
+transformed and compared while holding a value of any (derived) type, which
+is registered as a #GType with a #GTypeValueTable in its #GTypeInfo structure.
+Parameter specifications for most value types can be created as
+#GParamSpec derived instances, to implement e.g. #GObject properties which
+operate on #GValue containers.
+</para>
+<para>
+Parameter names need to start with a letter (a-z or A-Z). Subsequent
+characters can be letters, numbers or a '-'.
+All other characters are replaced by a '-' during construction.
 </para>
-
 
 <!-- ##### SECTION See_Also ##### -->
 <para>
-
+#GParamSpec, #GValue, g_object_class_install_property().
 </para>
 
-
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_BOOLEAN ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_BOOLEAN.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_BOOLEAN ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecBoolean.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_BOOLEAN ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_BOOLEAN.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_BOOLEAN ##### -->
 <para>
-
+The #GType of #GParamSpecBoolean.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecBoolean ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for boolean properties.
 </para>
 
-@parent_instance: 
-@default_value: 
+@parent_instance: private #GParamSpec portion
+@default_value:   default value for the property specified
 
 <!-- ##### FUNCTION g_param_spec_boolean ##### -->
 <para>
-
+Creates a new #GParamSpecBoolean instance specifying a %G_TYPE_BOOLEAN 
+property.
+</para>
+<para> 
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_boolean ##### -->
 <para>
-
+Set the contents of a %G_TYPE_BOOLEAN #GValue to @v_boolean.
 </para>
 
-@value: 
-@v_boolean: 
+@value:     a valid #GValue of type %G_TYPE_BOOLEAN
+@v_boolean: boolean value to be set
 
 
 <!-- ##### FUNCTION g_value_get_boolean ##### -->
 <para>
-
+Get the contents of a %G_TYPE_BOOLEAN #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_BOOLEAN
+@Returns: boolean contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_CHAR ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_CHAR.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_CHAR ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecChar.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_CHAR ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_CHAR.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_CHAR ##### -->
 <para>
-
+The #GType of #GParamSpecChar.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecChar ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for character properties.
 </para>
 
-@parent_instance: 
-@minimum: 
-@maximum: 
-@default_value: 
+@parent_instance: private #GParamSpec portion
+@minimum:         minimum value for the property specified
+@maximum:         maximum value for the property specified
+@default_value:   default value for the property specified
 
 <!-- ##### FUNCTION g_param_spec_char ##### -->
 <para>
-
+Creates a new #GParamSpecChar instance specifying a %G_TYPE_CHAR property.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@minimum: 
-@maximum: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@minimum:       minimum value for the property specified
+@maximum:       maximum value for the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_char ##### -->
 <para>
-
+Set the contents of a %G_TYPE_CHAR #GValue to @v_char.
 </para>
 
-@value: 
-@v_char: 
+@value:  a valid #GValue of type %G_TYPE_CHAR
+@v_char: character value to be set
 
 
 <!-- ##### FUNCTION g_value_get_char ##### -->
 <para>
-
+Get the contents of a %G_TYPE_CHAR #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_CHAR
+@Returns: character contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_UCHAR ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_UCHAR.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_UCHAR ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecUChar.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_UCHAR ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_UCHAR.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_UCHAR ##### -->
 <para>
-
+The #GType of #GParamSpecUChar.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecUChar ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for unsigned character properties.
 </para>
 
-@parent_instance: 
-@minimum: 
-@maximum: 
-@default_value: 
+@parent_instance: private #GParamSpec portion
+@minimum:         minimum value for the property specified
+@maximum:         maximum value for the property specified
+@default_value:   default value for the property specified
 
 <!-- ##### FUNCTION g_param_spec_uchar ##### -->
 <para>
-
+Creates a new #GParamSpecUChar instance specifying a %G_TYPE_UCHAR property.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@minimum: 
-@maximum: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@minimum:       minimum value for the property specified
+@maximum:       maximum value for the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_uchar ##### -->
 <para>
-
+Set the contents of a %G_TYPE_UCHAR #GValue to @v_uchar.
 </para>
 
-@value: 
-@v_uchar: 
+@value:   a valid #GValue of type %G_TYPE_UCHAR
+@v_uchar: unsigned character value to be set
 
 
 <!-- ##### FUNCTION g_value_get_uchar ##### -->
 <para>
-
+Get the contents of a %G_TYPE_UCHAR #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_UCHAR
+@Returns: unsigned character contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_INT ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_INT.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_INT ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecInt.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_INT ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_INT.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_INT ##### -->
 <para>
-
+The #GType of #GParamSpecInt.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecInt ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for integer properties.
 </para>
 
-@parent_instance: 
-@minimum: 
-@maximum: 
-@default_value: 
+@parent_instance: private #GParamSpec portion
+@minimum:         minimum value for the property specified
+@maximum:         maximum value for the property specified
+@default_value:   default value for the property specified
 
 <!-- ##### FUNCTION g_param_spec_int ##### -->
 <para>
-
+Creates a new #GParamSpecInt instance specifying a %G_TYPE_INT property.
+</para>
+<para>
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@minimum: 
-@maximum: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@minimum:       minimum value for the property specified
+@maximum:       maximum value for the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_int ##### -->
 <para>
-
+Set the contents of a %G_TYPE_INT #GValue to @v_int.
 </para>
 
-@value: 
-@v_int: 
+@value: a valid #GValue of type %G_TYPE_INT
+@v_int: integer value to be set
 
 
 <!-- ##### FUNCTION g_value_get_int ##### -->
 <para>
-
+Get the contents of a %G_TYPE_INT #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_INT
+@Returns: integer contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_UINT ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_UINT.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_UINT ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecUInt.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_UINT ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_UINT.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_UINT ##### -->
 <para>
-
+The #GType of #GParamSpecUInt.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecUInt ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for unsigned integer properties.
 </para>
 
-@parent_instance: 
-@minimum: 
-@maximum: 
-@default_value: 
+@parent_instance: private #GParamSpec portion
+@minimum:         minimum value for the property specified
+@maximum:         maximum value for the property specified
+@default_value:   default value for the property specified
 
 <!-- ##### FUNCTION g_param_spec_uint ##### -->
 <para>
-
+Creates a new #GParamSpecUInt instance specifying a %G_TYPE_UINT property.
+</para>
+<para>
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@minimum: 
-@maximum: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@minimum:       minimum value for the property specified
+@maximum:       maximum value for the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns:  a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_uint ##### -->
 <para>
-
+Set the contents of a %G_TYPE_UINT #GValue to @v_uint.
 </para>
 
-@value: 
-@v_uint: 
+@value:  a valid #GValue of type %G_TYPE_UINT
+@v_uint: unsigned integer value to be set
 
 
 <!-- ##### FUNCTION g_value_get_uint ##### -->
 <para>
-
+Get the contents of a %G_TYPE_UINT #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_UINT
+@Returns: unsigned integer contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_LONG ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_LONG.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_LONG ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecLong.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_LONG ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_LONG.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_LONG ##### -->
 <para>
-
+The #GType of #GParamSpecLong.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecLong ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for long integer properties.
 </para>
 
-@parent_instance: 
-@minimum: 
-@maximum: 
-@default_value: 
+@parent_instance: private #GParamSpec portion
+@minimum:         minimum value for the property specified
+@maximum:         maximum value for the property specified
+@default_value:   default value for the property specified
 
 <!-- ##### FUNCTION g_param_spec_long ##### -->
 <para>
-
+Creates a new #GParamSpecLong instance specifying a %G_TYPE_LONG property.
+</para>
+<para> 
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@minimum: 
-@maximum: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@minimum:       minimum value for the property specified
+@maximum:       maximum value for the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_long ##### -->
 <para>
-
+Set the contents of a %G_TYPE_LONG #GValue to @v_long.
 </para>
 
-@value: 
-@v_long: 
+@value:  a valid #GValue of type %G_TYPE_LONG
+@v_long: long integer value to be set
 
 
 <!-- ##### FUNCTION g_value_get_long ##### -->
 <para>
-
+Get the contents of a %G_TYPE_LONG #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_LONG
+@Returns: long integer contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_ULONG ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_ULONG.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_ULONG ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecULong.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_ULONG ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_ULONG.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_ULONG ##### -->
 <para>
-
+The #GType of #GParamSpecULong.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecULong ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for unsigned long integer properties.
 </para>
 
-@parent_instance: 
-@minimum: 
-@maximum: 
-@default_value: 
+@parent_instance: private #GParamSpec portion
+@minimum:         minimum value for the property specified
+@maximum:         maximum value for the property specified
+@default_value:   default value for the property specified
 
 <!-- ##### FUNCTION g_param_spec_ulong ##### -->
 <para>
-
+Creates a new #GParamSpecULong instance specifying a %G_TYPE_ULONG property.
+</para>
+<para>
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@minimum: 
-@maximum: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@minimum:       minimum value for the property specified
+@maximum:       maximum value for the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns:   a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_ulong ##### -->
 <para>
-
+Set the contents of a %G_TYPE_ULONG #GValue to @v_ulong.
 </para>
 
-@value: 
-@v_ulong: 
+@value:   a valid #GValue of type %G_TYPE_ULONG
+@v_ulong: unsigned long integer value to be set
 
 
 <!-- ##### FUNCTION g_value_get_ulong ##### -->
 <para>
-
+Get the contents of a %G_TYPE_ULONG #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_ULONG
+@Returns: unsigned long integer contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_INT64 ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_INT64.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_INT64 ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecInt64.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_INT64 ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_INT64.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_INT64 ##### -->
 <para>
-
+The #GType of #GParamSpecInt64.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecInt64 ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for 64bit integer properties.
 </para>
 
-@parent_instance: 
-@minimum: 
-@maximum: 
-@default_value: 
+@parent_instance: private #GParamSpec portion
+@minimum:         minimum value for the property specified
+@maximum:         maximum value for the property specified
+@default_value:   default value for the property specified
 
 <!-- ##### FUNCTION g_param_spec_int64 ##### -->
 <para>
-
+Creates a new #GParamSpecInt64 instance specifying a %G_TYPE_INT64 property.
+</para>
+<para>
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@minimum: 
-@maximum: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@minimum:       minimum value for the property specified
+@maximum:       maximum value for the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_int64 ##### -->
 <para>
-
+Set the contents of a %G_TYPE_INT64 #GValue to @v_int64.
 </para>
 
-@value: 
-@v_int64: 
+@value:  a valid #GValue of type %G_TYPE_INT64
+@v_int64: 64bit integer value to be set
 
 
 <!-- ##### FUNCTION g_value_get_int64 ##### -->
 <para>
-
+Get the contents of a %G_TYPE_INT64 #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_INT64
+@Returns: 64bit integer contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_UINT64 ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_UINT64.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_UINT64 ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecUInt64.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_UINT64 ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_UINT64.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_UINT64 ##### -->
 <para>
-
+The #GType of #GParamSpecUInt64.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecUInt64 ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for unsigned 64bit integer properties.
 </para>
 
-@parent_instance: 
-@minimum: 
-@maximum: 
-@default_value: 
+@parent_instance: private #GParamSpec portion
+@minimum:         minimum value for the property specified
+@maximum:         maximum value for the property specified
+@default_value:   default value for the property specified
 
 <!-- ##### FUNCTION g_param_spec_uint64 ##### -->
 <para>
-
+Creates a new #GParamSpecUInt64 instance specifying a %G_TYPE_UINT64 
+property.
+</para>
+<para>
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@minimum: 
-@maximum: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@minimum:       minimum value for the property specified
+@maximum:       maximum value for the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_uint64 ##### -->
 <para>
-
+Set the contents of a %G_TYPE_UINT64 #GValue to @v_uint64.
 </para>
 
-@value: 
-@v_uint64: 
+@value:   a valid #GValue of type %G_TYPE_UINT64
+@v_uint64: unsigned 64bit integer value to be set
 
 
 <!-- ##### FUNCTION g_value_get_uint64 ##### -->
 <para>
-
+Get the contents of a %G_TYPE_UINT64 #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_UINT64
+@Returns: unsigned 64bit integer contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_FLOAT ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_FLOAT.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_FLOAT ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecFloat.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_FLOAT ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_FLOAT.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_FLOAT ##### -->
 <para>
-
+The #GType of #GParamSpecFloat.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecFloat ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for float properties.
 </para>
 
-@parent_instance: 
-@minimum: 
-@maximum: 
-@default_value: 
-@epsilon: 
+@parent_instance: private #GParamSpec portion
+@minimum:         minimum value for the property specified
+@maximum:         maximum value for the property specified
+@default_value:   default value for the property specified
+@epsilon:         values closer than @epsilon will be considered identical
+                  by g_param_values_cmp(); the default value is 1e-30.
 
 <!-- ##### FUNCTION g_param_spec_float ##### -->
 <para>
-
+Creates a new #GParamSpecFloat instance specifying a %G_TYPE_FLOAT property.
+</para>
+<para> 
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@minimum: 
-@maximum: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@minimum:       minimum value for the property specified
+@maximum:       maximum value for the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_float ##### -->
 <para>
-
+Set the contents of a %G_TYPE_FLOAT #GValue to @v_float.
 </para>
 
-@value: 
-@v_float: 
+@value:     a valid #GValue of type %G_TYPE_FLOAT
+@v_float: float value to be set
 
 
 <!-- ##### FUNCTION g_value_get_float ##### -->
 <para>
-
+Get the contents of a %G_TYPE_FLOAT #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_FLOAT
+@Returns: float contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_DOUBLE ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_DOUBLE.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_DOUBLE ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecDouble.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_DOUBLE ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_DOUBLE.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_DOUBLE ##### -->
 <para>
-
+The #GType of #GParamSpecDouble.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecDouble ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for double properties.
 </para>
 
-@parent_instance: 
-@minimum: 
-@maximum: 
-@default_value: 
-@epsilon: 
+@parent_instance: private #GParamSpec portion
+@minimum:         minimum value for the property specified
+@maximum:         maximum value for the property specified
+@default_value:   default value for the property specified
+@epsilon:         values closer than @epsilon will be considered identical
+                  by g_param_values_cmp(); the default value is 1e-90.
 
 <!-- ##### FUNCTION g_param_spec_double ##### -->
 <para>
-
+Creates a new #GParamSpecDouble instance specifying a %G_TYPE_DOUBLE 
+property.
+</para>
+<para> 
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@minimum: 
-@maximum: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@minimum:       minimum value for the property specified
+@maximum:       maximum value for the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns:  a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_double ##### -->
 <para>
-
+Set the contents of a %G_TYPE_DOUBLE #GValue to @v_double.
 </para>
 
-@value: 
-@v_double: 
+@value:     a valid #GValue of type %G_TYPE_DOUBLE
+@v_double: double value to be set
 
 
 <!-- ##### FUNCTION g_value_get_double ##### -->
 <para>
-
+Get the contents of a %G_TYPE_DOUBLE #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_DOUBLE
+@Returns: double contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_ENUM ##### -->
 <para>
-
+Returns whether the given #GParamSpec is of type %G_TYPE_PARAM_ENUM.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_ENUM ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecEnum.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_ENUM ##### -->
 <para>
-
+Return whether the given #GValue can hold values derived from type %G_TYPE_ENUM.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_ENUM ##### -->
 <para>
-
+The #GType of #GParamSpecEnum.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecEnum ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for enum 
+properties.
 </para>
 
-@parent_instance: 
-@enum_class: 
-@default_value: 
+@parent_instance: private #GParamSpec portion
+@enum_class: the #GEnumClass for the enum
+@default_value:   default value for the property specified
 
 <!-- ##### FUNCTION g_param_spec_enum ##### -->
 <para>
-
+Creates a new #GParamSpecEnum instance specifying a %G_TYPE_ENUM
+property.
+</para>
+<para> 
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@enum_type: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@enum_type:     a #GType derived from %G_TYPE_ENUM
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns:  a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_enum ##### -->
 <para>
-
+Set the contents of a %G_TYPE_ENUM #GValue to @v_enum.
 </para>
 
-@value: 
-@v_enum: 
+@value:  a valid #GValue whose type is derived from %G_TYPE_ENUM
+@v_enum: enum value to be set
 
 
 <!-- ##### FUNCTION g_value_get_enum ##### -->
 <para>
-
+Get the contents of a %G_TYPE_ENUM #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue whose type is derived from %G_TYPE_ENUM
+@Returns: enum contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_FLAGS ##### -->
 <para>
-
+Returns whether the given #GParamSpec is of type %G_TYPE_PARAM_FLAGS.
 </para>
 
-@pspec: 
+@pspec:  a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_FLAGS ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecFlags.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_FLAGS ##### -->
 <para>
-
+Returns whether the given #GValue can hold values derived from type %G_TYPE_FLAGS.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_FLAGS ##### -->
 <para>
-
+The #GType of #GParamSpecFlags.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecFlags ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for flags
+properties.
 </para>
 
-@parent_instance: 
-@flags_class: 
-@default_value: 
+@parent_instance: private #GParamSpec portion
+@flags_class: the #GFlagsClass for the flags
+@default_value:   default value for the property specified
 
 <!-- ##### FUNCTION g_param_spec_flags ##### -->
 <para>
-
+Creates a new #GParamSpecEnum instance specifying a %G_TYPE_FLAGS
+property.
+</para>
+<para> 
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@flags_type: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@flags_type:     a #GType derived from %G_TYPE_FLAGS
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns:  a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_flags ##### -->
 <para>
-
+Set the contents of a %G_TYPE_FLAGS #GValue to @v_flags.
 </para>
 
-@value: 
-@v_flags: 
+@value:  a valid #GValue whose type is derived from %G_TYPE_FLAGS
+@v_flags: flags value to be set
 
 
 <!-- ##### FUNCTION g_value_get_flags ##### -->
 <para>
-
+Get the contents of a %G_TYPE_FLAGS #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue whose type is derived from %G_TYPE_FLAGS
+@Returns: flags contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_STRING ##### -->
 <para>
-
+Returns whether the given #GParamSpec is of type %G_TYPE_PARAM_STRING.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_STRING ##### -->
 <para>
-
+Casts a #GParamSpec instance into a #GParamSpecString.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_STRING ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_STRING.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_STRING ##### -->
 <para>
-
+The #GType of #GParamSpecString.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecString ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for string
+properties.
 </para>
 
-@parent_instance: 
-@default_value: 
-@cset_first: 
-@cset_nth: 
-@substitutor: 
-@null_fold_if_empty: 
-@ensure_non_null: 
+@parent_instance: private #GParamSpec portion
+@default_value:   default value for the property specified
+@cset_first: a string containing the allowed values for the first byte
+@cset_nth: a string containing the allowed values for the subsequent bytes
+@substitutor: the replacement byte for bytes which don't match @cset_first or @cset_nth.
+@null_fold_if_empty: replace empty string by %NULL
+@ensure_non_null:  replace %NULL strings by an empty string
 
 <!-- ##### TYPEDEF gchararray ##### -->
 <para>
-
+A C representable type name for #G_TYPE_STRING.
 </para>
 
 
 <!-- ##### FUNCTION g_param_spec_string ##### -->
 <para>
-
+Creates a new #GParamSpecString instance.
+</para>
+<para> 
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns:  a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_string ##### -->
 <para>
-
+Set the contents of a %G_TYPE_STRING #GValue to @v_string.
 </para>
 
-@value: 
-@v_string: 
+@value:  a valid #GValue of type %G_TYPE_STRING
+@v_string: string to be set
 
 
 <!-- ##### FUNCTION g_value_set_static_string ##### -->
 <para>
-
+Set the contents of a %G_TYPE_STRING #GValue to @v_string.
+The string is assumed to be static, and is thus not duplicated
+when setting the #GValue.
 </para>
 
-@value: 
-@v_string: 
+@value:  a valid #GValue of type %G_TYPE_STRING
+@v_string: static string to be set
 
 
 <!-- ##### FUNCTION g_value_take_string ##### -->
 <para>
-
+Sets the contents of a %G_TYPE_STRING #GValue to @v_string.
 </para>
 
-@value: 
-@v_string: 
+@value:   a valid #GValue of type %G_TYPE_STRING
+@v_string: duplicated unowned string to be set
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_value_set_string_take_ownership ##### -->
 <para>
-
+This is an internal function introduced mainly for C marshallers.
 </para>
 
-@value: 
-@v_string: 
+@value:   a valid #GValue of type %G_TYPE_STRING
+@v_string: duplicated unowned string to be set
+@Deprecated: 2.4: Use g_value_take_string() instead.
 
 
 <!-- ##### FUNCTION g_value_get_string ##### -->
 <para>
-
+Get the contents of a %G_TYPE_STRING #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_STRING
+@Returns: string content of @value
 
 
 <!-- ##### FUNCTION g_value_dup_string ##### -->
 <para>
-
+Get a copy the contents of a %G_TYPE_STRING #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of type %G_TYPE_STRING
+@Returns: a newly allocated copy of the string content of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_PARAM ##### -->
 <para>
-
+Returns whether the given #GParamSpec is of type %G_TYPE_PARAM_PARAM.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_PARAM ##### -->
 <para>
-
+Casts a #GParamSpec instance into a #GParamSpecParam.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_PARAM ##### -->
 <para>
-
+Return whether the given #GValue can hold values derived from type %G_TYPE_PARAM.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_PARAM ##### -->
 <para>
-
+The #GType of #GParamSpecParam.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecParam ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for %G_TYPE_PARAM
+properties.
 </para>
 
-@parent_instance: 
+@parent_instance: private #GParamSpec portion
 
 <!-- ##### FUNCTION g_param_spec_param ##### -->
 <para>
-
+Creates a new #GParamSpecParam instance specifying a %G_TYPE_PARAM
+property.
+</para>
+<para> 
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@param_type: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@param_type:    a #GType derived from %G_TYPE_PARAM
+@flags:         flags for the property specified
+@Returns:  a newly created parameter specification
+<!-- # Unused Parameters # -->
+@default_value: default value for the property specified
 
 
 <!-- ##### FUNCTION g_value_set_param ##### -->
 <para>
-
+Set the contents of a %G_TYPE_PARAM #GValue to @param.
 </para>
 
-@value: 
-@param: 
+@value:  a valid #GValue of type %G_TYPE_PARAM
+@param: the #GParamSpec to be set
 
 
 <!-- ##### FUNCTION g_value_take_param ##### -->
 <para>
-
+Sets the contents of a %G_TYPE_PARAM #GValue to @param and
+takes over the ownership of the callers reference to @param; 
+the caller doesn't have to unref it any more.
 </para>
 
-@value: 
-@param: 
+@value:  a valid #GValue of type %G_TYPE_PARAM
+@param: the #GParamSpec to be set
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_value_set_param_take_ownership ##### -->
 <para>
-
+This is an internal function introduced mainly for C marshallers.
 </para>
 
-@value: 
-@param: 
+@value:  a valid #GValue of type %G_TYPE_PARAM
+@param: the #GParamSpec to be set
+@Deprecated: 2.4: Use g_value_take_param() instead.
 
 
 <!-- ##### FUNCTION g_value_get_param ##### -->
 <para>
-
+Get the contents of a %G_TYPE_PARAM #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value: a valid #GValue whose type is derived from %G_TYPE_PARAM
+@Returns: #GParamSpec content of @value
 
 
 <!-- ##### FUNCTION g_value_dup_param ##### -->
 <para>
-
+Get the contents of a %G_TYPE_PARAM #GValue, increasing its reference count.
 </para>
 
-@value: 
-@Returns: 
+@value: a valid #GValue whose type is derived from %G_TYPE_PARAM
+@Returns: #GParamSpec content of @value, should be unreferenced when no longer needed.
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_BOXED ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_BOXED.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_BOXED ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecBoxed.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_BOXED ##### -->
 <para>
-
+Return whether the given #GValue can hold values derived from type %G_TYPE_BOXED.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_BOXED ##### -->
 <para>
-
+The #GType of #GParamSpecBoxed.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecBoxed ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for boxed properties.
 </para>
 
-@parent_instance: 
+@parent_instance: private #GParamSpec portion
 
 <!-- ##### FUNCTION g_param_spec_boxed ##### -->
 <para>
-
+Creates a new #GParamSpecBoxed instance specifying a %G_TYPE_BOXED 
+derived property.
+</para>
+<para> 
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@boxed_type: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@boxed_type:    %G_TYPE_BOXED derived type of this property
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_boxed ##### -->
 <para>
-
+Set the contents of a %G_TYPE_BOXED derived #GValue to @v_boxed.
 </para>
 
-@value: 
-@v_boxed: 
+@value:   a valid #GValue of %G_TYPE_BOXED derived type
+@v_boxed: boxed value to be set
 
 
 <!-- ##### FUNCTION g_value_set_static_boxed ##### -->
 <para>
-
+Set the contents of a %G_TYPE_BOXED derived #GValue to @v_boxed.
+The boxed value is assumed to be static, and is thus not duplicated
+when setting the #GValue.
 </para>
 
-@value: 
-@v_boxed: 
+@value:   a valid #GValue of %G_TYPE_BOXED derived type
+@v_boxed: static boxed value to be set
 
 
 <!-- ##### FUNCTION g_value_take_boxed ##### -->
 <para>
-
+Sets the contents of a %G_TYPE_BOXED derived #GValue to @v_boxed and
+takes over the ownership of the callers reference to @v_boxed; 
+the caller doesn't have to unref it any more.
 </para>
 
-@value: 
-@v_boxed: 
+@value: a valid #GValue of %G_TYPE_BOXED derived type
+@v_boxed: duplicated unowned boxed value to be set
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_value_set_boxed_take_ownership ##### -->
 <para>
-
+This is an internal function introduced mainly for C marshallers.
 </para>
 
-@value: 
-@v_boxed: 
+@value:   a valid #GValue of %G_TYPE_BOXED derived type
+@v_boxed: duplicated unowned boxed value to be set
+@Deprecated: 2.4: Use g_value_take_boxed() instead.
 
 
 <!-- ##### FUNCTION g_value_get_boxed ##### -->
 <para>
-
+Get the contents of a %G_TYPE_BOXED derived #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of %G_TYPE_BOXED derived type
+@Returns: boxed contents of @value
 
 
 <!-- ##### FUNCTION g_value_dup_boxed ##### -->
 <para>
-
+Get the contents of a %G_TYPE_BOXED derived #GValue.
+Upon getting, the boxed value is duplicated and needs to be
+later freed with g_boxed_free(), e.g. like: g_boxed_free (G_VALUE_TYPE (@value), return_value);
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of %G_TYPE_BOXED derived type
+@Returns: boxed contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_POINTER ##### -->
 <para>
-
+Returns whether the given #GParamSpec is of type %G_TYPE_PARAM_POINTER.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_POINTER ##### -->
 <para>
-
+Casts a #GParamSpec instance into a #GParamSpecPointer.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_POINTER ##### -->
 <para>
-
+Return whether the given #GValue can hold values of type %G_TYPE_POINTER.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_POINTER ##### -->
 <para>
-
+The #GType of #GParamSpecPointer.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecPointer ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for pointer properties.
 </para>
 
-@parent_instance: 
+@parent_instance: private #GParamSpec portion
 
 <!-- ##### FUNCTION g_param_spec_pointer ##### -->
 <para>
-
+Creates a new #GParamSpecPoiner instance specifying a pointer property.
+</para>
+<para> 
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_pointer ##### -->
 <para>
-
+Set the contents of a pointer #GValue to @v_pointer.
 </para>
 
-@value: 
-@v_pointer: 
+@value:   a valid #GValue of %G_TYPE_POINTER
+@v_pointer: pointer value to be set
 
 
 <!-- ##### FUNCTION g_value_get_pointer ##### -->
 <para>
-
+Get the contents of a pointer #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of %G_TYPE_POINTER
+@Returns: pointer contents of @value
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_OBJECT ##### -->
 <para>
-
+Returns whether the given #GParamSpec is of type %G_TYPE_PARAM_OBJECT.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_OBJECT ##### -->
 <para>
-
+Casts a #GParamSpec instance into a #GParamSpecObject.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_OBJECT ##### -->
 <para>
-
+Return whether the given #GValue can hold values derived from type %G_TYPE_OBJECT.
 </para>
 
-@value: 
+@value: a valid #GValue structure
 
 
 <!-- ##### MACRO G_TYPE_PARAM_OBJECT ##### -->
 <para>
-
+The #GType of #GParamSpecObject.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecObject ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for object properties.
 </para>
 
-@parent_instance: 
+@parent_instance: private #GParamSpec portion
 
 <!-- ##### FUNCTION g_param_spec_object ##### -->
 <para>
-
+Creates a new #GParamSpecBoxed instance specifying a %G_TYPE_OBJECT 
+derived property.
+</para>
+<para> 
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@object_type: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@object_type:   %G_TYPE_OBJECT derived type of this property
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### FUNCTION g_value_set_object ##### -->
 <para>
-
+Set the contents of a %G_TYPE_OBJECT derived #GValue to @v_object.
+</para>
+<para>
+g_value_set_object() increases the reference count of @v_object
+(the #GValue holds a reference to @v_object).
+If you do not wish to increase the reference count of the object
+(i.e. you wish to pass your current reference to the #GValue because you no
+longer need it),
+use g_value_take_object() instead.
+</para>
+<para>
+It is important that your #GValue holds a reference to @v_object (either its
+own, or one it has taken) to ensure that the object won't be destroyed while
+the #GValue still exists).
 </para>
 
-@value: 
-@v_object: 
+@value:   a valid #GValue of %G_TYPE_OBJECT derived type
+@v_object: object value to be set
 
 
 <!-- ##### FUNCTION g_value_take_object ##### -->
 <para>
-
+Sets the contents of a %G_TYPE_OBJECT derived #GValue to @v_object 
+and takes over the ownership of the callers reference to @v_object; 
+the caller doesn't have to unref it any more (i.e. the reference
+count of the object is not increased).
+</para>
+<para>
+If you want the #GValue to hold its own reference to @v_object, use
+g_value_set_object() instead.
 </para>
 
-@value: 
-@v_object: 
+@value:  a valid #GValue of %G_TYPE_OBJECT derived type
+@v_object: object value to be set
+@Since: 2.4
 
 
 <!-- ##### FUNCTION g_value_set_object_take_ownership ##### -->
 <para>
-
+This is an internal function introduced mainly for C marshallers.
 </para>
 
-@value: 
-@v_object: 
+@value:  a valid #GValue of %G_TYPE_OBJECT derived type
+@v_object: object value to be set
+@Deprecated: 2.4: Use g_value_take_object() instead.
 
 
 <!-- ##### FUNCTION g_value_get_object ##### -->
 <para>
-
+Get the contents of a %G_TYPE_OBJECT derived #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value:   a valid #GValue of %G_TYPE_OBJECT derived type
+@Returns: object contents of @value
 
 
 <!-- ##### FUNCTION g_value_dup_object ##### -->
 <para>
-
+Get the contents of a %G_TYPE_OBJECT derived #GValue, increasing its reference count.
 </para>
 
-@value: 
-@Returns: 
+@value: a valid #GValue whose type is derived from %G_TYPE_OBJECT
+@Returns: object content of @value, should be unreferenced when no longer needed.
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_UNICHAR ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_UNICHAR.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_UNICHAR ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecUnichar.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_TYPE_PARAM_UNICHAR ##### -->
 <para>
-
+The #GType of #GParamSpecUnichar.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecUnichar ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for unichar (unsigned integer) properties.
 </para>
 
-@parent_instance: 
-@default_value: 
+@parent_instance: private #GParamSpec portion
+@default_value:   default value for the property specified
 
 <!-- ##### FUNCTION g_param_spec_unichar ##### -->
 <para>
-
+Creates a new #GParamSpecUnichar instance specifying a %G_TYPE_UINT 
+property. #GValue structures for this property can be accessed with 
+g_value_set_uint() and g_value_get_uint().
+</para>
+<para>
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@default_value: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@default_value: default value for the property specified
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_VALUE_ARRAY ##### -->
 <para>
-
+Return whether the given #GParamSpec is of type %G_TYPE_PARAM_VALUE_ARRAY.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_PARAM_SPEC_VALUE_ARRAY ##### -->
 <para>
-
+Cast a #GParamSpec instance into a #GParamSpecValueArray.
 </para>
 
-@pspec: 
+@pspec: a valid #GParamSpec instance
 
 
 <!-- ##### MACRO G_TYPE_PARAM_VALUE_ARRAY ##### -->
 <para>
-
+The #GType of #GParamSpecValueArray.
 </para>
 
 
 
 <!-- ##### STRUCT GParamSpecValueArray ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for #GValueArray properties.
 </para>
 
-@parent_instance: 
-@element_spec: 
-@fixed_n_elements: 
+@parent_instance:  private #GParamSpec portion
+@element_spec:     a #GParamSpec describing the elements contained in arrays of this property, may be %NULL
+@fixed_n_elements: if greater than 0, arrays of this property will always have this many elements
 
 <!-- ##### FUNCTION g_param_spec_value_array ##### -->
 <para>
-
-</para>
-
-@name: 
-@nick: 
-@blurb: 
-@element_spec: 
-@flags: 
-@Returns: 
+Creates a new #GParamSpecValueArray instance specifying a 
+%G_TYPE_VALUE_ARRAY property. %G_TYPE_VALUE_ARRAY is a %G_TYPE_BOXED 
+type, as such, #GValue structures for this property can be accessed 
+with g_value_set_boxed() and g_value_get_boxed().
+</para>
+<para>
+See g_param_spec_internal() for details on property names.
+</para>
+
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@element_spec:  a #GParamSpec describing the elements contained in 
+                arrays of this property, may be %NULL
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_OVERRIDE ##### -->
 <para>
-
+Returns whether the given #GParamSpec is of type %G_TYPE_PARAM_OVERRIDE.
 </para>
 
-@pspec: 
+@pspec: a #GParamSpec
+@Since: 2.4
 
 
 <!-- ##### MACRO G_PARAM_SPEC_OVERRIDE ##### -->
 <para>
-
+Casts a #GParamSpec into a #GParamSpecOverride.
 </para>
 
-@pspec: 
+@pspec:  a #GParamSpec
+@Since: 2.4
 
 
 <!-- ##### MACRO G_TYPE_PARAM_OVERRIDE ##### -->
 <para>
-
+The #GType of #GParamSpecOverride.
 </para>
 
+@Since: 2.4
 
 
 <!-- ##### STRUCT GParamSpecOverride ##### -->
 <para>
-
+This is a type of #GParamSpec type that simply redirects operations to
+another paramspec.  All operations other than getting or
+setting the value are redirected, including accessing the nick and
+blurb, validating a value, and so forth. See
+g_param_spec_get_redirect_target() for retrieving the overidden
+property. #GParamSpecOverride is used in implementing
+g_object_class_override_property(), and will not be directly useful
+unless you are implementing a new base type similar to GObject.
 </para>
 
+@Since: 2.4
 
 <!-- ##### FUNCTION g_param_spec_override ##### -->
 <para>
-
+Creates a new property of type #GParamSpecOverride. This is used
+to direct operations to another paramspec, and will not be directly
+useful unless you are implementing a new base type similar to GObject.
 </para>
 
-@name: 
-@overridden: 
-@Returns: 
+@name: the name of the property.
+@overridden: The property that is being overridden
+@Returns: the newly created #GParamSpec
+@Since: 2.4
 
 
 <!-- ##### MACRO G_IS_PARAM_SPEC_GTYPE ##### -->
 <para>
-
+Returns whether the given #GParamSpec is of type %G_TYPE_PARAM_GTYPE.
 </para>
 
-@pspec: 
+@pspec: a #GParamSpec
+@Since: 2.10
 
 
 <!-- ##### MACRO G_PARAM_SPEC_GTYPE ##### -->
 <para>
-
+Casts a #GParamSpec into a #GParamSpecGType.
 </para>
 
-@pspec: 
+@pspec:  a #GParamSpec
+@Since: 2.10
 
 
 <!-- ##### MACRO G_VALUE_HOLDS_GTYPE ##### -->
 <para>
-
+Returns whether the given #GValue can hold values of type %G_TYPE_GTYPE.
 </para>
 
-@value: 
+@value:  a valid #GValue structure
+@Since: 2.12
 
 
 <!-- ##### MACRO G_TYPE_PARAM_GTYPE ##### -->
 <para>
-
+The #GType of #GParamSpecGType.
 </para>
 
+@Since: 2.10
 
 
 <!-- ##### STRUCT GParamSpecGType ##### -->
 <para>
-
+A #GParamSpec derived structure that contains the meta data for #GType properties.
 </para>
 
-@parent_instance: 
-@is_a_type: 
+@parent_instance:  private #GParamSpec portion
+@is_a_type:        a #GType whose subtypes can occur as values
+@Since: 2.10
 
 <!-- ##### FUNCTION g_param_spec_gtype ##### -->
 <para>
-
+Creates a new #GParamSpecGType instance specifying a 
+%G_TYPE_GTYPE property. 
+</para>
+<para>
+See g_param_spec_internal() for details on property names.
 </para>
 
-@name: 
-@nick: 
-@blurb: 
-@is_a_type: 
-@flags: 
-@Returns: 
+@name:          canonical name of the property specified
+@nick:          nick name for the property specified
+@blurb:         description of the property specified
+@is_a_type:     a #GType whose subtypes are allowed as values
+                of the property (use %G_TYPE_NONE for any type)
+@flags:         flags for the property specified
+@Returns: a newly created parameter specification
+@Since: 2.10
 
 
 <!-- ##### FUNCTION g_value_get_gtype ##### -->
 <para>
-
+Get the contents of a %G_TYPE_GTYPE #GValue.
 </para>
 
-@value: 
-@Returns: 
+@value: a valid #GValue of type %G_TYPE_GTYPE
+@Returns: the #GType stored in @value
+@Since: 2.12
 
 
 <!-- ##### FUNCTION g_value_set_gtype ##### -->
 <para>
-
+Set the contents of a %G_TYPE_GTYPE #GValue to @v_gtype.
 </para>
 
-@value: 
-@v_gtype: 
+@value: a valid #GValue of type %G_TYPE_GTYPE
+@v_gtype: #GType to be set
+@Since: 2.12
 
 
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/signals.sgml glib/docs/reference/gobject/tmpl/signals.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/signals.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/signals.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -2,626 +2,925 @@
 Signals
 
 <!-- ##### SECTION Short_Description ##### -->
-
+A means for customization of object behaviour and a general purpose notification mechanism
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
+The basic concept of the signal system is that of the <emphasis>emission</emphasis>
+of a signal.
+Signals are introduced per-type and are identified through strings.
+Signals introduced for a parent type are available in derived types as well,
+so basically they are a per-type facility that is inherited.
+A signal emission mainly involves invocation of a certain set of callbacks in
+precisely defined manner. There are two main categories of such callbacks,
+per-object
+	<footnote><para>Although signals can deal with any kind of instantiatable type,
+	i'm referring to those types as "object types" in the following, simply
+	because that is the context most users will encounter signals in.
+	</para></footnote>
+ones and user provided ones.
+The per-object callbacks are most often referred to as "object method
+handler" or "default (signal) handler", while user provided callbacks are
+usually just called "signal handler".
+The object method handler is provided at signal creation time (this most
+frequently happens at the end of an object class' creation), while user
+provided handlers are frequently connected and disconnected to/from a certain
+signal on certain object instances.
+</para>
+<para>
+A signal emission consists of five stages, unless prematurely stopped:
+<variablelist>
+  <varlistentry><term></term><listitem><para>
+	1 - Invocation of the object method handler for %G_SIGNAL_RUN_FIRST signals
+  </para></listitem></varlistentry>
+  <varlistentry><term></term><listitem><para>
+	2 - Invocation of normal user-provided signal handlers (<emphasis>after</emphasis> flag %FALSE)
+  </para></listitem></varlistentry>
+  <varlistentry><term></term><listitem><para>
+	3 - Invocation of the object method handler for %G_SIGNAL_RUN_LAST signals
+  </para></listitem></varlistentry>
+  <varlistentry><term></term><listitem><para>
+	4 - Invocation of user provided signal handlers, connected with an <emphasis>after</emphasis> flag of %TRUE
+  </para></listitem></varlistentry>
+  <varlistentry><term></term><listitem><para>
+	5 - Invocation of the object method handler for %G_SIGNAL_RUN_CLEANUP signals
+  </para></listitem></varlistentry>
+</variablelist>
+The user-provided signal handlers are called in the order they were
+connected in.
+All handlers may prematurely stop a signal emission, and any number of
+handlers may be connected, disconnected, blocked or unblocked during
+a signal emission.
+There are certain criteria for skipping user handlers in stages 2 and 4
+of a signal emission.
+First, user handlers may be <emphasis>blocked</emphasis>, blocked handlers are omitted
+during callback invocation, to return from the "blocked" state, a
+handler has to get unblocked exactly the same amount of times
+it has been blocked before.
+Second, upon emission of a %G_SIGNAL_DETAILED signal, an additional
+"detail" argument passed in to g_signal_emit() has to match the detail
+argument of the signal handler currently subject to invocation.
+Specification of no detail argument for signal handlers (omission of the
+detail part of the signal specification upon connection) serves as a
+wildcard and matches any detail argument passed in to emission.
 </para>
 
-
 <!-- ##### SECTION See_Also ##### -->
 <para>
 
 </para>
 
-
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### STRUCT GSignalInvocationHint ##### -->
 <para>
-
+The #GSignalInvocationHint structure is used to pass on additional information
+to callbacks during a signal emission.
 </para>
 
-@signal_id: 
-@detail: 
-@run_type: 
+@signal_id: 	The signal id of the signal invoking the callback
+@detail: 	The detail passed on for this emission
+@run_type: 	The stage the signal emission is currently in, this
+		field will contain one of %G_SIGNAL_RUN_FIRST,
+		%G_SIGNAL_RUN_LAST or %G_SIGNAL_RUN_CLEANUP.
 
 <!-- ##### USER_FUNCTION GSignalAccumulator ##### -->
 <para>
-
-</para>
-
-@ihint: 
-@return_accu: 
-@handler_return: 
-@data: 
-@Returns: 
+The signal accumulator is a special callback function that can be used
+to collect return values of the various callbacks that are called
+during a signal emission. The signal accumulator is specified at signal
+creation time, if it is left %NULL, no accumulation of callback return
+values is performed. The return value of signal emissions is then the
+value returned by the last callback.
+</para>
+
+@ihint: 	Signal invocation hint, see #GSignalInvocationHint.
+@return_accu: 	Accumulator to collect callback return values in, this
+		is the return value of the current signal emission.
+@handler_return: A #GValue holding the return value of the signal handler.
+@data:          Callback data that was specified when creating the signal.
+@Returns: 	The accumulator function returns whether the signal emission
+		should be aborted. Returning %FALSE means to abort the
+		current emission and %TRUE is returned for continuation.
 
 
 <!-- ##### TYPEDEF GSignalCMarshaller ##### -->
 <para>
-
+This is the signature of marshaller functions, required to marshall
+arrays of parameter values to signal emissions into C language callback
+invocations. It is merely an alias to #GClosureMarshal since the #GClosure
+mechanism takes over responsibility of actual function invocation for the
+signal system.
 </para>
 
 
 <!-- ##### USER_FUNCTION GSignalEmissionHook ##### -->
 <para>
-
-</para>
-
-@ihint: 
-@n_param_values: 
-@param_values: 
-@data: 
-@Returns: 
+A simple function pointer to get invoked when the signal is emitted. This 
+allows you to tie a hook to the signal type, so that it will trap all 
+emissions of that signal, from any object.
+</para>
+<para>
+You may not attach these to signals created with the #G_SIGNAL_NO_HOOKS flag.
+</para>
+
+@ihint: Signal invocation hint, see #GSignalInvocationHint.
+@n_param_values: the number of parameters to the function, including
+                 the instance on which the signal was emitted.
+@param_values: the instance on which the signal was emitted, followed by the 
+               parameters of the emission.
+@data: user data associated with the hook.
+@Returns: whether it wants to stay connected. If it returns %FALSE, the signal 
+          hook is disconnected (and destroyed).
 
 
 <!-- ##### ENUM GSignalFlags ##### -->
 <para>
-
-</para>
-
-@G_SIGNAL_RUN_FIRST: 
-@G_SIGNAL_RUN_LAST: 
-@G_SIGNAL_RUN_CLEANUP: 
-@G_SIGNAL_NO_RECURSE: 
-@G_SIGNAL_DETAILED: 
-@G_SIGNAL_ACTION: 
-@G_SIGNAL_NO_HOOKS: 
+The signal flags are used to specify a signal's behaviour, the overall
+signal description outlines how especially the RUN flags control the
+stages of a signal emission.
+</para>
+
+@G_SIGNAL_RUN_FIRST:   Invoke the object method handler in the first emission stage.
+@G_SIGNAL_RUN_LAST:    Invoke the object method handler in the third emission stage.
+@G_SIGNAL_RUN_CLEANUP: Invoke the object method handler in the last emission stage.
+@G_SIGNAL_NO_RECURSE:  Signals being emitted for an object while currently being in
+                       emission for this very object will not be emitted recursively,
+                       but instead cause the first emission to be restarted.
+@G_SIGNAL_DETAILED:    This signal supports "::detail" appendices to the signal name
+                       upon handler connections and emissions.
+@G_SIGNAL_ACTION:      Action signals are signals that may freely be emitted on alive
+                       objects from user code via g_signal_emit() and friends, without
+                       the need of being embedded into extra code that performs pre or
+                       post emission adjustments on the object. They can also be thought
+                       of as object methods which can be called generically by 
+                       third-party code.
+@G_SIGNAL_NO_HOOKS:    No emissions hooks are supported for this signal.
 
 <!-- ##### ENUM GSignalMatchType ##### -->
 <para>
-
+The match types specify what g_signal_handlers_block_matched(),
+g_signal_handlers_unblock_matched() and g_signal_handlers_disconnect_matched()
+match signals by.
 </para>
 
-@G_SIGNAL_MATCH_ID: 
-@G_SIGNAL_MATCH_DETAIL: 
-@G_SIGNAL_MATCH_CLOSURE: 
-@G_SIGNAL_MATCH_FUNC: 
-@G_SIGNAL_MATCH_DATA: 
-@G_SIGNAL_MATCH_UNBLOCKED: 
+@G_SIGNAL_MATCH_ID: The signal id must be equal.
+@G_SIGNAL_MATCH_DETAIL: The signal detail be equal.
+@G_SIGNAL_MATCH_CLOSURE: The closure must be the same.
+@G_SIGNAL_MATCH_FUNC: The C closure callback must be the same.
+@G_SIGNAL_MATCH_DATA: The closure data must be the same.
+@G_SIGNAL_MATCH_UNBLOCKED: Only unblocked signals may matched.
 
 <!-- ##### STRUCT GSignalQuery ##### -->
 <para>
-
+A structure holding in-depth information for a specific signal. It is
+filled in by the g_signal_query() function.
 </para>
 
-@signal_id: 
-@signal_name: 
-@itype: 
-@signal_flags: 
-@return_type: 
-@n_params: 
-@param_types: 
+@signal_id: 	The signal id of the signal being queried, or 0 if the
+		signal to be queried was unknown.
+@signal_name: 	The signal name.
+@itype: 	The interface/instance type that this signal can be emitted for.
+@signal_flags: 	The signal flags as passed in to g_signal_new().
+@return_type: 	The return type for user callbacks.
+@n_params: 	The number of parameters that user callbacks take.
+@param_types: 	The individual parameter types for user callbacks, note that the
+		effective callback signature is:
+<programlisting>
+@return_type callback (#gpointer     data1,
+                      [#param_types param_names,]
+                       #gpointer     data2);
+</programlisting>
 
 <!-- ##### MACRO G_SIGNAL_TYPE_STATIC_SCOPE ##### -->
 <para>
-
-</para>
+This macro flags signal argument types for which the signal system may 
+assume that instances thereof remain persistent across all signal emissions
+they are used in. This is only useful for non ref-counted, value-copy types.
+</para>
+<para>
+To flag a signal argument in this way, add 
+<literal>| G_SIGNAL_TYPE_STATIC_SCOPE</literal> to the corresponding argument
+of g_signal_new().
+</para>
+<informalexample>
+<programlisting>
+    g_signal_new ("size_request",
+		  G_TYPE_FROM_CLASS (gobject_class),
+		  G_SIGNAL_RUN_FIRST,
+		  G_STRUCT_OFFSET (GtkWidgetClass, size_request),
+		  NULL, NULL,
+		  _gtk_marshal_VOID__BOXED,
+		  G_TYPE_NONE, 1,
+		  GTK_TYPE_REQUISITION | G_SIGNAL_TYPE_STATIC_SCOPE);
+</programlisting>
+</informalexample>
 
 
 
 <!-- ##### MACRO G_SIGNAL_MATCH_MASK ##### -->
 <para>
-
+A mask for all #GSignalMatchType bits.
 </para>
 
 
 
 <!-- ##### MACRO G_SIGNAL_FLAGS_MASK ##### -->
 <para>
-
+A mask for all #GSignalFlags bits.
 </para>
 
 
 
 <!-- ##### FUNCTION g_signal_new ##### -->
 <para>
-
+Creates a new signal. (This is usually done in the class initializer.)
 </para>
-
-@signal_name: 
-@itype: 
-@signal_flags: 
-@class_offset: 
-@accumulator: 
-@accu_data: 
-@c_marshaller: 
-@return_type: 
-@n_params: 
-@Varargs: 
-@Returns: 
+<para>
+A signal name consists of segments consisting of ASCII letters and
+digits, separated by either the '-' or '_' character. The first
+character of a signal name must be a letter. Names which violate these
+rules lead to undefined behaviour of the GSignal system. 
+</para>
+<para>
+When registering a signal and looking up a signal, either separator can
+be used, but they cannot be mixed. 
+</para>
+
+@signal_name: the name for the signal
+@itype: the type this signal pertains to. It will also pertain to 
+   types which are derived from this type.
+@signal_flags: a combination of #GSignalFlags specifying detail of when 
+   the default handler is to be invoked. You should at least specify 
+   %G_SIGNAL_RUN_FIRST or %G_SIGNAL_RUN_LAST.
+@class_offset: The offset of the function pointer in the class structure 
+   for this type. Used to invoke a class method generically. Pass 0 to
+   not associate a class method with this signal.
+@accumulator: the accumulator for this signal; may be %NULL.
+@accu_data: user data for the @accumulator.
+@c_marshaller: the function to translate arrays of parameter values to 
+   signal emissions into C language callback invocations.
+@return_type: the type of return value, or #G_TYPE_NONE for a signal 
+    without a return value.
+@n_params: the number of parameter types to follow.
+@Varargs: a list of types, one for each parameter.
+@Returns: the signal id
 
 
 <!-- ##### FUNCTION g_signal_newv ##### -->
 <para>
-
+Creates a new signal. (This is usually done in the class initializer.)
+</para>
+<para>
+See g_signal_new() for details on allowed signal names.
 </para>
 
-@signal_name: 
-@itype: 
-@signal_flags: 
-@class_closure: 
-@accumulator: 
-@accu_data: 
-@c_marshaller: 
-@return_type: 
-@n_params: 
-@param_types: 
-@Returns: 
+@signal_name: the name for the signal
+@itype: the type this signal pertains to. It will also pertain to 
+   types which are derived from this type.
+@signal_flags: a combination of #GSignalFlags specifying detail of when 
+   the default handler is to be invoked. You should at least specify 
+   %G_SIGNAL_RUN_FIRST or %G_SIGNAL_RUN_LAST.
+@class_closure: The closure to invoke on signal emission; may be %NULL.
+@accumulator: the accumulator for this signal; may be %NULL.
+@accu_data: user data for the @accumulator.
+@c_marshaller: the function to translate arrays of parameter values to 
+    signal emissions into C language callback invocations.
+@return_type: the type of return value, or #G_TYPE_NONE for a signal 
+    without a return value.
+@n_params: the length of @param_types.
+@param_types: an array types, one for each parameter.
+@Returns: the signal id
 
 
 <!-- ##### FUNCTION g_signal_new_valist ##### -->
 <para>
-
+Creates a new signal. (This is usually done in the class initializer.)
+</para>
+<para>
+See g_signal_new() for details on allowed signal names.
 </para>
 
-@signal_name: 
-@itype: 
-@signal_flags: 
-@class_closure: 
-@accumulator: 
-@accu_data: 
-@c_marshaller: 
-@return_type: 
-@n_params: 
-@args: 
-@Returns: 
+@signal_name: the name for the signal
+@itype: the type this signal pertains to. It will also pertain to 
+   types which are derived from this type.
+@signal_flags: a combination of #GSignalFlags specifying detail of when 
+   the default handler is to be invoked. You should at least specify 
+   %G_SIGNAL_RUN_FIRST or %G_SIGNAL_RUN_LAST.
+@class_closure: The closure to invoke on signal emission; may be %NULL.
+@accumulator: the accumulator for this signal; may be %NULL.
+@accu_data: user data for the @accumulator.
+@c_marshaller: the function to translate arrays of parameter values to 
+   signal emissions into C language callback invocations.
+@return_type: the type of return value, or #G_TYPE_NONE for a signal 
+   without a return value.
+@n_params: the number of parameter types in @args.
+@args: va_list of #GType, one for each parameter.
+@Returns: the signal id
 
 
 <!-- ##### FUNCTION g_signal_query ##### -->
 <para>
-
+Queries the signal system for in-depth information about a
+specific signal. This function will fill in a user-provided
+structure to hold signal-specific information. If an invalid
+signal id is passed in, the @signal_id member of the #GSignalQuery
+is 0. All members filled into the #GSignalQuery structure should
+be considered constant and have to be left untouched.
 </para>
 
-@signal_id: 
-@query: 
+@signal_id: The signal id of the signal to query information for.
+@query: A user provided structure that is filled in with constant
+         values upon success.
 
 
 <!-- ##### FUNCTION g_signal_lookup ##### -->
 <para>
-
+Given the name of the signal and the type of object it connects to, gets 
+the signal's identifying integer. Emitting the signal by number is 
+somewhat faster than using the name each time.
+</para>
+<para>
+Also tries the ancestors of the given type.
+</para>
+<para>
+See g_signal_new() for details on allowed signal names.
 </para>
 
-@name: 
-@itype: 
-@Returns: 
+@name: the signal's name.
+@itype: the type that the signal operates on.
+@Returns: the signal's identifying number, or 0 if no signal was found.
 
 
 <!-- ##### FUNCTION g_signal_name ##### -->
 <para>
-
+Given the signal's identifier, finds its name.
+</para>
+<para>
+Two different signals may have the same name, if they have differing types.
 </para>
 
-@signal_id: 
-@Returns: 
+@signal_id: the signal's identifying number.
+@Returns: the signal name, or %NULL if the signal number was invalid.
 
 
 <!-- ##### FUNCTION g_signal_list_ids ##### -->
 <para>
-
+Lists the signals by id that a certain instance or interface type
+created. Further information about the signals can be acquired through
+g_signal_query().
 </para>
 
-@itype: 
-@n_ids: 
-@Returns: 
+@itype: Instance or interface type.
+@n_ids: Location to store the number of signal ids for @itype.
+@Returns: Newly allocated array of signal IDs.
 
 
 <!-- ##### FUNCTION g_signal_emit ##### -->
 <para>
-
+Emits a signal. 
+</para>
+<para>
+Note that g_signal_emit() resets the return value to the default
+if no handlers are connected, in contrast to g_signal_emitv().
 </para>
 
-@instance: 
-@signal_id: 
-@detail: 
-@Varargs: 
+@instance: the instance the signal is being emitted on.
+@signal_id: the signal id
+@detail: the detail
+@Varargs: parameters to be passed to the signal, followed by a
+           location for the return value. If the return type of the signal
+           is #G_TYPE_NONE, the return value location can be omitted.
 
 
 <!-- ##### FUNCTION g_signal_emit_by_name ##### -->
 <para>
-
+Emits a signal. 
+</para>
+<para>
+Note that g_signal_emit_by_name() resets the return value to the default
+if no handlers are connected, in contrast to g_signal_emitv().
 </para>
 
-@instance: 
-@detailed_signal: 
-@Varargs: 
+@instance: the instance the signal is being emitted on.
+@detailed_signal: a string of the form "signal-name::detail".
+@Varargs: parameters to be passed to the signal, followed by a
+          location for the return value. If the return type of the signal
+          is #G_TYPE_NONE, the return value location can be omitted.
 
 
 <!-- ##### FUNCTION g_signal_emitv ##### -->
 <para>
-
+Emits a signal. 
+</para>
+<para>
+Note that g_signal_emitv() doesn't change @return_value if no handlers are
+connected, in contrast to g_signal_emit() and g_signal_emit_valist().
 </para>
 
-@instance_and_params: 
-@signal_id: 
-@detail: 
-@return_value: 
+@instance_and_params: argument list for the signal emission. The first 
+     element in the array is a #GValue for the instance the signal is 
+     being emitted on. The rest are any arguments to be passed to the 
+     signal.
+@signal_id: the signal id
+@detail: the detail
+@return_value: Location to store the return value of the signal emission.
 
 
 <!-- ##### FUNCTION g_signal_emit_valist ##### -->
 <para>
-
+Emits a signal. 
+</para>
+<para>
+Note that g_signal_emit_valist() resets the return value to the default
+if no handlers are connected, in contrast to g_signal_emitv().
 </para>
 
-@instance: 
-@signal_id: 
-@detail: 
-@var_args: 
+@instance: the instance the signal is being emitted on.
+@signal_id: the signal id
+@detail: the detail
+@var_args: a list of parameters to be passed to the signal, followed by a
+           location for the return value. If the return type of the signal
+           is #G_TYPE_NONE, the return value location can be omitted.
 
 
 <!-- ##### MACRO g_signal_connect ##### -->
 <para>
-
+Connects a #GCallback function to a signal for a particular object.
+</para>
+<para>
+The handler will be called before the default handler of the signal.
 </para>
 
-@instance: 
-@detailed_signal: 
-@c_handler: 
-@data: 
+@instance: the instance to connect to.
+@detailed_signal: a string of the form "signal-name::detail".
+@c_handler: the #GCallback to connect.
+@data: data to pass to @c_handler calls.
+@Returns: the handler id
 
 
 <!-- ##### MACRO g_signal_connect_after ##### -->
 <para>
-
+Connects a #GCallback function to a signal for a particular object.
+</para>
+<para>
+The handler will be called after the default handler of the signal.
 </para>
 
-@instance: 
-@detailed_signal: 
-@c_handler: 
-@data: 
+@instance: the instance to connect to.
+@detailed_signal: a string of the form "signal-name::detail".
+@c_handler: the #GCallback to connect.
+@data: data to pass to @c_handler calls.
+@Returns: the handler id
 
 
 <!-- ##### MACRO g_signal_connect_swapped ##### -->
 <para>
-
+Connects a #GCallback function to a signal for a particular object.
+</para>
+<para>
+The instance on which the signal is emitted and @data will be swapped when 
+calling the handler.
 </para>
 
-@instance: 
-@detailed_signal: 
-@c_handler: 
-@data: 
+@instance: the instance to connect to.
+@detailed_signal: a string of the form "signal-name::detail".
+@c_handler: the #GCallback to connect.
+@data: data to pass to @c_handler calls.
+@Returns: the handler id
 
 
 <!-- ##### FUNCTION g_signal_connect_object ##### -->
 <para>
-
-</para>
-
-@instance: 
-@detailed_signal: 
-@c_handler: 
-@gobject: 
-@connect_flags: 
-@Returns: 
+ This is similar to g_signal_connect_data(), but uses a closure which
+ ensures that the @gobject stays alive during the call to @c_handler
+ by temporarily adding a reference count to @gobject.
+</para>
+<para>
+ Note that there is a bug in GObject that makes this function
+ much less useful than it might seem otherwise. Once @gobject is
+ disposed, the callback will no longer be called, but, the signal
+ handler is <emphasis>not</emphasis> currently disconnected. If the
+ @instance is itself being freed at the same time than this doesn't
+ matter, since the signal will automatically be removed, but
+ if @instance persists, then the signal handler will leak. You
+ should not remove the signal yourself because in a future versions of
+ GObject, the handler <emphasis>will</emphasis> automatically
+ be disconnected.
+</para>
+<para>
+ It's possible to work around this problem in a way that will
+ continue to work with future versions of GObject by checking
+ that the signal handler is still connected before disconnected it:
+<informalexample><programlisting>
+ if (g_signal_handler_is_connected (instance, id))
+   g_signal_handler_disconnect (instance, id);
+</programlisting></informalexample>
+</para>
+
+@instance: the instance to connect to.
+@detailed_signal: a string of the form "signal-name::detail".
+@c_handler: the #GCallback to connect.
+@gobject: the object to pass as data to @c_handler.
+@connect_flags: a combination of #GConnnectFlags.
+@Returns: the handler id.
 
 
 <!-- ##### ENUM GConnectFlags ##### -->
 <para>
-
+The connection flags are used to specify the behaviour of a signal's 
+connection.
 </para>
 
-@G_CONNECT_AFTER: 
-@G_CONNECT_SWAPPED: 
+@G_CONNECT_AFTER: whether the handler should be called before or after the 
+                  default handler of the signal.
+@G_CONNECT_SWAPPED: whether the instance and data should be swapped when
+                  calling the handler.
 
 <!-- ##### FUNCTION g_signal_connect_data ##### -->
 <para>
-
+Connects a #GCallback function to a signal for a particular object. Similar
+to g_signal_connect(), but allows to provide a #GClosureNotify for the data
+which will be called when the signal handler is disconnected and no longer
+used. Specify @connect_flags if you need <literal>..._after()</literal> pr
+<literal>..._swapped()</literal> variants of this function.
 </para>
 
-@instance: 
-@detailed_signal: 
-@c_handler: 
-@data: 
-@destroy_data: 
-@connect_flags: 
-@Returns: 
+@instance: the instance to connect to.
+@detailed_signal: a string of the form "signal-name::detail".
+@c_handler: the #GCallback to connect.
+@data: data to pass to @c_handler calls.
+@destroy_data: a #GClosureNotify for @data.
+@connect_flags: a combination of #GConnectFlags.
+@Returns: the handler id
 
 
 <!-- ##### FUNCTION g_signal_connect_closure ##### -->
 <para>
-
+Connects a closure to a signal for a particular object.
 </para>
 
-@instance: 
-@detailed_signal: 
-@closure: 
-@after: 
-@Returns: 
+@instance: the instance to connect to.
+@detailed_signal: a string of the form "signal-name::detail".
+@closure: the closure to connect.
+@after: whether the handler should be called before or after the 
+        default handler of the signal.
+@Returns: the handler id
 
 
 <!-- ##### FUNCTION g_signal_connect_closure_by_id ##### -->
 <para>
-
+Connects a closure to a signal for a particular object.
 </para>
 
-@instance: 
-@signal_id: 
-@detail: 
-@closure: 
-@after: 
-@Returns: 
+@instance: the instance to connect to.
+@signal_id: the id of the signal.
+@detail: the detail.
+@closure: the closure to connect.
+@after: whether the handler should be called before or after the 
+        default handler of the signal.
+@Returns: the handler id
 
 
 <!-- ##### FUNCTION g_signal_handler_block ##### -->
 <para>
-
+Blocks a handler of an instance so it will not be called during 
+any signal emissions unless it is unblocked again. Thus "blocking" 
+a signal handler means to temporarily deactive it, a signal handler 
+has to be unblocked exactly the same amount of times it has been 
+blocked before to become active again.
+</para>
+<para>
+The @handler_id has to be a valid signal handler id, connected to a 
+signal of @instance.
 </para>
 
-@instance: 
-@handler_id: 
+@instance: The instance to block the signal handler of.
+@handler_id: Handler id of the handler to be blocked.
 
 
 <!-- ##### FUNCTION g_signal_handler_unblock ##### -->
 <para>
-
+Undoes the effect of a previous g_signal_handler_block() call. 
+A blocked handler is skipped during signal emissions and will not be 
+invoked, unblocking it (for exactly the amount of times it has been 
+blocked before) reverts its "blocked" state, so the handler will be 
+recognized by the signal system and is called upon future or currently
+ongoing signal emissions (since the order in which handlers are
+called during signal emissions is deterministic, whether the
+unblocked handler in question is called as part of a currently
+ongoing emission depends on how far that emission has proceeded
+yet).
+</para>
+<para>
+The @handler_id has to be a valid id of a signal handler that is 
+connected to a signal of @instance and is currently blocked.
 </para>
 
-@instance: 
-@handler_id: 
+@instance: The instance to unblock the signal handler of.
+@handler_id: Handler id of the handler to be unblocked.
 
 
 <!-- ##### FUNCTION g_signal_handler_disconnect ##### -->
 <para>
-
+Disconnects a handler from an instance so it will not be called during 
+any future or currently ongoing emissions of the signal it has been 
+connected to. The @handler_id becomes invalid and may be reused.
+</para>
+<para>
+The @handler_id has to be a valid signal handler id, connected to a 
+signal of @instance.
 </para>
 
-@instance: 
-@handler_id: 
+@instance: The instance to remove the signal handler from.
+@handler_id: Handler id of the handler to be disconnected.
 
 
 <!-- ##### FUNCTION g_signal_handler_find ##### -->
 <para>
-
-</para>
-
-@instance: 
-@mask: 
-@signal_id: 
-@detail: 
-@closure: 
-@func: 
-@data: 
-@Returns: 
+Finds the first signal handler that matches certain selection criteria.
+The criteria mask is passed as an OR-ed combination of #GSignalMatchType
+flags, and the criteria values are passed as arguments.
+The match @mask has to be non-0 for successful matches.
+If no handler was found, 0 is returned.
+</para>
+
+@instance: The instance owning the signal handler to be found.
+@mask: Mask indicating which of @signal_id, @detail, @closure, @func 
+       and/or @data the handler has to match.
+@signal_id: Signal the handler has to be connected to.
+@detail: Signal detail the handler has to be connected to.
+@closure: The closure the handler will invoke.
+@func: The C closure callback of the handler (useless for non-C closures).
+@data: The closure data of the handler's closure.
+@Returns: A valid non-0 signal handler id for a successful match.
 
 
 <!-- ##### FUNCTION g_signal_handlers_block_matched ##### -->
 <para>
-
-</para>
-
-@instance: 
-@mask: 
-@signal_id: 
-@detail: 
-@closure: 
-@func: 
-@data: 
-@Returns: 
+Blocks all handlers on an instance that match a certain selection criteria.
+The criteria mask is passed as an OR-ed combination of #GSignalMatchType 
+flags, and the criteria values are passed as arguments.
+Passing at least one of the %G_SIGNAL_MATCH_CLOSURE, %G_SIGNAL_MATCH_FUNC
+or %G_SIGNAL_MATCH_DATA match flags is required for successful matches.
+If no handlers were found, 0 is returned, the number of blocked handlers
+otherwise.
+</para>
+
+@instance: The instance to block handlers from.
+@mask: Mask indicating which of @signal_id, @detail, @closure, @func 
+       and/or @data the handlers have to match.
+@signal_id: Signal the handlers have to be connected to.
+@detail: Signal detail the handlers have to be connected to.
+@closure: The closure the handlers will invoke.
+@func: The C closure callback of the handlers (useless for non-C closures).
+@data: The closure data of the handlers' closures.
+@Returns: The amount of handlers that got blocked.
 
 
 <!-- ##### FUNCTION g_signal_handlers_unblock_matched ##### -->
 <para>
-
-</para>
-
-@instance: 
-@mask: 
-@signal_id: 
-@detail: 
-@closure: 
-@func: 
-@data: 
-@Returns: 
+Unblocks all handlers on an instance that match a certain selection
+criteria. The criteria mask is passed as an OR-ed combination of
+#GSignalMatchType flags, and the criteria values are passed as arguments.
+Passing at least one of the %G_SIGNAL_MATCH_CLOSURE, %G_SIGNAL_MATCH_FUNC
+or %G_SIGNAL_MATCH_DATA match flags is required for successful matches.
+If no handlers were found, 0 is returned, the number of unblocked handlers
+otherwise. The match criteria should not apply to any handlers that are
+not currently blocked.
+</para>
+
+@instance: The instance to unblock handlers from.
+@mask: Mask indicating which of @signal_id, @detail, @closure, @func 
+       and/or @data the handlers have to match.
+@signal_id: Signal the handlers have to be connected to.
+@detail: Signal detail the handlers have to be connected to.
+@closure: The closure the handlers will invoke.
+@func: The C closure callback of the handlers (useless for non-C closures).
+@data: The closure data of the handlers' closures.
+@Returns: The amount of handlers that got unblocked.
 
 
 <!-- ##### FUNCTION g_signal_handlers_disconnect_matched ##### -->
 <para>
-
-</para>
-
-@instance: 
-@mask: 
-@signal_id: 
-@detail: 
-@closure: 
-@func: 
-@data: 
-@Returns: 
+Disconnects all handlers on an instance that match a certain selection 
+criteria. The criteria mask is passed as an OR-ed combination of
+#GSignalMatchType flags, and the criteria values are passed as arguments.
+Passing at least one of the %G_SIGNAL_MATCH_CLOSURE, %G_SIGNAL_MATCH_FUNC
+or %G_SIGNAL_MATCH_DATA match flags is required for successful matches.
+If no handlers were found, 0 is returned, the number of disconnected 
+handlers otherwise.
+</para>
+
+@instance: The instance to remove handlers from.
+@mask: Mask indicating which of @signal_id, @detail, @closure, @func 
+       and/or @data the handlers have to match.
+@signal_id: Signal the handlers have to be connected to.
+@detail: Signal detail the handlers have to be connected to.
+@closure: The closure the handlers will invoke.
+@func: The C closure callback of the handlers (useless for non-C closures).
+@data: The closure data of the handlers' closures.
+@Returns: The amount of handlers that got disconnected.
 
 
 <!-- ##### FUNCTION g_signal_handler_is_connected ##### -->
 <para>
-
+Returns whether @handler_id is the id of a handler connected to @instance.
 </para>
 
-@instance: 
-@handler_id: 
-@Returns: 
+@instance: The instance where a signal handler is sought.
+@handler_id: the handler id.
+@Returns: whether @handler_id identifies a handler connected to @instance.
 
 
 <!-- ##### MACRO g_signal_handlers_block_by_func ##### -->
 <para>
-
+Blocks all handlers on an instance that match @func and @data.
 </para>
 
-@instance: 
-@func: 
-@data: 
+@instance: The instance to block handlers from.
+@func: The C closure callback of the handlers (useless for non-C closures).
+@data: The closure data of the handlers' closures.
+@Returns: The number of handlers that got blocked.
 
 
 <!-- ##### MACRO g_signal_handlers_unblock_by_func ##### -->
 <para>
-
+Unblocks all handlers on an instance that match @func and @data.
 </para>
 
-@instance: 
-@func: 
-@data: 
+@instance: The instance to unblock handlers from.
+@func: The C closure callback of the handlers (useless for non-C closures).
+@data: The closure data of the handlers' closures.
+@Returns: The number of handlers that got unblocked.
 
 
 <!-- ##### MACRO g_signal_handlers_disconnect_by_func ##### -->
 <para>
-
+Disconnects all handlers on an instance that match @func and @data.
 </para>
 
-@instance: 
-@func: 
-@data: 
+@instance: The instance to remove handlers from.
+@func: The C closure callback of the handlers (useless for non-C closures).
+@data: The closure data of the handlers' closures.
+@Returns: The number of handlers that got disconnected.
 
 
 <!-- ##### FUNCTION g_signal_has_handler_pending ##### -->
 <para>
-
+Returns whether there are any handlers connected to @instance for the
+given signal id and detail.
 </para>
-
-@instance: 
-@signal_id: 
-@detail: 
-@may_be_blocked: 
-@Returns: 
+<para>
+One example of when you might use this is when the arguments to the 
+signal are difficult to compute. A class implementor may opt to not emit 
+the signal if no one is attached anyway, thus saving the cost of building
+the arguments.
+</para>
+
+@instance: the object whose signal handlers are sought.
+@signal_id: the signal id.
+@detail: the detail.
+@may_be_blocked: whether blocked handlers should count as match.
+@Returns: %TRUE if a handler is connected to the signal, 
+          %FALSE otherwise.
 
 
 <!-- ##### FUNCTION g_signal_stop_emission ##### -->
 <para>
-
+Stops a signal's current emission.
 </para>
-
-@instance: 
-@signal_id: 
-@detail: 
-
-
-<!-- ##### FUNCTION g_signal_stop_emission_by_name ##### -->
 <para>
-
+This will prevent the default method from running, if the signal was
+%G_SIGNAL_RUN_LAST and you connected normally (i.e. without the "after" 
+flag).
 </para>
-
-@instance: 
-@detailed_signal: 
-
-
-<!-- ##### FUNCTION g_signal_override_class_closure ##### -->
 <para>
-
+Prints a warning if used on a signal which isn't being emitted.
 </para>
 
-@signal_id: 
-@instance_type: 
-@class_closure: 
+@instance: the object whose signal handlers you wish to stop.
+@signal_id: the signal identifier, as returned by g_signal_lookup().
+@detail: the detail which the signal was emitted with.
 
 
-<!-- ##### FUNCTION g_signal_chain_from_overridden ##### -->
+<!-- ##### FUNCTION g_signal_stop_emission_by_name ##### -->
 <para>
-
+Stops a signal's current emission.
 </para>
-
-@instance_and_params: 
-@return_value: 
-
-
-<!-- ##### FUNCTION g_signal_new_class_handler ##### -->
 <para>
-
+This is just like g_signal_stop_emission() except it will look up the 
+signal id for you.
 </para>
 
-@signal_name: 
-@itype: 
-@signal_flags: 
-@class_handler: 
-@accumulator: 
-@accu_data: 
-@c_marshaller: 
-@return_type: 
-@n_params: 
-@Varargs: 
-@Returns: 
+@instance: the object whose signal handlers you wish to stop.
+@detailed_signal: a string of the form "signal-name::detail".
 
 
-<!-- ##### FUNCTION g_signal_override_class_handler ##### -->
+<!-- ##### FUNCTION g_signal_override_class_closure ##### -->
 <para>
-
+Overrides the class closure (i.e. the default handler) for the given signal
+for emissions on instances of @instance_type. @instance_type must be derived
+from the type to which the signal belongs.
 </para>
 
-@signal_name: 
-@instance_type: 
-@class_handler: 
+@signal_id: the signal id
+@instance_type: the instance type on which to override the class closure 
+                for the signal.
+@class_closure: the closure.
 
 
-<!-- ##### FUNCTION g_signal_chain_from_overridden_handler ##### -->
+<!-- ##### FUNCTION g_signal_chain_from_overridden ##### -->
 <para>
-
+Calls the original class closure of a signal. This function should only
+be called from an overridden class closure; see 
+g_signal_override_class_closure().
 </para>
 
-@instance: 
-@Varargs: 
+@instance_and_params:  the argument list of the signal emission. The first 
+  element in the array is a #GValue for the instance the signal is being 
+  emitted on. The rest are any arguments to be passed to the signal.
+@return_value: Location for the return value.
 
 
 <!-- ##### FUNCTION g_signal_add_emission_hook ##### -->
 <para>
-
+Adds an emission hook for a signal, which will get called for any emission
+of that signal, independent of the instance. This is possible only
+for signals which don't have #G_SIGNAL_NO_HOOKS flag set.
 </para>
 
-@signal_id: 
-@detail: 
-@hook_func: 
-@hook_data: 
-@data_destroy: 
-@Returns: 
+@signal_id: the signal identifier, as returned by g_signal_lookup().
+@detail: the detail on which to call the hook.
+@hook_func: a #GSignalEmissionHook function.
+@hook_data: user data for @hook_func.
+@data_destroy: a #GDestroyNotify for @hook_data.
+@Returns: the hook id, for later use with g_signal_remove_emission_hook().
 
 
 <!-- ##### FUNCTION g_signal_remove_emission_hook ##### -->
 <para>
-
+Deletes an emission hook.
 </para>
 
-@signal_id: 
-@hook_id: 
+@signal_id: the id of the signal
+@hook_id: the id of the emission hook, as returned by 
+g_signal_add_emission_hook()
 
 
 <!-- ##### FUNCTION g_signal_parse_name ##### -->
 <para>
-
+Internal function to parse a signal name into its @signal_id
+and @detail quark.
 </para>
 
-@detailed_signal: 
-@itype: 
-@signal_id_p: 
-@detail_p: 
-@force_detail_quark: 
-@Returns: 
+@detailed_signal: a string of the form "signal-name::detail".
+@itype: The interface/instance type that introduced "signal-name".
+@signal_id_p: Location to store the signal id.
+@detail_p: Location to store the detail quark.
+@force_detail_quark: %TRUE forces creation of a #GQuark for the detail.
+@Returns: Whether the signal name could successfully be parsed and @signal_id_p and @detail_p contain valid return values.
 
 
 <!-- ##### FUNCTION g_signal_get_invocation_hint ##### -->
 <para>
-
+Returns the invocation hint of the innermost signal emission of instance. 
 </para>
 
-@instance: 
-@Returns: 
+@instance: the instance to query
+@Returns: the invocation hint of the innermost signal emission.
 
 
 <!-- ##### FUNCTION g_signal_type_cclosure_new ##### -->
 <para>
-
+Creates a new closure which invokes the function found at the offset
+@struct_offset in the class structure of the interface or classed type
+identified by @itype.
 </para>
 
-@itype: 
-@struct_offset: 
-@Returns: 
+@itype: the #GType identifier of an interface or classed type
+@struct_offset: the offset of the member function of @itype's class 
+  structure which is to be invoked by the new closure
+@Returns: a new #GCClosure
 
 
 <!-- ##### FUNCTION g_signal_accumulator_true_handled ##### -->
 <para>
-
+A predefined #GSignalAccumulator for signals that return a
+boolean values. The behavior that this accumulator gives is
+that a return of %TRUE stops the signal emission: no further
+callbacks will be invoked, while a return of %FALSE allows
+the emission to coninue. The idea here is that a %TRUE return
+indicates that the callback <emphasis>handled</emphasis> the signal,
+and no further handling is needed.
 </para>
 
-@ihint: 
-@return_accu: 
-@handler_return: 
-@dummy: 
-@Returns: 
+@ihint: standard #GSignalAccumulator parameter
+@return_accu: standard #GSignalAccumulator parameter
+@handler_return: standard #GSignalAccumulator parameter
+@dummy: standard #GSignalAccumulator parameter
+@Returns: standard #GSignalAccumulator result
+@Since: 2.4
 
 
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/value_arrays.sgml glib/docs/reference/gobject/tmpl/value_arrays.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/value_arrays.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/value_arrays.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -2,126 +2,139 @@
 Value arrays
 
 <!-- ##### SECTION Short_Description ##### -->
-
+A container structure to maintain an array of generic values
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
+The prime purpose of a #GValueArray is for it to be used as an object property
+that holds an array of values. A #GValueArray wraps an array of #GValue elements
+in order for it to be used as a boxed type through %G_TYPE_VALUE_ARRAY.
 </para>
 
-
 <!-- ##### SECTION See_Also ##### -->
 <para>
-
+#GValue, #GParamSpecValueArray, g_param_spec_value_array()
 </para>
 
-
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### STRUCT GValueArray ##### -->
 <para>
-
+A #GValueArray contains an array of #GValue elements.
 </para>
 
-@n_values: 
-@values: 
+@n_values:     number of values contained in the array
+@values:       array of values
 
 <!-- ##### FUNCTION g_value_array_get_nth ##### -->
 <para>
-
+Return a pointer to the value at @index_ containd in @value_array.
 </para>
 
-@value_array: 
-@index_: 
-@Returns: 
+@value_array: #GValueArray to get a value from
+@index_:      index of the value of interest
+@Returns:     pointer to a value at @index_ in @value_array
 
 
 <!-- ##### FUNCTION g_value_array_new ##### -->
 <para>
-
+Allocate and initialize a new #GValueArray, optionally preserve space
+for @n_prealloced elements. New arrays always contain 0 elements,
+regardless of the value of @n_prealloced.
 </para>
 
-@n_prealloced: 
-@Returns: 
+@n_prealloced: number of values to preallocate space for
+@Returns:      a newly allocated #GValueArray with 0 values
 
 
 <!-- ##### FUNCTION g_value_array_copy ##### -->
 <para>
-
+Construct an exact copy of a #GValueArray by duplicating all its
+contents.
 </para>
 
-@value_array: 
-@Returns: 
+@value_array: #GValueArray to copy
+@Returns:     Newly allocated copy of #GValueArray
 
 
 <!-- ##### FUNCTION g_value_array_free ##### -->
 <para>
-
+Free a #GValueArray including its contents.
 </para>
 
-@value_array: 
+@value_array: #GValueArray to free
 
 
 <!-- ##### FUNCTION g_value_array_append ##### -->
 <para>
-
+Insert a copy of @value as last element of @value_array.
 </para>
 
-@value_array: 
-@value: 
-@Returns: 
+@value_array: #GValueArray to add an element to
+@value:       #GValue to copy into #GValueArray
+@Returns:     the #GValueArray passed in as @value_array
 
 
 <!-- ##### FUNCTION g_value_array_prepend ##### -->
 <para>
-
+Insert a copy of @value as first element of @value_array.
 </para>
 
-@value_array: 
-@value: 
-@Returns: 
+@value_array: #GValueArray to add an element to
+@value:       #GValue to copy into #GValueArray
+@Returns:     the #GValueArray passed in as @value_array
 
 
 <!-- ##### FUNCTION g_value_array_insert ##### -->
 <para>
-
+Insert a copy of @value at specified position into @value_array.
 </para>
 
-@value_array: 
-@index_: 
-@value: 
-@Returns: 
+@value_array: #GValueArray to add an element to
+@index_:      insertion position, must be &lt;= value_array-&gt;n_values
+@value:       #GValue to copy into #GValueArray
+@Returns:     the #GValueArray passed in as @value_array
 
 
 <!-- ##### FUNCTION g_value_array_remove ##### -->
 <para>
-
+Remove the value at position @index_ from @value_array.
 </para>
 
-@value_array: 
-@index_: 
-@Returns: 
+@value_array: #GValueArray to remove an element from
+@index_:      position of value to remove, must be &lt; value_array->n_values
+@Returns:     the #GValueArray passed in as @value_array
 
 
 <!-- ##### FUNCTION g_value_array_sort ##### -->
 <para>
+Sort @value_array using @compare_func to compare the elements accoring to
+the semantics of #GCompareFunc.
+</para>
 
+<para>
+The current implementation uses Quick-Sort as sorting algorithm.
 </para>
 
-@value_array: 
-@compare_func: 
-@Returns: 
+@value_array:  #GValueArray to sort
+@compare_func: function to compare elements
+@Returns:      the #GValueArray passed in as @value_array
 
 
 <!-- ##### FUNCTION g_value_array_sort_with_data ##### -->
 <para>
+Sort @value_array using @compare_func to compare the elements accoring
+to the semantics of #GCompareDataFunc.
+</para>
 
+<para>
+The current implementation uses Quick-Sort as sorting algorithm.
 </para>
 
-@value_array: 
-@compare_func: 
-@user_data: 
-@Returns: 
+@value_array:   #GValueArray to sort
+@compare_func:  function to compare elements
+@user_data:     extra data argument provided for @compare_func
+@Returns:       the #GValueArray passed in as @value_array
 
 
diff -Naurp glib-2.18.1/docs/reference/gobject/tmpl/value_collection.sgml glib/docs/reference/gobject/tmpl/value_collection.sgml
--- glib-2.18.1/docs/reference/gobject/tmpl/value_collection.sgml	2008-09-18 02:41:00.000000000 +0300
+++ glib/docs/reference/gobject/tmpl/value_collection.sgml	2009-04-28 09:16:30.000000000 +0300
@@ -2,54 +2,64 @@
 Varargs Value Collection
 
 <!-- ##### SECTION Short_Description ##### -->
-
+Converting varargs to generic values
 
 <!-- ##### SECTION Long_Description ##### -->
 <para>
-
+The macros in this section provide the varargs parsing support needed
+in variadic GObject functions such as g_object_new() or g_object_set().
+They currently support the collection of integral types, floating point 
+types and pointers.
 </para>
 
-
 <!-- ##### SECTION See_Also ##### -->
 <para>
-
+#GValueTable
 </para>
 
-
 <!-- ##### SECTION Stability_Level ##### -->
 
 
 <!-- ##### UNION GTypeCValue ##### -->
 <para>
-
+A union holding one collected value.
 </para>
 
 
 <!-- ##### MACRO G_VALUE_COLLECT ##### -->
 <para>
-
+Collects a variable argument value from a va_list. We have to
+implement the varargs collection as a macro, because on some systems
+va_list variables cannot be passed by reference.
 </para>
 
-@value: 
-@var_args: 
-@flags: 
-@__error: 
+@value: a #GValue return location. @value is supposed to be initialized 
+  according to the value type to be collected
+@var_args: the va_list variable; it may be evaluated multiple times
+@flags: flags which are passed on to the collect_value() function of
+  the #GTypeValueTable of @value.
+@__error: a #gchar** variable that will be modified to hold a g_new()
+  allocated error messages if something fails
 
 
 <!-- ##### MACRO G_VALUE_LCOPY ##### -->
 <para>
-
+Collects a value's variable argument locations from a va_list. 
 </para>
 
-@value: 
-@var_args: 
-@flags: 
-@__error: 
+@value: a #GValue return location. @value is supposed to be initialized 
+  according to the value type to be collected
+@var_args: the va_list variable; it may be evaluated multiple times
+@flags: flags which are passed on to the lcopy_value() function of
+  the #GTypeValueTable of @value.
+@__error: a #gchar** variable that will be modified to hold a g_new()
+  allocated error messages if something fails
 
 
 <!-- ##### MACRO G_VALUE_COLLECT_FORMAT_MAX_LENGTH ##### -->
 <para>
-
+The maximal number of #GTypeCValue<!-- -->s which can be collected for a 
+single #GValue.
 </para>
 
 
